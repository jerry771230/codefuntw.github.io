<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>iTerm2 + oh-my-zsh = 好用的終端機</title>
    <url>/2019/2019011001-osx-iterm-2-oh-my-zsh.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.iterm2.com/">iTerm2</a> 是 macOS 下好用的 terminal 軟體，在 iTerm2 下安裝 <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> 以打造個人專屬酷炫好用的 zsh command line 環境 :)</p>
 <span id="more"></span>

<h2 id="安裝-iTerm2"><a href="#安裝-iTerm2" class="headerlink" title="安裝 iTerm2"></a>安裝 iTerm2</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew tap caskroom/cask</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew cask instal iterm2</span></span><br><span class="line">==&gt; Satisfying dependencies</span><br><span class="line">==&gt; Downloading https://iterm2.com/downloads/stable/iTerm2-3_2_0.zip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Verifying SHA-256 checksum for Cask &#x27;iterm2&#x27;.</span><br><span class="line">==&gt; Installing Cask iterm2</span><br><span class="line">==&gt; Moving App &#x27;iTerm.app&#x27; to &#x27;/Applications/iTerm.app&#x27;.</span><br><span class="line">🍺  iterm2 was successfully installed!</span><br></pre></td></tr></table></figure>



<h2 id="設定-iTerm2"><a href="#設定-iTerm2" class="headerlink" title="設定 iTerm2"></a>設定 iTerm2</h2><h3 id="設定-Terminal-顏色"><a href="#設定-Terminal-顏色" class="headerlink" title="設定 Terminal 顏色"></a>設定 Terminal 顏色</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Preferences &gt; Profiles &gt; Terminal &gt; Report Terminal Type</span><br></pre></td></tr></table></figure>

<p>設定成  <code>xterm-256color</code>。</p>
<h3 id="修改-color-scheme"><a href="#修改-color-scheme" class="headerlink" title="修改 color scheme"></a>修改 color scheme</h3><p>從 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes">mbadolato&#x2F;iTerm2-Color-Schemes</a> 下載 <code>Solarized Dark - Patched.itermcolors</code>，然後再從</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Preferences &gt; Profiles &gt; Colors &gt; Color Presets...</span><br></pre></td></tr></table></figure>

<p>按 <code>import…</code> 將它載入，再從 <code>Color Presets…</code> 選定 <code>Solarized Dark - Patched.itermcolors</code> 作為 iTerm2 的 theme。</p>
<h2 id="字型管理"><a href="#字型管理" class="headerlink" title="字型管理"></a>字型管理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew tap caskroom/fonts</span></span><br><span class="line"></span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 1 tap (homebrew/core).</span><br><span class="line">==&gt; Updated Formulae</span><br><span class="line">pulumi</span><br><span class="line"></span><br><span class="line">==&gt; Tapping homebrew/cask-fonts</span><br><span class="line">Cloning into &#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask-fonts&#x27;...</span><br><span class="line">remote: Counting objects: 1198, done.</span><br><span class="line">remote: Compressing objects: 100% (729/729), done.</span><br><span class="line">remote: Total 1198 (delta 762), reused 571 (delta 466), pack-reused 0</span><br><span class="line">Receiving objects: 100% (1198/1198), 228.83 KiB | 134.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (762/762), done.</span><br><span class="line">Tapped 1175 casks (1,215 files, 1MB).</span><br></pre></td></tr></table></figure>

<h3 id="安裝-powerline-font-字型"><a href="#安裝-powerline-font-字型" class="headerlink" title="安裝 powerline font 字型"></a>安裝 powerline font 字型</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew cask install font-sourcecodepro-nerd-font</span></span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Tapping homebrew/cask</span><br><span class="line">Cloning into &#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask&#x27;...</span><br><span class="line">remote: Counting objects: 4139, done.</span><br><span class="line">remote: Compressing objects: 100% (4126/4126), done.</span><br><span class="line">remote: Total 4139 (delta 25), reused 624 (delta 10), pack-reused 0</span><br><span class="line">Receiving objects: 100% (4139/4139), 1.30 MiB | 1.36 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (25/25), done.</span><br><span class="line">Tapped 1 command and 4041 casks (4,148 files, 4.1MB).</span><br><span class="line">==&gt; Satisfying dependencies</span><br><span class="line">==&gt; Downloading https://github.com/ryanoasis/nerd-fonts/releases/download/v2.0.0</span><br><span class="line">==&gt; Downloading from https://github-production-release-asset-2e65be.s3.amazonaws</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Verifying SHA-256 checksum for Cask &#x27;font-sourcecodepro-nerd-font&#x27;.</span><br><span class="line">==&gt; Installing Cask font-sourcecodepro-nerd-font</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Light Italic Nerd Font Complete.ttf&#x27; to &#x27;/Users/</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Bold Italic Nerd Font Complete.ttf&#x27; to &#x27;/Users/j</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Medium Nerd Font Complete.ttf&#x27; to &#x27;/Users/jerry/</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Medium Italic Nerd Font Complete.ttf&#x27; to &#x27;/Users</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro ExtraLight Nerd Font Complete.ttf&#x27; to &#x27;/Users/je</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro ExtraLight Italic Nerd Font Complete.ttf&#x27; to &#x27;/U</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Black Nerd Font Complete.ttf&#x27; to &#x27;/Users/jerry/L</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Black Italic Nerd Font Complete.ttf&#x27; to &#x27;/Users/</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Nerd Font Complete.ttf&#x27; to &#x27;/Users/jerry/Library</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Semibold Nerd Font Complete.ttf&#x27; to &#x27;/Users/jerr</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Semibold Italic Nerd Font Complete.ttf&#x27; to &#x27;/Use</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Light Nerd Font Complete.ttf&#x27; to &#x27;/Users/jerry/L</span><br><span class="line">==&gt; Moving Font &#x27;Sauce Code Pro Bold Nerd Font Complete.ttf&#x27; to &#x27;/Users/jerry/Li</span><br><span class="line">🍺  font-sourcecodepro-nerd-font was successfully installed!</span><br></pre></td></tr></table></figure>

<h3 id="iTerm2-設定"><a href="#iTerm2-設定" class="headerlink" title="iTerm2 設定"></a>iTerm2 設定</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Preferences &gt; Profiles &gt; Text &gt; Change Font</span><br></pre></td></tr></table></figure>

<p>選擇 <code>SauceCodePro Nerd Font</code>。</p>
<p>查詢其他 nerd 字型，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew cask search nerd</span></span><br></pre></td></tr></table></figure>



<h2 id="安裝-zsh"><a href="#安裝-zsh" class="headerlink" title="安裝 zsh"></a>安裝 zsh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install zsh</span></span><br><span class="line"></span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/zsh-5.6.2.high_sierra.bottl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Pouring zsh-5.6.2.high_sierra.bottle.tar.gz</span><br><span class="line">🍺  /usr/local/Cellar/zsh/5.6.2: 1,478 files, 12.8MB</span><br></pre></td></tr></table></figure>

<h3 id="設為預設的-shell"><a href="#設為預設的-shell" class="headerlink" title="設為預設的 shell"></a>設為預設的 shell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo sh -c <span class="string">&quot;echo <span class="subst">$(which zsh)</span> &gt;&gt; /etc/shells&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chsh -s $(<span class="built_in">which</span> zsh)</span></span><br></pre></td></tr></table></figure>

<h3 id="安裝-oh-my-zsh"><a href="#安裝-oh-my-zsh" class="headerlink" title="安裝 oh-my-zsh"></a>安裝 oh-my-zsh</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line">Cloning Oh My Zsh...</span><br><span class="line">Cloning into &#x27;/Users/jerry/.oh-my-zsh&#x27;...</span><br><span class="line">remote: Counting objects: 898, done.</span><br><span class="line">remote: Compressing objects: 100% (754/754), done.</span><br><span class="line">remote: Total 898 (delta 25), reused 732 (delta 17), pack-reused 0</span><br><span class="line">Receiving objects: 100% (898/898), 595.72 KiB | 755.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (25/25), done.</span><br><span class="line">Looking for an existing zsh config...</span><br><span class="line">Found ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh</span><br><span class="line">Using the Oh My Zsh template file and adding it to ~/.zshrc</span><br><span class="line">         __                                     __</span><br><span class="line">  ____  / /_     ____ ___  __  __   ____  _____/ /_</span><br><span class="line"> / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \</span><br><span class="line">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</span><br><span class="line">\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/</span><br><span class="line">                        /____/                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at https://shop.planetargon.com.</span><br></pre></td></tr></table></figure>

<p>安裝完成後會建立資料夾 <code>~/.oh-my-zsh</code></p>
<h3 id="套用主題"><a href="#套用主題" class="headerlink" title="套用主題"></a>套用主題</h3><p><strong>1. 開啟 <code>.zshrc</code></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim ~/.zshrc</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 套用主題</strong></p>
<p>預設風格為 <code>ZSH_THEME=&quot;robbyrussell&quot;</code>，修改如下，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 使用agnoster主題預設為robbyrussell</span></span></span><br><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 隱藏用戶名稱(user@hostname)</span></span></span><br><span class="line">DEFAULT_USER=`id -un`</span><br></pre></td></tr></table></figure>

<p><strong>3. 立即套用</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span></span><br></pre></td></tr></table></figure>



<h2 id="安裝-powerlevel9k-主題"><a href="#安裝-powerlevel9k-主題" class="headerlink" title="安裝 powerlevel9k 主題"></a>安裝 powerlevel9k 主題</h2><p><strong>1. 下載 powerlevel9k</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span></span><br><span class="line"></span><br><span class="line">Cloning into &#x27;/Users/jerry/.oh-my-zsh/custom/themes/powerlevel9k&#x27;...</span><br><span class="line">remote: Enumerating objects: 29, done.</span><br><span class="line">remote: Counting objects: 100% (29/29), done.</span><br><span class="line">remote: Compressing objects: 100% (23/23), done.</span><br><span class="line">remote: Total 6963 (delta 7), reused 16 (delta 6), pack-reused 6934</span><br><span class="line">Receiving objects: 100% (6963/6963), 1.96 MiB | 881.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (4447/4447), done.</span><br></pre></td></tr></table></figure>

<p><strong>2. 套用</strong></p>
<p>修改 <code>~/.zshrc</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用powerlevel9k主題亦可選擇使用agnoster或預設robbyrussell</span></span><br><span class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">隱藏用戶名稱(user@hostname)</span></span><br><span class="line">DEFAULT_USER=`id -un`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">含有icon的字型</span></span><br><span class="line">POWERLEVEL9K_MODE=&#x27;nerdfont-complete&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">command</span> line 左邊想顯示的內容(資料夾路徑、資料夾讀寫狀態、版本控制資訊)</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir dir_writable vcs) # &lt;= left prompt 設了 &quot;dir&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">command</span> line 右邊想顯示的內容(狀態、RAM、CPU、時間)</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status ram load time)</span><br><span class="line">POWERLEVEL9K_PROMPT_ON_NEWLINE=true</span><br></pre></td></tr></table></figure>

<p>其他顯示指令可參考 <a href="https://github.com/bhilburn/powerlevel9k#available-prompt-segments">Available Prompt Segments</a></p>
<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><h3 id="安裝-zsh-completions"><a href="#安裝-zsh-completions" class="headerlink" title="安裝 zsh-completions"></a>安裝 zsh-completions</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install zsh-completions</span></span><br><span class="line"></span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 2 taps (homebrew/core, homebrew/cask).</span><br><span class="line">==&gt; Updated Formulae</span><br><span class="line">ark               bullet            hapi-fhir-cli     nano              prettier          rustup-init       vips</span><br><span class="line">bind              convox            libphonenumber    ntopng            qt                skaffold          xcodegen</span><br><span class="line"></span><br><span class="line">==&gt; Downloading https://github.com/zsh-users/zsh-completions/archive/0.28.0.tar.gz</span><br><span class="line">==&gt; Downloading from https://codeload.github.com/zsh-users/zsh-completions/tar.gz/0.28.0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Caveats</span><br><span class="line">To activate these completions, add the following to your .zshrc:</span><br><span class="line"></span><br><span class="line">  fpath=(/usr/local/share/zsh-completions $fpath)</span><br><span class="line"></span><br><span class="line">You may also need to force rebuild `zcompdump`:</span><br><span class="line"></span><br><span class="line">  rm -f ~/.zcompdump; compinit</span><br><span class="line"></span><br><span class="line">Additionally, if you receive &quot;zsh compinit: insecure directories&quot; warnings when attempting</span><br><span class="line">to load these completions, you may need to run this:</span><br><span class="line"></span><br><span class="line">  chmod go-w &#x27;/usr/local/share&#x27;</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/zsh-completions/0.28.0: 145 files, 1MB, built in 9 seconds</span><br></pre></td></tr></table></figure>

<p>修改 <code>~/.zshrc</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">ZSH=$HOME/.oh-my-zsh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zsh-completions</span></span><br><span class="line">fpath=(/usr/local/share/zsh-completions $fpath)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Rebuild <code>.zcompdump</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -f ~/.zcompdump; compinit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="安裝-zsh-autosuggestions"><a href="#安裝-zsh-autosuggestions" class="headerlink" title="安裝 zsh-autosuggestions"></a>安裝 zsh-autosuggestions</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span></span><br><span class="line"></span><br><span class="line">Cloning into &#x27;/Users/jerry/.oh-my-zsh/custom/plugins/zsh-autosuggestions&#x27;...</span><br><span class="line">remote: Counting objects: 1783, done.</span><br><span class="line">remote: Total 1783 (delta 0), reused 0 (delta 0), pack-reused 1783</span><br><span class="line">Receiving objects: 100% (1783/1783), 394.96 KiB | 267.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1126/1126), done.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-users&#x2F;zsh-autosuggestions</a> - Fish-like autosuggestions for zsh</p>
<h3 id="安裝-autojump"><a href="#安裝-autojump" class="headerlink" title="安裝 autojump"></a>安裝 autojump</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install autojump</span></span><br><span class="line"></span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 2 taps (homebrew/core, homebrew/cask).</span><br><span class="line">==&gt; Updated Formulae</span><br><span class="line">git-archive-all</span><br><span class="line"></span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/autojump-22.5.1.high_sierra.bottle.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Pouring autojump-22.5.1.high_sierra.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Add the following line to your ~/.bash_profile or ~/.zshrc file (and remember</span><br><span class="line">to source the file to update your current session):</span><br><span class="line">  [ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line">If you use the Fish shell then add the following line to your ~/.config/fish/config.fish:</span><br><span class="line">  [ -f /usr/local/share/autojump/autojump.fish ]; and source /usr/local/share/autojump/autojump.fish</span><br><span class="line"></span><br><span class="line">zsh completions have been installed to:</span><br><span class="line">  /usr/local/share/zsh/site-functions</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/autojump/22.5.1: 20 files, 168.2KB</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/wting">wting&#x2F;autojump</a> - A cd command that learns - easily navigate directories from the command line</p>
<h3 id="啟用-plugin"><a href="#啟用-plugin" class="headerlink" title="啟用 plugin"></a>啟用 plugin</h3><p>oh-my-zsh 內建的 plugin 都放在 <code>~/.oh-my-zsh/plugins</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> ~/.oh-my-zsh/plugins</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>.zshrc</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">plugins=(git autojump zsh-autosuggestions)</span><br></pre></td></tr></table></figure>



<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://medium.com/statementdog-engineering/prettify-your-zsh-command-line-prompt-3ca2acc967f">超簡單！十分鐘打造漂亮又好用的 zsh command line 環境</a></li>
<li><a href="https://andy6804tw.github.io/2018/01/01/iterm2-zsh-intro/#%E5%A5%97%E7%94%A8%E4%B8%BB%E9%A1%8C">macOS好用的終端機(iterm2+zsh+oh-my-zsh)</a></li>
<li><a href="http://huli.logdown.com/posts/402147-iterm2-zsh-better-environment">[心得] iTerm2 + zsh，打造更好的工作環境</a></li>
<li><a href="https://code.tutsplus.com/tutorials/how-to-customize-your-command-prompt--net-24083">How to Customize Your Command Prompt</a></li>
<li>oh-my-zsh 的 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">Themes</a></li>
</ul>
]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>iterm2</tag>
        <tag>zsh</tag>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Telnet 測試 TCP Port</title>
    <url>/2019/2019041002-use-telnet-to-test-tcp-port.html</url>
    <content><![CDATA[<p>想知道遠端 port 是否由開通，使用 telnet 測試就對了！</p>
<span id="more"></span>

<h2 id="安裝-Telnet"><a href="#安裝-Telnet" class="headerlink" title="安裝 Telnet"></a>安裝 Telnet</h2><p>在 Mac 下使用 <code>Homebrew</code> 安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install telnet</span><br></pre></td></tr></table></figure>

<h2 id="測試遠端-port"><a href="#測試遠端-port" class="headerlink" title="測試遠端 port"></a>測試遠端 port</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ telnet 172.28.7.100 80</span><br><span class="line"></span><br><span class="line">Trying 172.28.7.100...</span><br><span class="line">Connected to 172.28.7.100.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p>遠端連線成功，表示 80 port 已開啟。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ telnet 172.28.7.100 25</span><br><span class="line"></span><br><span class="line">Trying 172.28.7.100...</span><br><span class="line">telnet: connect to address 172.28.7.100: Connection refused</span><br><span class="line">telnet: Unable to connect to remote host</span><br></pre></td></tr></table></figure>
<p>遠端拒絕連線，表示 25 port 未開啟。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.gtwang.org/linux/troubleshooting-telnet/">使用 Telnet 診斷各種伺服器與網路連線問題</a></li>
<li><a href="https://netbeez.net/blog/telnet-to-test-connectivity-to-tcp/">How to use telnet to test connectivity to TCP ports</a></li>
</ul>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>telnet</tag>
      </tags>
  </entry>
  <entry>
    <title>HAProxy 負載模式設定</title>
    <url>/2019/2019041001-haproxy-configuration-balance.html</url>
    <content><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>某天收到客戶端提出帳號登入後，只要登出後，就無法再登入了。這情況在專案驗收後一段時間都未發生，而是在客戶的網管單位進行了重設網路存取設定後才發生。</p>
 <span id="more"></span>

<h2 id="部署架構及驗證"><a href="#部署架構及驗證" class="headerlink" title="部署架構及驗證"></a>部署架構及驗證</h2><p>部署架構，</p>
<ol>
<li>Web server * 2</li>
<li>HAProxy * 2</li>
<li>DB server * 3 （以 db cluster 方式部署）</li>
<li>登入採用 JWT 方式</li>
</ol>
<p>同樣的設定及部署方式，包含程式設計、Web 及 DB 的部署，在其他二個地方都沒有發生（攤手<br>但基於某些因素，無法直接請客戶的網管單位協助（Orz</p>
<h2 id="只是一個設定值，結果大不同"><a href="#只是一個設定值，結果大不同" class="headerlink" title="只是一個設定值，結果大不同"></a>只是一個設定值，結果大不同</h2><p>由原建置 HAProxy 的同事提出，更改 balance 參數值，讓同一來源的 client 可以持續訪問同一 web server，或許可以解決（吧？</p>
<h3 id="修改-config-file"><a href="#修改-config-file" class="headerlink" title="修改 config file"></a>修改 config file</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/haproxy/haproxy.cnf</span><br></pre></td></tr></table></figure>

<p>找到 web server 相關的設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">listen webserver</span><br><span class="line">    <span class="built_in">bind</span> 172.28.7.100:80 transparent</span><br><span class="line">    balance roundrobin</span><br><span class="line">    mode http</span><br><span class="line">    server web1 192.168.99.244:8080 check fall 5 inter 2000 rise 2</span><br><span class="line">    server web2 192.168.99.245:8080 check fall 5 inter 2000 rise 2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>balance source<br>Of these options only the “balance source” requires any real discusion. This method will ensure that a request from the IP address 1.2.3.4 will always go to the same backend, assuming it remains alive. This allows you to sidestep any issues with cookie persistence if sessions are stored locally.</p>
</blockquote>
<p>將 <code>balance roundrobin</code> 修改成 <code>balance source</code>，再重啓 HAProxy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart haproxy</span><br></pre></td></tr></table></figure>

<p>檢查 HAProxy 是否正常運作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl status haproxy</span><br></pre></td></tr></table></figure>

<p>二個 HAProxy 服務都進行了以上修改，就解決了！！</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://cbonte.github.io/haproxy-dconv/2.0/configuration.html#balance">HAProxy Documentation - Configuration Manual - balance</a></li>
<li><a href="https://ssorc.tw/5937">HAProxy 實現 load balance 負載平衡</a></li>
<li><a href="http://network.51cto.com/art/201108/286178.htm">HAProxy负载均衡器的配置与算法</a></li>
<li><a href="http://benjr.tw/95644">HAProxy 負載模式</a></li>
<li><a href="https://blog.51cto.com/jinyudong/1910320">Haproxy的三种保持客户端会话保持方式</a></li>
<li><a href="https://segmentfault.com/a/1190000012745434">基于Cookie的Haproxy防止过速请求的方法</a></li>
<li><a href="https://www.suse.com/zh-tw/documentation/sle-ha-12/book_sleha/data/sec_ha_lb_haproxy.html">使用 HAProxy 設定負載平衡</a></li>
</ul>
]]></content>
      <categories>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 workspace 快速開啟 VS Code 進行編輯</title>
    <url>/2019/2019042301-open-vs-code-from-command-line.html</url>
    <content><![CDATA[<p>一定要會的技巧 - 從 command line 直接開啟 VS Code!</p>
<span id="more"></span>

<h2 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h2><ol>
<li>macOS: 10.13.6 High Sierra</li>
<li>iTerm2</li>
</ol>
<h2 id="只要四個步驟"><a href="#只要四個步驟" class="headerlink" title="只要四個步驟"></a>只要四個步驟</h2><ol>
<li>開啟 VS Code，按下快速鍵 <code>command + shift + p</code></li>
<li>在跳出的對話框命令列後輸入或找到 <code>&gt;Shell Command: Install &#39;code&#39; command in PATH</code></li>
<li>等待安裝完成後，開啟 iTerm2</li>
<li>進入 workspace，然後在 command line 輸入 <code>code .</code> 就可以開始使用 VS Code 編輯整個工作目錄了 :)</li>
</ol>
<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://code.visualstudio.com/docs/setup/mac">Visual Studio Code on macOS</a></li>
</ul>
]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>分隔 Laravel log file 以解決 Permission Deny 問題</title>
    <url>/2019/2019042401-laravel-isolate-log-file.html</url>
    <content><![CDATA[<p>Laravel 理當會將發生的例外錯誤（Exception）寫到 <code>storage/logs/laravel-yyyy-mm-dd.log</code>，但查詢該檔案，卻看不到應有的錯誤內容！</p>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>Docker 安裝的內容，</p>
<ol>
<li>Ubuntu 18.04</li>
<li>Nginx 1.14</li>
<li>php7.3-fpm</li>
</ol>
<h2 id="權限問題-Permission-Deny"><a href="#權限問題-Permission-Deny" class="headerlink" title="權限問題 Permission Deny"></a>權限問題 Permission Deny</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll storage/logs/</span><br><span class="line"></span><br><span class="line">-rw-r--r--. 1 www-data www-data  30283 Apr 16 23:55 laravel-2019-04-16.log</span><br><span class="line">-rw-r--r--. 1 www-data www-data  30079 Apr 17 23:55 laravel-2019-04-17.log</span><br><span class="line">-rw-r--r--. 1 root     root      30283 Apr 18 23:55 laravel-2019-04-18.log</span><br><span class="line">-rw-r--r--. 1 root     root      38283 Apr 19 23:55 laravel-2019-04-19.log</span><br></pre></td></tr></table></figure>

<p>系統有 crontab 定時處理事務，在處理的同時會以 <code>Log::info()</code> 輸出，所以產生的 log 檔案，其 owner 會是 root。<br>網站程式運行的 user 是 <code>www-data</code>，所以若發生程式的 Exception 就會因為 Permission Deny 而無法寫入，</p>
<h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><h3 id="成功的解法-Success"><a href="#成功的解法-Success" class="headerlink" title="成功的解法  Success"></a>成功的解法  Success</h3><p>在 <code>bootstrap/app.php</code> 檔案內加入以下程式碼，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// isolate artisan console log and laravel service log</span></span><br><span class="line"><span class="comment">// https://stackoverflow.com/questions/27674597/laravel-daily-log-created-with-wrong-permissions</span></span><br><span class="line"><span class="variable">$app</span>-&gt;<span class="title function_ invoke__">configureMonologUsing</span>(function (Monolog\Logger <span class="variable">$monolog</span>) &#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">storage_path</span>(<span class="string">&#x27;logs/&#x27;</span> . <span class="title function_ invoke__">php_sapi_name</span>() . <span class="string">&#x27;-&#x27;</span> . <span class="title function_ invoke__">posix_getpwuid</span>(<span class="title function_ invoke__">posix_geteuid</span>())[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;.log&#x27;</span>);</span><br><span class="line">    <span class="variable">$monolog</span>-&gt;<span class="title function_ invoke__">pushHandler</span>(<span class="variable">$handler</span> = <span class="keyword">new</span> <span class="title class_">Monolog\Handler\RotatingFileHandler</span>(<span class="variable">$filename</span>, <span class="number">60</span>));</span><br><span class="line">    <span class="variable">$handler</span>-&gt;<span class="title function_ invoke__">setFilenameFormat</span>(<span class="string">&#x27;laravel-&#123;date&#125;-&#123;filename&#125;&#x27;</span>, <span class="string">&#x27;Y-m-d&#x27;</span>);</span><br><span class="line">    <span class="variable">$formatter</span> = <span class="keyword">new</span> <span class="title class_">LineFormatter</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$formatter</span>-&gt;<span class="title function_ invoke__">includeStacktraces</span>();</span><br><span class="line">    <span class="variable">$handler</span>-&gt;<span class="title function_ invoke__">setFormatter</span>(<span class="variable">$formatter</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>以 <code>php artisan command</code> 執行或是 crontab 所產生的 log file，其 owner 都會是 <code>root</code>，<br>如果是網站運行時的 Exception 所建立的 log file，則 owner 會是 <code>www-data</code>，符合要的結果。 😄</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll storage/logs/</span><br><span class="line"></span><br><span class="line">-rw-r--r--. 1 root     root     2652 Apr 24 06:30 laravel-2019-04-24-cli-root.log</span><br><span class="line">-rw-r--r--. 1 www-data www-data  78B Apr 24 04:24 laravel-2019-04-24-fpm-fcgi-www-data.log</span><br></pre></td></tr></table></figure>


<h3 id="無法得到預期效果的處理方式-failed"><a href="#無法得到預期效果的處理方式-failed" class="headerlink" title="無法得到預期效果的處理方式  failed"></a>無法得到預期效果的處理方式  failed</h3><h4 id="用-www-data-執行"><a href="#用-www-data-執行" class="headerlink" title="用 www-data 執行"></a>用 www-data 執行</h4><p>以 <code>www-data</code> user 運行 <code>php artisan command</code>？</p>
<p>切換執行的 user 身份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su www-data</span><br><span class="line"></span><br><span class="line">This account is currently not available.</span><br></pre></td></tr></table></figure>

<p>查看 <code>www-data</code> user</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/passwd | grep www</span><br><span class="line"></span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>因 <code>/usr/sbin/nologin</code> 的關係，所以無法切換 user，<br>修改成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/passwd</span><br><span class="line"></span><br><span class="line">www-data:x:33:33:www-data:/var/www:/bin/bash</span><br></pre></td></tr></table></figure>

<p>然後以 <code>www-data</code> 身份執行 php artisan 以產生 log file，會得到 owner 為 <code>www-data</code> 的 log file，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su www-data</span><br><span class="line">$ php artisan <span class="built_in">command</span>:xxxx</span><br><span class="line">$ ll storage/logs/</span><br></pre></td></tr></table></figure>

<p><strong>BUT</strong> crontab 執行產生的 log file 仍然 root，Orz</p>
<h4 id="修改-crontab"><a href="#修改-crontab" class="headerlink" title="修改 crontab"></a>修改 crontab</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ crontab -e</span><br><span class="line"></span><br><span class="line">* * * * * /usr/bin/php /home/www/code/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>修改成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* * * * * www-data /usr/bin/php /home/www/code/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>然後執行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service cron reload</span><br></pre></td></tr></table></figure>

<p>結果 cron 無法運作，😳</p>
<h5 id="可能需要這樣做（未驗證）"><a href="#可能需要這樣做（未驗證）" class="headerlink" title="可能需要這樣做（未驗證）"></a>可能需要這樣做（未驗證）</h5><p>為 <code>www-data</code> 建立自己的 crontab 排程，可參考 [关于 Laravel 日志权限] <a href="https://learnku.com/articles/6775/about-laravel-log-permissions" title="关于 Laravel 日志权限">1</a> 下方留言</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su www-data</span><br><span class="line">$ crontab -u www-data -e</span><br></pre></td></tr></table></figure>

<h4 id="放棄測試"><a href="#放棄測試" class="headerlink" title="放棄測試"></a>放棄測試</h4><p>因環境是在 Docker 內，上述的步驟已經無法輕易以撰寫 shell script 達成要的結果，若需要人工介入修改，則不符合使用 Docker 無痛開發原則 XD。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/27674597/laravel-daily-log-created-with-wrong-permissions">Laravel daily log created with wrong permissions</a></li>
<li><a href="https://laravel.com/docs/5.5/errors#configuration">Laravel 5.5 - Errors &amp; Logging - Configuration</a></li>
</ul>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Homebrew 安裝 anaconda</title>
    <url>/2019/2019042601-install-anaconda-with-homebrew.html</url>
    <content><![CDATA[<p>只要簡單幾行命令，就可以快速安裝好 [anaconda] <a href="https://www.anaconda.com/" title="anaconda">1</a>，並且使用 [jupyter notebook] <a href="https://jupyter.org/">2</a>。</p>
<span id="more"></span>

<h2 id="使用-Homebrew-安裝-anaconda"><a href="#使用-Homebrew-安裝-anaconda" class="headerlink" title="使用 Homebrew 安裝 anaconda"></a>使用 Homebrew 安裝 anaconda</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew cask install anaconda</span><br><span class="line"></span><br><span class="line">==&gt; Satisfying dependencies</span><br><span class="line">==&gt; Downloading https://repo.anaconda.com/archive/Anaconda3-2019.03-MacOSX-x86_64.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">###### ################################################################## 100.0%</span></span><br><span class="line"></span><br><span class="line">==&gt; Verifying SHA-256 checksum <span class="keyword">for</span> Cask <span class="string">&#x27;anaconda&#x27;</span>.</span><br><span class="line">==&gt; Installing Cask anaconda</span><br><span class="line">==&gt; Running installer script <span class="string">&#x27;Anaconda3-2019.03-MacOSX-x86_64.sh&#x27;</span></span><br><span class="line">Password:</span><br><span class="line">PREFIX=/usr/local/anaconda3</span><br><span class="line">installing: python-3.7.3-h359304d_0 ...</span><br><span class="line">Python 3.7.3</span><br><span class="line">installing: conda-env-2.6.0-1 ...</span><br><span class="line">installing: blas-1.0-mkl ...</span><br><span class="line">installing: bzip2-1.0.6-h1de35cc_5 ...</span><br><span class="line">installing: ca-certificates-2019.1.23-0 ...</span><br><span class="line">installing: intel-openmp-2019.3-199 ...</span><br><span class="line">installing: jbig-2.1-h4d881f8_0 ...</span><br><span class="line">installing: jpeg-9b-he5867d9_2 ...</span><br><span class="line">installing: libcxxabi-4.0.1-hcfea43d_1 ...</span><br><span class="line">installing: libgfortran-3.0.1-h93005f0_2 ...</span><br><span class="line">installing: libiconv-1.15-hdd342a3_7 ...</span><br><span class="line">installing: libsodium-1.0.16-h3efe00b_0 ...</span><br><span class="line">installing: lz4-c-1.8.1.2-h1de35cc_0 ...</span><br><span class="line">installing: lzo-2.10-h362108e_2 ...</span><br><span class="line">installing: pandoc-2.2.3.2-0 ...</span><br><span class="line">installing: xz-5.2.4-h1de35cc_4 ...</span><br><span class="line">installing: yaml-0.1.7-hc338f04_2 ...</span><br><span class="line">installing: zlib-1.2.11-h1de35cc_3 ...</span><br><span class="line">installing: libcxx-4.0.1-hcfea43d_1 ...</span><br><span class="line">installing: libpng-1.6.36-ha441bb4_0 ...</span><br><span class="line">installing: mkl-2019.3-199 ...</span><br><span class="line">installing: openssl-1.1.1b-h1de35cc_1 ...</span><br><span class="line">installing: tk-8.6.8-ha441bb4_0 ...</span><br><span class="line">installing: zstd-1.3.7-h5bba6e5_0 ...</span><br><span class="line">installing: expat-2.2.6-h0a44026_0 ...</span><br><span class="line">installing: freetype-2.9.1-hb4e5f40_0 ...</span><br><span class="line">installing: gmp-6.1.2-hb37e062_1 ...</span><br><span class="line">installing: hdf5-1.10.4-hfa1e0ec_0 ...</span><br><span class="line">installing: icu-58.2-h4b95b61_1 ...</span><br><span class="line">installing: libffi-3.2.1-h475c297_4 ...</span><br><span class="line">installing: liblief-0.9.0-h2a1bed3_2 ...</span><br><span class="line">installing: libssh2-1.8.0-ha12b0ac_4 ...</span><br><span class="line">installing: libtiff-4.0.10-hcb84e12_2 ...</span><br><span class="line">installing: ncurses-6.1-h0a44026_1 ...</span><br><span class="line">installing: pcre-8.43-h0a44026_0 ...</span><br><span class="line">installing: snappy-1.1.7-he62c110_3 ...</span><br><span class="line">installing: zeromq-4.3.1-h0a44026_3 ...</span><br><span class="line">installing: blosc-1.15.0-hd9629dc_0 ...</span><br><span class="line">installing: gettext-0.19.8.1-h15daf44_3 ...</span><br><span class="line">installing: libedit-3.1.20181209-hb402a30_0 ...</span><br><span class="line">installing: libxml2-2.9.9-hab757c2_0 ...</span><br><span class="line">installing: mpfr-4.0.1-h3018a27_3 ...</span><br><span class="line">installing: readline-7.0-h1de35cc_5 ...</span><br><span class="line">installing: glib-2.56.2-hd9629dc_0 ...</span><br><span class="line">installing: krb5-1.16.1-hddcf347_7 ...</span><br><span class="line">installing: libarchive-3.3.3-h786848e_5 ...</span><br><span class="line">installing: libxslt-1.1.33-h33a18ac_0 ...</span><br><span class="line">installing: mpc-1.1.0-h6ef4df4_1 ...</span><br><span class="line">installing: sqlite-3.27.2-ha441bb4_0 ...</span><br><span class="line">installing: unixodbc-2.3.7-h1de35cc_0 ...</span><br><span class="line">installing: dbus-1.13.6-h90a0687_0 ...</span><br><span class="line">installing: libcurl-7.64.0-h051b688_2 ...</span><br><span class="line">installing: qt-5.9.7-h468cd18_1 ...</span><br><span class="line">installing: alabaster-0.7.12-py37_0 ...</span><br><span class="line">installing: appnope-0.1.0-py37_0 ...</span><br><span class="line">installing: appscript-1.1.0-py37h1de35cc_0 ...</span><br><span class="line">installing: asn1crypto-0.24.0-py37_0 ...</span><br><span class="line">installing: atomicwrites-1.3.0-py37_1 ...</span><br><span class="line">installing: attrs-19.1.0-py37_1 ...</span><br><span class="line">installing: backcall-0.1.0-py37_0 ...</span><br><span class="line">installing: backports-1.0-py37_1 ...</span><br><span class="line">installing: bitarray-0.8.3-py37h1de35cc_0 ...</span><br><span class="line">installing: boto-2.49.0-py37_0 ...</span><br><span class="line">installing: certifi-2019.3.9-py37_0 ...</span><br><span class="line">installing: chardet-3.0.4-py37_1 ...</span><br><span class="line">installing: click-7.0-py37_0 ...</span><br><span class="line">installing: cloudpickle-0.8.0-py37_0 ...</span><br><span class="line">installing: colorama-0.4.1-py37_0 ...</span><br><span class="line">installing: contextlib2-0.5.5-py37_0 ...</span><br><span class="line">installing: curl-7.64.0-ha441bb4_2 ...</span><br><span class="line">installing: dask-core-1.1.4-py37_1 ...</span><br><span class="line">installing: decorator-4.4.0-py37_1 ...</span><br><span class="line">installing: defusedxml-0.5.0-py37_1 ...</span><br><span class="line">installing: docutils-0.14-py37_0 ...</span><br><span class="line">installing: entrypoints-0.3-py37_0 ...</span><br><span class="line">installing: et_xmlfile-1.0.1-py37_0 ...</span><br><span class="line">installing: fastcache-1.0.2-py37h1de35cc_2 ...</span><br><span class="line">installing: filelock-3.0.10-py37_0 ...</span><br><span class="line">installing: future-0.17.1-py37_0 ...</span><br><span class="line">installing: glob2-0.6-py37_1 ...</span><br><span class="line">installing: gmpy2-2.0.8-py37h6ef4df4_2 ...</span><br><span class="line">installing: greenlet-0.4.15-py37h1de35cc_0 ...</span><br><span class="line">installing: heapdict-1.0.0-py37_2 ...</span><br><span class="line">installing: idna-2.8-py37_0 ...</span><br><span class="line">installing: imagesize-1.1.0-py37_0 ...</span><br><span class="line">installing: ipython_genutils-0.2.0-py37_0 ...</span><br><span class="line">installing: itsdangerous-1.1.0-py37_0 ...</span><br><span class="line">installing: jdcal-1.4-py37_0 ...</span><br><span class="line">installing: kiwisolver-1.0.1-py37h0a44026_0 ...</span><br><span class="line">installing: lazy-object-proxy-1.3.1-py37h1de35cc_2 ...</span><br><span class="line">installing: llvmlite-0.28.0-py37h8c7ce04_0 ...</span><br><span class="line">installing: locket-0.2.0-py37_1 ...</span><br><span class="line">installing: lxml-4.3.2-py37hef8c89e_0 ...</span><br><span class="line">installing: markupsafe-1.1.1-py37h1de35cc_0 ...</span><br><span class="line">installing: mccabe-0.6.1-py37_1 ...</span><br><span class="line">installing: mistune-0.8.4-py37h1de35cc_0 ...</span><br><span class="line">installing: mkl-service-1.1.2-py37hfbe908c_5 ...</span><br><span class="line">installing: more-itertools-6.0.0-py37_0 ...</span><br><span class="line">installing: mpmath-1.1.0-py37_0 ...</span><br><span class="line">installing: msgpack-python-0.6.1-py37h04f5b5a_1 ...</span><br><span class="line">installing: numpy-base-1.16.2-py37h6575580_0 ...</span><br><span class="line">installing: olefile-0.46-py37_0 ...</span><br><span class="line">installing: pandocfilters-1.4.2-py37_1 ...</span><br><span class="line">installing: parso-0.3.4-py37_0 ...</span><br><span class="line">installing: pep8-1.7.1-py37_0 ...</span><br><span class="line">installing: pickleshare-0.7.5-py37_0 ...</span><br><span class="line">installing: pkginfo-1.5.0.1-py37_0 ...</span><br><span class="line">installing: pluggy-0.9.0-py37_0 ...</span><br><span class="line">installing: ply-3.11-py37_0 ...</span><br><span class="line">installing: prometheus_client-0.6.0-py37_0 ...</span><br><span class="line">installing: psutil-5.6.1-py37h1de35cc_0 ...</span><br><span class="line">installing: ptyprocess-0.6.0-py37_0 ...</span><br><span class="line">installing: py-1.8.0-py37_0 ...</span><br><span class="line">installing: py-lief-0.9.0-py37h1413db1_2 ...</span><br><span class="line">installing: pycodestyle-2.5.0-py37_0 ...</span><br><span class="line">installing: pycosat-0.6.3-py37h1de35cc_0 ...</span><br><span class="line">installing: pycparser-2.19-py37_0 ...</span><br><span class="line">installing: pycrypto-2.6.1-py37h1de35cc_9 ...</span><br><span class="line">installing: pycurl-7.43.0.2-py37ha12b0ac_0 ...</span><br><span class="line">installing: pyflakes-2.1.1-py37_0 ...</span><br><span class="line">installing: pyodbc-4.0.26-py37h0a44026_0 ...</span><br><span class="line">installing: pyparsing-2.3.1-py37_0 ...</span><br><span class="line">installing: pysocks-1.6.8-py37_0 ...</span><br><span class="line">installing: python-libarchive-c-2.8-py37_6 ...</span><br><span class="line">installing: python.app-2-py37_9 ...</span><br><span class="line">installing: pytz-2018.9-py37_0 ...</span><br><span class="line">installing: pyyaml-5.1-py37h1de35cc_0 ...</span><br><span class="line">installing: pyzmq-18.0.0-py37h0a44026_0 ...</span><br><span class="line">installing: qtpy-1.7.0-py37_1 ...</span><br><span class="line">installing: rope-0.12.0-py37_0 ...</span><br><span class="line">installing: ruamel_yaml-0.15.46-py37h1de35cc_0 ...</span><br><span class="line">installing: send2trash-1.5.0-py37_0 ...</span><br><span class="line">installing: simplegeneric-0.8.1-py37_2 ...</span><br><span class="line">installing: sip-4.19.8-py37h0a44026_0 ...</span><br><span class="line">installing: six-1.12.0-py37_0 ...</span><br><span class="line">installing: snowballstemmer-1.2.1-py37_0 ...</span><br><span class="line">installing: sortedcontainers-2.1.0-py37_0 ...</span><br><span class="line">installing: soupsieve-1.8-py37_0 ...</span><br><span class="line">installing: sphinxcontrib-1.0-py37_1 ...</span><br><span class="line">installing: sqlalchemy-1.3.1-py37h1de35cc_0 ...</span><br><span class="line">installing: tblib-1.3.2-py37_0 ...</span><br><span class="line">installing: testpath-0.4.2-py37_0 ...</span><br><span class="line">installing: toolz-0.9.0-py37_0 ...</span><br><span class="line">installing: tornado-6.0.2-py37h1de35cc_0 ...</span><br><span class="line">installing: tqdm-4.31.1-py37_1 ...</span><br><span class="line">installing: unicodecsv-0.14.1-py37_0 ...</span><br><span class="line">installing: wcwidth-0.1.7-py37_0 ...</span><br><span class="line">installing: webencodings-0.5.1-py37_1 ...</span><br><span class="line">installing: werkzeug-0.14.1-py37_0 ...</span><br><span class="line">installing: wrapt-1.11.1-py37h1de35cc_0 ...</span><br><span class="line">installing: wurlitzer-1.0.2-py37_0 ...</span><br><span class="line">installing: xlrd-1.2.0-py37_0 ...</span><br><span class="line">installing: xlsxwriter-1.1.5-py37_0 ...</span><br><span class="line">installing: xlwt-1.3.0-py37_0 ...</span><br><span class="line">installing: zipp-0.3.3-py37_1 ...</span><br><span class="line">installing: babel-2.6.0-py37_0 ...</span><br><span class="line">installing: backports.os-0.1.1-py37_0 ...</span><br><span class="line">installing: backports.shutil_get_terminal_size-1.0.0-py37_2 ...</span><br><span class="line">installing: beautifulsoup4-4.7.1-py37_1 ...</span><br><span class="line">installing: cffi-1.12.2-py37hb5b8e2f_1 ...</span><br><span class="line">installing: cycler-0.10.0-py37_0 ...</span><br><span class="line">installing: cytoolz-0.9.0.1-py37h1de35cc_1 ...</span><br><span class="line">installing: html5lib-1.0.1-py37_0 ...</span><br><span class="line">installing: importlib_metadata-0.8-py37_0 ...</span><br><span class="line">installing: jedi-0.13.3-py37_0 ...</span><br><span class="line">installing: keyring-18.0.0-py37_0 ...</span><br><span class="line">installing: mkl_random-1.0.2-py37h27c97d8_0 ...</span><br><span class="line">installing: multipledispatch-0.6.0-py37_0 ...</span><br><span class="line">installing: nltk-3.4-py37_1 ...</span><br><span class="line">installing: openpyxl-2.6.1-py37_1 ...</span><br><span class="line">installing: packaging-19.0-py37_0 ...</span><br><span class="line">installing: partd-0.3.10-py37_1 ...</span><br><span class="line">installing: pathlib2-2.3.3-py37_0 ...</span><br><span class="line">installing: pexpect-4.6.0-py37_0 ...</span><br><span class="line">installing: pillow-5.4.1-py37hb68e598_0 ...</span><br><span class="line">installing: pyqt-5.9.2-py37h655552a_2 ...</span><br><span class="line">installing: pyrsistent-0.14.11-py37h1de35cc_0 ...</span><br><span class="line">installing: python-dateutil-2.8.0-py37_0 ...</span><br><span class="line">installing: qtawesome-0.5.7-py37_1 ...</span><br><span class="line">installing: setuptools-40.8.0-py37_0 ...</span><br><span class="line">installing: singledispatch-3.4.0.3-py37_0 ...</span><br><span class="line">installing: sortedcollections-1.1.2-py37_0 ...</span><br><span class="line">installing: sphinxcontrib-websupport-1.1.0-py37_1 ...</span><br><span class="line">installing: sympy-1.3-py37_0 ...</span><br><span class="line">installing: terminado-0.8.1-py37_1 ...</span><br><span class="line">installing: traitlets-4.3.2-py37_0 ...</span><br><span class="line">installing: xlwings-0.15.4-py37_0 ...</span><br><span class="line">installing: zict-0.1.4-py37_0 ...</span><br><span class="line">installing: astroid-2.2.5-py37_0 ...</span><br><span class="line">installing: bleach-3.1.0-py37_0 ...</span><br><span class="line">installing: clyent-1.2.2-py37_1 ...</span><br><span class="line">installing: cryptography-2.6.1-py37ha12b0ac_0 ...</span><br><span class="line">installing: cython-0.29.6-py37h0a44026_0 ...</span><br><span class="line">installing: distributed-1.26.0-py37_1 ...</span><br><span class="line">installing: get_terminal_size-1.0.0-h7520d66_0 ...</span><br><span class="line">installing: gevent-1.4.0-py37h1de35cc_0 ...</span><br><span class="line">installing: isort-4.3.16-py37_0 ...</span><br><span class="line">installing: jinja2-2.10-py37_0 ...</span><br><span class="line">installing: jsonschema-3.0.1-py37_0 ...</span><br><span class="line">installing: jupyter_core-4.4.0-py37_0 ...</span><br><span class="line">installing: navigator-updater-0.2.1-py37_0 ...</span><br><span class="line">installing: networkx-2.2-py37_1 ...</span><br><span class="line">installing: nose-1.3.7-py37_2 ...</span><br><span class="line">installing: path.py-11.5.0-py37_0 ...</span><br><span class="line">installing: pygments-2.3.1-py37_0 ...</span><br><span class="line">installing: pytest-4.3.1-py37_0 ...</span><br><span class="line">installing: wheel-0.33.1-py37_0 ...</span><br><span class="line">installing: conda-verify-3.1.1-py37_0 ...</span><br><span class="line">installing: flask-1.0.2-py37_1 ...</span><br><span class="line">installing: jupyter_client-5.2.4-py37_0 ...</span><br><span class="line">installing: nbformat-4.4.0-py37_0 ...</span><br><span class="line">installing: pip-19.0.3-py37_0 ...</span><br><span class="line">installing: prompt_toolkit-2.0.9-py37_0 ...</span><br><span class="line">installing: pylint-2.3.1-py37_0 ...</span><br><span class="line">installing: pyopenssl-19.0.0-py37_0 ...</span><br><span class="line">installing: pytest-openfiles-0.3.2-py37_0 ...</span><br><span class="line">installing: pytest-remotedata-0.3.1-py37_0 ...</span><br><span class="line">installing: ipython-7.4.0-py37h39e3cac_0 ...</span><br><span class="line">installing: nbconvert-5.4.1-py37_3 ...</span><br><span class="line">installing: urllib3-1.24.1-py37_0 ...</span><br><span class="line">installing: ipykernel-5.1.0-py37h39e3cac_0 ...</span><br><span class="line">installing: requests-2.21.0-py37_0 ...</span><br><span class="line">installing: anaconda-client-1.7.2-py37_0 ...</span><br><span class="line">installing: conda-4.6.11-py37_0 ...</span><br><span class="line">installing: jupyter_console-6.0.0-py37_0 ...</span><br><span class="line">installing: notebook-5.7.8-py37_0 ...</span><br><span class="line">installing: qtconsole-4.4.3-py37_0 ...</span><br><span class="line">installing: sphinx-1.8.5-py37_0 ...</span><br><span class="line">installing: spyder-kernels-0.4.2-py37_0 ...</span><br><span class="line">installing: anaconda-navigator-1.9.7-py37_0 ...</span><br><span class="line">installing: anaconda-project-0.8.2-py37_0 ...</span><br><span class="line">installing: conda-build-3.17.8-py37_0 ...</span><br><span class="line">installing: jupyterlab_server-0.2.0-py37_0 ...</span><br><span class="line">installing: numpydoc-0.8.0-py37_0 ...</span><br><span class="line">installing: widgetsnbextension-3.4.2-py37_0 ...</span><br><span class="line">installing: ipywidgets-7.4.2-py37_0 ...</span><br><span class="line">installing: jupyterlab-0.35.4-py37hf63ae98_0 ...</span><br><span class="line">installing: spyder-3.3.3-py37_0 ...</span><br><span class="line">installing: _ipyw_jlab_nb_ext_conf-0.1.0-py37_0 ...</span><br><span class="line">installing: jupyter-1.0.0-py37_7 ...</span><br><span class="line">installing: bokeh-1.0.4-py37_0 ...</span><br><span class="line">installing: bottleneck-1.2.1-py37h1d22016_1 ...</span><br><span class="line">installing: h5py-2.9.0-py37h3134771_0 ...</span><br><span class="line">installing: imageio-2.5.0-py37_0 ...</span><br><span class="line">installing: matplotlib-3.0.3-py37h54f8f79_0 ...</span><br><span class="line">installing: mkl_fft-1.0.10-py37h5e564d8_0 ...</span><br><span class="line">installing: numpy-1.16.2-py37hacdab7b_0 ...</span><br><span class="line">installing: numba-0.43.1-py37h6440ff4_0 ...</span><br><span class="line">installing: numexpr-2.6.9-py37h7413580_0 ...</span><br><span class="line">installing: pandas-0.24.2-py37h0a44026_0 ...</span><br><span class="line">installing: pytest-arraydiff-0.3-py37h39e3cac_0 ...</span><br><span class="line">installing: pytest-doctestplus-0.3.0-py37_0 ...</span><br><span class="line">installing: pywavelets-1.0.2-py37h1d22016_0 ...</span><br><span class="line">installing: scipy-1.2.1-py37h1410ff5_0 ...</span><br><span class="line">installing: bkcharts-0.2-py37_0 ...</span><br><span class="line">installing: dask-1.1.4-py37_1 ...</span><br><span class="line">installing: patsy-0.5.1-py37_0 ...</span><br><span class="line">installing: pytables-3.5.1-py37h5bccee9_0 ...</span><br><span class="line">installing: pytest-astropy-0.5.0-py37_0 ...</span><br><span class="line">installing: scikit-image-0.14.2-py37h0a44026_0 ...</span><br><span class="line">installing: scikit-learn-0.20.3-py37h27c97d8_0 ...</span><br><span class="line">installing: astropy-3.1.2-py37h1de35cc_0 ...</span><br><span class="line">installing: statsmodels-0.9.0-py37h1d22016_0 ...</span><br><span class="line">installing: seaborn-0.9.0-py37_0 ...</span><br><span class="line">installing: anaconda-2019.03-py37_0 ...</span><br><span class="line">installation finished.</span><br><span class="line">==&gt; Changing ownership of paths required by anaconda; your password may be necessary</span><br><span class="line">🍺  anaconda was successfully installed!</span><br></pre></td></tr></table></figure>

<h2 id="設定環境路徑"><a href="#設定環境路徑" class="headerlink" title="設定環境路徑"></a>設定環境路徑</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>加入 anaconda 的安裝路徑，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p> 重啓 terminal 或是執行 <code>source ~/.zshrc</code> 重載入環境變數。</p>
<h2 id="開始使用-jupyter-notebook"><a href="#開始使用-jupyter-notebook" class="headerlink" title="開始使用 jupyter notebook"></a>開始使用 jupyter notebook</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jupyter notebook</span><br><span class="line"></span><br><span class="line">[I 17:11:37.762 NotebookApp] Writing notebook server cookie secret to /Users/jerryhuang/Library/Jupyter/runtime/notebook_cookie_secret</span><br><span class="line">[I 17:11:38.780 NotebookApp] JupyterLab extension loaded from /usr/local/anaconda3/lib/python3.7/site-packages/jupyterlab</span><br><span class="line">[I 17:11:38.780 NotebookApp] JupyterLab application directory is /usr/local/anaconda3/share/jupyter/lab</span><br><span class="line">[I 17:11:38.781 NotebookApp] Serving notebooks from <span class="built_in">local</span> directory: /Users/jerryhuang/workspace/redfalcon/brazil/carnival.2019</span><br><span class="line">[I 17:11:38.781 NotebookApp] The Jupyter Notebook is running at:</span><br><span class="line">[I 17:11:38.781 NotebookApp] http://localhost:8888/?token=7644583630c119f4ce453430fa6993b6cc8c9fe6258d2026</span><br><span class="line">[I 17:11:38.782 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[C 17:11:38.793 NotebookApp]</span><br><span class="line"></span><br><span class="line">    To access the notebook, open this file <span class="keyword">in</span> a browser:</span><br><span class="line">        file:///Users/jerryhuang/Library/Jupyter/runtime/nbserver-50420-open.html</span><br><span class="line">    Or copy and <span class="built_in">paste</span> one of these URLs:</span><br><span class="line">        http://localhost:8888/?token=7644583630c119f4ce453430fa6993b6cc8c9fe6258d2026</span><br><span class="line">^C[I 17:12:02.475 NotebookApp] interrupted</span><br><span class="line">Serving notebooks from <span class="built_in">local</span> directory: /Users/jerryhuang/workspace/redfalcon/brazil/carnival.2019</span><br><span class="line">0 active kernels</span><br><span class="line">The Jupyter Notebook is running at:</span><br><span class="line">http://localhost:8888/?token=7644583630c119f4ce453430fa6993b6cc8c9fe6258d2026</span><br></pre></td></tr></table></figure>

<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li>[Install anaconda on macOS with homebrew] <a href="https://medium.com/ayuth/install-anaconda-on-macos-with-homebrew-c94437d63a37">3</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Git pre-commit 自動修正 PHP 的 Coding Style</title>
    <url>/2019/2019051901-php-coding-style-fix-with-git.html</url>
    <content><![CDATA[<p>在 VS Code 下，除了[使用 extension - <code>junstyle.php-cs-fixer</code> 進行 PHP 的 Coding Style 修正] <a href="2017/2017102302-vscode-extension-php-cs-fixer.html">1</a> 之外，也可以使用 [Git hooks] <a href="https://githooks.com/">2</a> 的功能，在 commit 之前執行指定的 script，稱為 [pre-commit] <a href="https://github.com/git/git/blob/master/templates/hooks--pre-commit.sample">3</a>，搭配 [php-cs-fixer] <a href="https://github.com/friendsofphp/php-cs-fixer">4</a> 就能自動化的對有差異的 PHP 檔案進行 Coding Style 的修正。</p>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ol>
<li>macOS 10.13.6 High Sierra</li>
<li>PHP 7.3.5</li>
</ol>
<h2 id="開始設定-pre-commit"><a href="#開始設定-pre-commit" class="headerlink" title="開始設定 pre-commit"></a>開始設定 pre-commit</h2><h3 id="Step-1-檢查是否有-hooks-目錄"><a href="#Step-1-檢查是否有-hooks-目錄" class="headerlink" title="Step 1. 檢查是否有 hooks 目錄"></a>Step 1. 檢查是否有 hooks 目錄</h3><p>檢查 workspace 下的 <code>.git</code> 目錄是否有 <code>hooks</code> 子目錄，如下，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll ./.git</span><br><span class="line">total 64</span><br><span class="line">-rw-r--r--    1 jerryhuang  staff     8B May 17 18:02 COMMIT_EDITMSG</span><br><span class="line">-rw-r--r--    1 jerryhuang  staff     0B May 19 12:54 FETCH_HEAD</span><br><span class="line">-rw-r--r--    1 jerryhuang  staff    24B May 17 17:23 HEAD</span><br><span class="line">-rw-r--r--    1 jerryhuang  staff   371B May 17 17:30 config</span><br><span class="line">-rw-r--r--    1 jerryhuang  staff    73B May 17 17:30 description</span><br><span class="line">drwxr-xr-x   14 jerryhuang  staff   448B May 17 17:59 hooks</span><br><span class="line">-rw-r--r--    1 jerryhuang  staff    11K May 17 18:02 index</span><br><span class="line">drwxr-xr-x    3 jerryhuang  staff    96B May 17 17:30 info</span><br><span class="line">drwxr-xr-x    4 jerryhuang  staff   128B May  7 12:15 logs</span><br><span class="line">drwxr-xr-x  143 jerryhuang  staff   4.5K May 17 18:02 objects</span><br><span class="line">drwxr-xr-x    5 jerryhuang  staff   160B May  7 12:16 refs</span><br><span class="line">-rw-r--r--@   1 jerryhuang  staff   174B May 17 18:07 sourcetreeconfig</span><br></pre></td></tr></table></figure>
<p>如果有 <code>hooks</code>，則跳過 Step 2。</p>
<h3 id="Step-2-建立-hooks-目錄"><a href="#Step-2-建立-hooks-目錄" class="headerlink" title="Step 2. 建立 hooks 目錄"></a>Step 2. 建立 hooks 目錄</h3><p>同樣地在 workspace 目錄下，執行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<p>此時會重新建立 git 及其子目錄 hooks 與該目錄內的 sample 檔案。</p>
<h3 id="Step-3-新增-pre-commit-檔案內容"><a href="#Step-3-新增-pre-commit-檔案內容" class="headerlink" title="Step 3. 新增 pre-commit 檔案內容"></a>Step 3. 新增 pre-commit 檔案內容</h3><p>在 workspace 下執行 <code>vim ./.git/hooks/pre-commit</code>，新增如下的檔案內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">pass=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">files=$(git diff --cached --name-only --diff-filter=ACMR | grep -E <span class="string">&#x27;\.(php|phtml)$&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$files</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run php syntax check before commit</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> -r file; <span class="keyword">do</span></span><br><span class="line">        php -l <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">            pass=<span class="literal">false</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$files</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run php-cs-fixer validation before commit</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$files</span>&quot;</span> | xargs ./vendor/bin/php-cs-fixer fix --diff --config .php_cs</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        pass=<span class="literal">false</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Automatically add files that may have been fixed by php-cs-fixer</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$files</span>&quot;</span> | xargs git add</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$pass</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;PRE-COMMIT HOOK FAILED:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Code style validation failed. Please fix errors and try committing again.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>請留意 <code>echo &quot;$files&quot; | xargs ./vendor/bin/php-cs-fixer fix --diff --config .php_cs</code> 這段，</p>
<ol>
<li><code>./vendor/bin/php-cs-fixer</code>： 是使用 <code>composer require --dev friendsofphp/php-cs-fixer</code> 安裝在 project 內 vendor 目錄中的 php-cs-fixer 進行 Coding Style 修正。Global 安裝方式請參考 [FriendsOfPHP&#x2F;PHP-CS-Fixer] <a href="https://github.com/friendsofphp/php-cs-fixer">6</a>。</li>
<li><code>.php_cs</code>： 使用 [在 vs code 使用 php cs fixer 進行 coding style 的格式修正] <a href="2017/2017102302-vscode-extension-php-cs-fixer.html">1</a> 一文內建立的檔案，或參考 [FriendsOfPHP&#x2F;PHP-CS-Fixer] <a href="https://github.com/friendsofphp/php-cs-fixer">6</a> 內的 <code>.php_cs.dist</code> 再依據需求修改。</li>
</ol>
<h3 id="Step-4-修改-pre-commit-的權限"><a href="#Step-4-修改-pre-commit-的權限" class="headerlink" title="Step 4. 修改 pre-commit 的權限"></a>Step 4. 修改 pre-commit 的權限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x .git/hooks/pre-commit</span><br></pre></td></tr></table></figure>
<p>必須修改 <code>pre-commit</code> 的權限，這樣才能在 commit 前正確執行寫 php-cs-fixer。</p>
<p>完成以上設定後，每次在 commit 前，只要有產生差異的 PHP 檔案，就會自動進行 Coding Style 修正。</p>
<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li>[Automating Code Style Fixes with Git and PHP Coding Standards Fixer] <a href="https://victor.4devs.io/en/clean-code/automating-code-style-fixes-with-git-and-php-cs-fixer.html">5</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>coding style</tag>
        <tag>php-cs-fixer</tag>
      </tags>
  </entry>
  <entry>
    <title>我的日常 git 操作</title>
    <url>/2019/2019062601-my-version-control-specification.html</url>
    <content><![CDATA[<p>將日常的 git 操作記錄下來作為團隊的開發規範。</p>
<span id="more"></span>

<h2 id="開發"><a href="#開發" class="headerlink" title="開發"></a>開發</h2><h3 id="遵循-Git-flow"><a href="#遵循-Git-flow" class="headerlink" title="遵循 Git flow"></a>遵循 Git flow</h3><ol>
<li>務必在個人開發環境安裝 git flow</li>
<li>可依據個人習慣使用 command 或是 <a href="https://www.sourcetreeapp.com/">sourcetree</a> 進行 git 各項操作</li>
<li>Git flow 的說明可參考 <a href="https://gitbook.tw/chapters/gitflow/why-need-git-flow.html">Git Flow 是什麼？為什麼需要這種東西？</a></li>
<li>各項操作參照 <a href="https://danielkummer.github.io/git-flow-cheatsheet/">git-flow cheatsheet</a> 文章內的方式進行</li>
</ol>
<h3 id="工作規範"><a href="#工作規範" class="headerlink" title="工作規範"></a>工作規範</h3><h4 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h4><ol>
<li>工作的 branch 一定從 develop 切（checkout）出 feature branch</li>
<li>每一 feature branch 只開發最小單位功能，以避免與 develop 產生過大的差異，導致 merge 的難度提高</li>
</ol>
<h4 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h4><ol>
<li>第一行為必填的標題（Subject），需重點說明，建議少於 50 字元</li>
<li>空一行後可撰寫詳細描述（Body），為選填，僅摘要描述</li>
<li>Commit 寫法可參考 <a href="https://juffalow.com/other/write-good-git-commit-message">Write good git commit message</a></li>
<li>僅可能使用英文（Google translator 是好幫手 :thumbsup: ）</li>
</ol>
<h4 id="Pull-及-Push"><a href="#Pull-及-Push" class="headerlink" title="Pull 及 Push"></a>Pull 及 Push</h4><ol>
<li>每次進行 pull&#x2F; push 前，先執行 fetch，以取得最新的 branches 的狀態，並依據當下情境進行更新</li>
<li>從 develop 進行 checkout 前，需 pull 取得最新狀態</li>
<li>每日下午 5 點將 feature branch push 到 remote 進行保存（買保險的概念 :smile: ）</li>
</ol>
<h4 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h4><ol>
<li>feature branch 項目完成後，不可直接 merge 回 develop</li>
<li>請至 repository server 發出 pull request，請求其他人進行 code review</li>
</ol>
<h4 id="Merge-to-develop"><a href="#Merge-to-develop" class="headerlink" title="Merge to develop"></a>Merge to develop</h4><ol>
<li>Code review 完成後，由最後一位將 issue close，並將該 feature branch merge 到 develop</li>
</ol>
<hr>
<h2 id="Repository-備份"><a href="#Repository-備份" class="headerlink" title="Repository 備份"></a>Repository 備份</h2><p>可行方式如下：</p>
<ol>
<li>每日排程備份 repository server 的資料</li>
<li>repository server 的資料存放在如 <a href="https://www.gluster.org/">Gluster</a> 的 file system</li>
</ol>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>被 curl 命令輸出的 &quot;* Expire in 0 ms for 1 (transfer 0x7f85f6002000)&quot; 洗版了</title>
    <url>/2021/2021120801-curl-command-outputs-expire-in-x-ms-for-1.html</url>
    <content><![CDATA[<p>使用 curl 命令，被一堆 <code>* Expire in 0 ms for 1 (transfer 0x7f85f6002000)</code> 洗版很傻眼。。。</p>
<span id="more"></span>

<h2 id="環境-Environment"><a href="#環境-Environment" class="headerlink" title="環境  Environment"></a>環境  Environment</h2><ul>
<li>macOS: v10.14.6</li>
<li>iTerm2: Build 3.4.14</li>
<li>curl: v7.64.0</li>
</ul>
<h2 id="狀況"><a href="#狀況" class="headerlink" title="狀況"></a>狀況</h2><p>終於受不了每次使用 curl 命令，畫面會出現非常多的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* Expire <span class="keyword">in</span> 2 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 2 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 2 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 2 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 1 (transfer 0x7f85f6002000)</span><br></pre></td></tr></table></figure>

<p>爬文看到有人跟我有一樣的困擾，看起來是某一版的 curl 才會出現這樣的 log output。解法就是升級 curl。</p>
<p>查看 curl 版本，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -V</span><br><span class="line">curl 7.64.0 (x86_64-apple-darwin13.4.0) libcurl/7.64.0 OpenSSL/1.1.1b zlib/1.2.11 libssh2/1.8.0</span><br><span class="line">Release-Date: 2019-02-06</span><br><span class="line">Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp scp sftp smb smbs smtp smtps telnet tftp</span><br><span class="line">Features: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy</span><br></pre></td></tr></table></figure>

<h2 id="處理方式"><a href="#處理方式" class="headerlink" title="處理方式"></a>處理方式</h2><p>使用 homebrew 更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew upgrade curl</span><br><span class="line"></span><br><span class="line">==&gt; Upgrading curl</span><br><span class="line">  7.79.1_1 -&gt; 7.80.0_1</span><br></pre></td></tr></table></figure>

<p>務必要執行以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/usr/local/opt/curl/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://stackoverflow.com/questions/63191648/curl-error-expire-in-1-ms-for-1-transfer-0x">CURL error “Expire in 1 ms for 1 (transfer 0x…)”</a></li>
</ul>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 的另一個選擇 Taskfile</title>
    <url>/2022/20220521-taskfile-a-makefile-alternative.html</url>
    <content><![CDATA[<p>在 macOS 環境，除了使用 Makefile 之外，還有另一個選擇 Taskfile。</p>
<span id="more"></span>

<h2 id="環境-Environment"><a href="#環境-Environment" class="headerlink" title="環境  Environment"></a>環境  Environment</h2><ul>
<li>macOS 12.3.1</li>
<li>Homebrew 3.4.5</li>
</ul>
<h2 id="安裝-Taskfile"><a href="#安裝-Taskfile" class="headerlink" title="安裝 Taskfile"></a>安裝 Taskfile</h2><p>Use <code>brew</code> command to install <code>task</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install go-task/tap/go-task</span><br></pre></td></tr></table></figure>

<h2 id="新增-Taskfile"><a href="#新增-Taskfile" class="headerlink" title="新增 Taskfile"></a>新增 Taskfile</h2><p>Create <code>Taskfile.yml</code> and insert the following,</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Build</span> <span class="string">the</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GOFLAGS=-mod=mod</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">./bin/app</span> <span class="string">./internal/main.go</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">run:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GOFLAGS=-mod=mod</span> <span class="string">go</span> <span class="string">run</span> <span class="string">./internal/main.go</span></span><br></pre></td></tr></table></figure>

<p>Display the list of available tasks:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ task --list</span><br><span class="line">task: Available tasks <span class="keyword">for</span> this project:</span><br><span class="line">* build:  Build the app</span><br><span class="line">* run:   Run the app</span><br></pre></td></tr></table></figure>

<h2 id="執行-Taskfile-command"><a href="#執行-Taskfile-command" class="headerlink" title="執行 Taskfile command"></a>執行 Taskfile command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ task run</span><br><span class="line">task: [run] GOFLAGS=-mod=mod go run ./internal/main.go</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>進階使用可參考 <a href="https://dev.to/stack-labs/introduction-to-taskfile-a-makefile-alternative-h92">Introduction to Taskfile: a Makefile alternative</a> 。</p>
<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://dev.to/stack-labs/introduction-to-taskfile-a-makefile-alternative-h92">Introduction to Taskfile: a Makefile alternative</a></li>
</ul>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>makefile</tag>
        <tag>taskfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 2.7 開發環境設置</title>
    <url>/2022/2022061201-python2-7-development-setting.html</url>
    <content><![CDATA[<p>Python 軟體基金會（Python Software Foundation）已在 2020&#x2F;01&#x2F;1，正式終止對 Python 2.7 的支援。那要如何在本地環境，進行基於 Python 2.7 的專案維護或開發呢？第一個想到的就是使用自製的 docker image。爬文找到這篇 <a href="https://dev.to/alvarocavalcanti/setting-up-a-python-remote-interpreter-using-docker-1i24">Setting Up a Python Remote Interpreter Using Docker</a> ，可以用 VS code 跟 PyCharm 進行搭配 Python 2.7 的 docker image 進行開發👍。</p>
<span id="more"></span>

<h2 id="環境-Environment"><a href="#環境-Environment" class="headerlink" title="環境  Environment"></a>環境  Environment</h2><ul>
<li>macOS 12.3.1</li>
<li>Docker version 20.10.12, build e91ed57</li>
<li>Task version: v3.12.0 (h1:viFy8kdDZ2iTcpTuxzzJCeKtTGt9U+5iXMVIpLjvIro&#x3D;)</li>
</ul>
<h2 id="事情準備"><a href="#事情準備" class="headerlink" title="事情準備"></a>事情準備</h2><p>開始動手前，先準備好一下檔案。以下檔案都放在 Git repository： <a href="https://github.com/jerry771230/my-py2.7-dev">jerry771230&#x2F;my-py2.7-dev</a></p>
<p>Dockerfile 內容，</p>
<ol>
<li>只安裝必要的 packages</li>
<li>建立 root 的密碼</li>
<li>設定可以通過 SSH 以帳號密碼登入</li>
<li>啟動 <code>ssh</code> 服務</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM python:2.7-slim-buster</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y gcc file make libcurl4-openssl-dev libssl-dev openssh-server curl wget &amp;&amp; \</span><br><span class="line">    apt-get clean -y &amp;&amp; apt-get autoclean -y &amp;&amp; apt-get autoremove -y &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">    mkdir -p /srv</span><br><span class="line"></span><br><span class="line">RUN echo &#x27;root:password&#x27; | chpasswd</span><br><span class="line">RUN sed -i &#x27;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config</span><br><span class="line">RUN sed &#x27;s@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g&#x27; -i /etc/pam.d/sshd</span><br><span class="line"># RUN mkdir /run/sshd</span><br><span class="line">RUN service ssh start</span><br><span class="line">EXPOSE 22</span><br><span class="line">EXPOSE 8787</span><br><span class="line">CMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>備註：<br>在文件 <a href="https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host">Develop on a remote Docker host</a> 內有提到，VS code 可以使用 <code>SSH</code> 登入 container 進行開發。如果不需要 SSH 登入，其相關 packages 跟服務是都不需要的。</p>
</blockquote>
<p>Taskfile.yml 後續指令都是使用 <code>task</code> 來執行，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Build</span> <span class="string">&quot;py2.7-dev&quot;</span> <span class="string">image</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">py2.7-dev</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">down:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Remove</span> <span class="string">containers</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">down</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">up:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Run</span> <span class="string">containers</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">exec:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Get</span> <span class="string">into</span> <span class="string">&quot;py2.7&quot;</span> <span class="string">container</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker</span> <span class="string">exec</span> <span class="string">-ti</span> <span class="string">py2.7</span> <span class="string">/bin/bash</span></span><br><span class="line">  <span class="attr">stop:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Stop</span> <span class="string">containers</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">stop</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">start:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Start</span> <span class="string">containers</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">start</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">restart:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">Restart</span> <span class="string">containers</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">restart</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">login:</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">SSH</span> <span class="string">to</span> <span class="string">&quot;py2.7&quot;</span> <span class="string">container</span></span><br><span class="line">    <span class="attr">cmds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">-p</span> <span class="number">2222</span> <span class="string">-t</span> <span class="string">root@127.0.0.1</span> <span class="string">&#x27;cd /srv ; bash&#x27;</span></span><br></pre></td></tr></table></figure>

<p>基礎的 Python 2.7 docker image 建立後，就可以使用 <code>docker-compose</code> 進行操作， <code>docker-compose.yml</code> 如下，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">py:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">py2.7-dev:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">py2.7</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8787:8787&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2222:22&quot;</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/srv</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./code:/srv</span></span><br></pre></td></tr></table></figure>

<p>Python 2.7 專案需要安裝的 packages 就靠 <code>code\requirement.txt</code> 管理了，</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Flask</span><br><span class="line">flask_restful</span><br><span class="line">flask-httpauth==4.5.0</span><br><span class="line">zerorpc</span><br><span class="line">urllib3</span><br><span class="line">strgen</span><br><span class="line">requests</span><br><span class="line">psycopg2-binary</span><br><span class="line">flask_sqlalchemy</span><br><span class="line">bcrypt</span><br><span class="line">ping</span><br><span class="line">psutil</span><br><span class="line">pyjwt</span><br><span class="line">pyOpenSSL</span><br><span class="line">python-dateutil</span><br><span class="line">flask-migrate</span><br></pre></td></tr></table></figure>

<h2 id="開始製作專案用-Python-2-7-docker-image"><a href="#開始製作專案用-Python-2-7-docker-image" class="headerlink" title="開始製作專案用 Python 2.7 docker image"></a>開始製作專案用 Python 2.7 docker image</h2><h3 id="1-建立-“py2-7-dev”-docker-image"><a href="#1-建立-“py2-7-dev”-docker-image" class="headerlink" title="1. 建立 “py2.7-dev” docker image"></a>1. 建立 “py2.7-dev” docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task build</span><br></pre></td></tr></table></figure>

<p>建立完成後, 列出 “py2.7-dev” docker image,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images | grep py2.7</span><br><span class="line"></span><br><span class="line">py2.7-dev         latest           10e84e2626e0   9 seconds ago   329MB</span><br></pre></td></tr></table></figure>

<h3 id="2-運行-container"><a href="#2-運行-container" class="headerlink" title="2. 運行 container"></a>2. 運行 container</h3><p>使用剛才建立的 docker image <code>py2.7-dev:latest</code> 來運行 container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task up</span><br></pre></td></tr></table></figure>

<p>顯示已運行的 containers</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE              COMMAND               CREATED         STATUS         PORTS                                          NAMES</span><br><span class="line">f8dc4ba33f2e   py2.7-dev:latest   <span class="string">&quot;/usr/sbin/sshd -D&quot;</span>   5 seconds ago   Up 3 seconds   0.0.0.0:8787-&gt;8787/tcp, 0.0.0.0:2222-&gt;22/tcp   py2.7</span><br></pre></td></tr></table></figure>

<h3 id="3-SSH-to-container"><a href="#3-SSH-to-container" class="headerlink" title="3. SSH to container"></a>3. SSH to container</h3><p>使用 <code>SSH</code> 命令登入 “py2.7” container,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task login</span><br></pre></td></tr></table></figure>

<p>此時需要輸入密碼才能登入。</p>
<p>可以使用 <code>authorized_key</code> 進行 SSH 登入，這樣就可以免除輸入密碼。使用下方命令，將 key 複製到 container，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -p 2222 root@127.0.0.1</span><br></pre></td></tr></table></figure>

<p>完成後再次使用 <code>SSH</code> 命令登入，此時不需要密碼就可以登入 container 內。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task login</span><br></pre></td></tr></table></figure>

<h3 id="4-Docker-命令進入-container"><a href="#4-Docker-命令進入-container" class="headerlink" title="4. Docker 命令進入 container"></a>4. Docker 命令進入 container</h3><p>在沒有安裝及設定 <code>SSH</code> 前，使用 <code>docker exec</code> 可以直接進入 container。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task <span class="built_in">exec</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>備註：<br>沒有特別需求時，使用 <code>docker exec</code> 比 <code>SSH</code> 方便，也不需要安裝 <code>SSH</code> 相關的 packages（佔空間）。</p>
</blockquote>
<h3 id="5-安裝-Python-專案需要的-packages"><a href="#5-安裝-Python-專案需要的-packages" class="headerlink" title="5. 安裝 Python 專案需要的 packages"></a>5. 安裝 Python 專案需要的 packages</h3><p>在進入 container 後，執行下列命令，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv &amp;&amp;\</span><br><span class="line">pip install pip -U &amp;&amp;\</span><br><span class="line">pip install pycurl -U &amp;&amp;\</span><br><span class="line">pip install -r ./requirement.txt</span><br></pre></td></tr></table></figure>

<p>完成後離開 container，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h3 id="6-提交（Commit）修改到-image"><a href="#6-提交（Commit）修改到-image" class="headerlink" title="6. 提交（Commit）修改到 image"></a>6. 提交（Commit）修改到 image</h3><p>列出運行中的 container，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE              COMMAND               CREATED         STATUS         PORTS                                          NAMES</span><br><span class="line">f8dc4ba33f2e   py2.7-dev:latest   <span class="string">&quot;/usr/sbin/sshd -D&quot;</span>   2 minutes ago   Up 2 minutes   0.0.0.0:8787-&gt;8787/tcp, 0.0.0.0:2222-&gt;22/tcp   py2.7</span><br></pre></td></tr></table></figure>

<p>將 container NAMES 為 ‘py2.7’ 的 <code>CONTAINER ID</code> 複製起來。</p>
<p>使用 <code>docker commit</code> 將修改內容建立成新的 docker image。以下是命令的語法，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [CONTAINER ID] [new_image_name]</span><br></pre></td></tr></table></figure>

<p>執行下列命令，將建立新的 docker image 命名成 <code>my-py2.7-dev</code>，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit f8dc4ba33f2e my-py2.7-dev</span><br></pre></td></tr></table></figure>

<p>完成後，列出 docker images，可以看到 <code>my-py2.7-dev</code> image 的容量長大了不少 :)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images | grep py2.7</span><br><span class="line"></span><br><span class="line">my-py2.7-dev      latest           cd7c2ab0d9b3   6 seconds ago    453MB</span><br><span class="line">py2.7-dev         latest           10e84e2626e0   16 minutes ago   329MB</span><br></pre></td></tr></table></figure>

<h3 id="7-使用新的-image"><a href="#7-使用新的-image" class="headerlink" title="7. 使用新的 image"></a>7. 使用新的 image</h3><p>先移除運行中的 container，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task down</span><br></pre></td></tr></table></figure>

<p>修改 <code>docker-compose.yml</code>，將 ‘services &gt; py &gt; image: py2.7-dev:latest’ 改成剛才建立的 ‘image: my-py2.7-dev:latest’。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">py:</span></span><br><span class="line">    <span class="comment"># image: py2.7-dev:latest</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">my-py2.7-dev:latest</span></span><br></pre></td></tr></table></figure>

<p>再次運行 container，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task up</span><br></pre></td></tr></table></figure>

<p>列出運行中的 container，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND               CREATED              STATUS              PORTS                                          NAMES</span><br><span class="line">f462db97314f   my-py2.7-dev:latest   <span class="string">&quot;/usr/sbin/sshd -D&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:8787-&gt;8787/tcp, 0.0.0.0:2222-&gt;22/tcp   py2.7</span><br></pre></td></tr></table></figure>

<p>以上步驟完成後，就可以依賴 docker image - ‘my-py2.7-dev:latest’，來設定 VS code 或 PyCharm 以 docker container 進行 Python 2.7 的開發（希望如此 XD）。</p>
<hr>
<h2 id="其他好用的-docker-命令"><a href="#其他好用的-docker-命令" class="headerlink" title="其他好用的 docker 命令"></a>其他好用的 docker 命令</h2><p>Get IP Address of container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> py2.7</span><br></pre></td></tr></table></figure>

<p>Use <code>docker</code> command to run container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -td --name py2.7 \</span><br><span class="line">         -p <span class="string">&quot;8787:8787&quot;</span> \</span><br><span class="line">         -p <span class="string">&quot;2222:22&quot;</span> \</span><br><span class="line">         -v <span class="variable">$PWD</span>:/srv \</span><br><span class="line">         -w /srv \</span><br><span class="line">         my-py2.7-dev:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://www.python.org/doc/sunset-python-2/">Sunsetting Python 2</a></li>
<li><a href="https://www.cyberciti.biz/faq/use-ssh-copy-id-with-an-openssh-server-listing-on-a-different-port/">Use ssh-copy-id with an OpenSSH Server Listening On a Different Port</a></li>
<li><a href="https://www.ssh.com/academy/ssh/copy-id">Ssh-copy-id for copying SSH keys to servers</a></li>
<li><a href="https://phoenixnap.com/kb/how-to-commit-changes-to-docker-image">How to Commit Changes to a Docker Image with Examples</a></li>
<li><a href="https://dev.to/alvarocavalcanti/setting-up-a-python-remote-interpreter-using-docker-1i24">Setting Up a Python Remote Interpreter Using Docker</a></li>
<li><a href="https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host">Develop on a remote Docker host</a></li>
</ul>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm 設定 Interpreter - Python 2.7</title>
    <url>/2022/2022061202-pycharm-interpreter-python2-7.html</url>
    <content><![CDATA[<p>使用 PyCharm Professional Edition 將專案的 interpreter 設定成前一篇 <a href="/2022/2022061201-python2-7-development-setting.html">Python 2.7 開發環境設置</a>自製的 docker image Python 2.7。</p>
<span id="more"></span>

<h2 id="寫在前面-Make-the-long-story-short"><a href="#寫在前面-Make-the-long-story-short" class="headerlink" title="寫在前面  Make the long story short"></a>寫在前面  Make the long story short</h2><p>付費的 PyCharm Professional Edition 是最佳選擇，真心不騙。PyCharm Professional Edition 才有支援 <a href="https://www.jetbrains.com/pycharm/features/">Remote development capabilities</a> 這很重要，因為需要設定 interpreter 指定目標是 docker image - Python 2.7.18，而且步驟很簡單。</p>
<p>雖然 VS Code 有支援 <a href="https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host">Develop on a remote Docker host</a> ，也參考了 <a href="https://dev.to/alvarocavalcanti/setting-up-a-python-remote-interpreter-using-docker-1i24">Setting Up a Python Remote Interpreter Using Docker</a> ，苦戰了一下午，仍然無法將 interpreter 設定成 Python 2.7。最終參考 <a href="https://www.jetbrains.com/help/pycharm/using-docker-as-a-remote-interpreter.html">Configure an interpreter using Docker</a> 一下子就設定完成了！</p>
<h2 id="環境-Environment"><a href="#環境-Environment" class="headerlink" title="環境  Environment"></a>環境  Environment</h2><ul>
<li>macOS 12.3.1</li>
<li>PyCharm 2022.1.2</li>
</ul>
<h2 id="設定步驟-Steps"><a href="#設定步驟-Steps" class="headerlink" title="設定步驟  Steps"></a>設定步驟  Steps</h2><p>開啟 Preference（<code>CMD + ,</code>）。點選 <strong>Project: &lt;project name&gt; &gt; Python Interpreter</strong> ，點擊 <code>Python Interpreter</code> 欄位後方的齒輪圖示，並按下 <code>Add</code> 會開啟新視窗，<br><img src="/uploads/20220601_python_interpreter.png" alt="python_interpreter"></p>
<p>在新視窗中左列選取 <strong>Docker</strong> ，接著在視窗右列的 <code>Image name</code> 欄位，從下拉選項中選取 <code>my-py2.7-dev:latest</code> 後按下 <code>OK</code> 套用設定。<br><img src="/uploads/20220601_assign_docker_image.png" alt="assign_docker_image"></p>
<p>回到原來的視窗中，檢查 <code>Python Interpreter</code> 欄位，按下 <code>OK</code> 套用設定。<br><img src="/uploads/20220601_interpreter_docker_image.png" alt="interpreter_docker_image"></p>
<p>以上步驟即將專案的 interpreter 設定成自製的 docker image - <code>my-py2.7.dev</code>，<strong>是不是很簡單</strong> :)。</p>
<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://www.jetbrains.com/help/pycharm/using-docker-as-a-remote-interpreter.html">Configure an interpreter using Docker</a></li>
<li><a href="https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host">Develop on a remote Docker host</a></li>
<li><a href="https://dev.to/alvarocavalcanti/setting-up-a-python-remote-interpreter-using-docker-1i24">Setting Up a Python Remote Interpreter Using Docker</a></li>
</ul>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 git mv 解決 macOS 預設對檔案不分大小寫問題</title>
    <url>/2018/2018030201-macos-correct-case-sentitive.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>macOS 的 Disk 預設對檔案是不分大小寫的，當程式部署到 linux 下，才會知道有大小寫錯誤問題。</p>
 <span id="more"></span>

<h2 id="使用-git-mv-指令進行修正"><a href="#使用-git-mv-指令進行修正" class="headerlink" title="使用 git mv 指令進行修正"></a>使用 <code>git mv</code> 指令進行修正</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># way 1</span><br><span class="line">$ git mv --force filename Filename</span><br><span class="line">$ git commit -m &quot;Set correct case for filename&quot;</span><br><span class="line"></span><br><span class="line"># way 2</span><br><span class="line">$ git mv filename tmp_filename</span><br><span class="line">$ git mv tmp_filename Filename</span><br><span class="line">$ git commit -m &quot;Set correct case for filename&quot;</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://coderwall.com/p/mgi8ja/case-sensitive-git-in-mac-os-x-like-a-pro">Case-sensitive git in Mac OS X like a Pro</a> - 文章有提到，外接一個 disk，並且格式化成 “Mac OS Extended (Case-sensitive, Journaled)”，就不會有這樣的困擾。</li>
</ul>
]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>OSX 執行 gvm pkgset use 發生錯誤</title>
    <url>/2017/2017042601-osx-gvm-pkgset-use-error.html</url>
    <content><![CDATA[<h2 id="第一次安裝-gvm-就踩到奇怪的雷"><a href="#第一次安裝-gvm-就踩到奇怪的雷" class="headerlink" title="第一次安裝 gvm 就踩到奇怪的雷"></a>第一次安裝 gvm 就踩到奇怪的雷</h2><p><a href="https://github.com/moovweb/gvm">gvm</a> 是 <a href="https://golang.org/">golang</a> 的版本管理工具（跟 nvm 很像），但是竟然在 OSX 下踩到奇怪的雷，<br>在 <code>~/.bash_profile</code> 內的 <code>export GREP_OPTIONS=&#39;--color=always&#39;</code> 會造成 <code>gvm use</code> 或 <code>gvm pkgset use</code> 無法正常運作。</p>
<span id="more"></span>

<h2 id="解決方式："><a href="#解決方式：" class="headerlink" title="解決方式："></a>解決方式：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim $HOME/.gvm/scripts/env/pkgset-use</span><br><span class="line">$ vim $HOME/.gvm/scripts/env/use</span><br></pre></td></tr></table></figure>


<p>在 <code>$GREP_PATH</code> 後面加上 <code>--color=never</code>，也就是修改成 <code>$GREP_PATH --color=never</code></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gvm</tag>
      </tags>
  </entry>
  <entry>
    <title>在本地端使用 Nodejs &amp; Ngrok 進行 Line Bot 開發測試</title>
    <url>/2017/2017060201-nodejs-line-bot-p1.html</url>
    <content><![CDATA[<p>Chat Bot 正夯，剛好公司的專案有 Line Bot 的應用，所以參考了 <a href="https://goo.gl/ePtTRw">不必真的架站也能 5 分鐘實機體驗 LINE bot – 教學 ( by node.js &amp; ngrok )</a>、<a href="http://www.oxxostudio.tw/articles/201701/line-bot.html">LINE BOT 實戰 ( 原理篇 )</a>、<a href="http://www.oxxostudio.tw/articles/201701/line-bot-2.html">LINE BOT 實戰 ( 聊天篇 )</a> 等文章來進行 Nodejs 的 Line bot 開發實作練習。</p>
<span id="more"></span>

<h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><ul>
<li>macOS Sierra： 10.12.5</li>
<li>Nodejs： 7.10.0</li>
<li>Packages：<ul>
<li><a href="https://www.npmjs.com/package/express">express</a></li>
<li><a href="https://www.npmjs.com/package/linebot">linebot</a></li>
</ul>
</li>
<li>Github： <a href="https://github.com/jerry771230/node-line-bot-practice">https://github.com/jerry771230/node-line-bot-practice</a></li>
</ul>
<h2 id="本次實作有以下階段："><a href="#本次實作有以下階段：" class="headerlink" title="本次實作有以下階段："></a>本次實作有以下階段：</h2><ul>
<li><a href="#linebotaccount">申請 Line Bot 帳號</a></li>
<li><a href="#usingngrok">ngrok 讓 localhost 也可以使用 HTTPS</a></li>
<li><a href="#webhookservice">使用 Nodejs 在本地端部署 webhook service</a></li>
<li><a href="#sendlinebot">使用 Line App 傳訊息給 Line Bot</a></li>
</ul>
<h2 id="申請-Line-Bot-帳號"><a href="#申請-Line-Bot-帳號" class="headerlink" title="申請 Line Bot 帳號"></a><a id="linebotaccount"></a>申請 Line Bot 帳號</h2><ol>
<li><p>到 <a href="https://business.line.me/zh-hant">LINE Business Center</a> 申請商用帳號。點擊「帳號清單」，再點擊「建立商用帳號」<br> <img src="https://lh3.googleusercontent.com/maPhifD7BVwbpWvElCZzWdhXqULQfbGYofmqazlAE8S0ArKXVb5kWk2r8JmAb-CBZvpH2WuQ_NubG63u-5rW0GYIpBE4-7ryoDbXmJn-YwnZWn9x2xaAuhm-0M0FsLEyBfoe=w715-h409-no" alt="申請商用帳戶"></p>
</li>
<li><p>找到 Messageing API，點擊「開始使用Developer Trial」<br> <img src="https://lh3.googleusercontent.com/2s8QshZMPK-b4hRv3fkYZGzP0Pw_7iKf9vMnpOOyv6G6J0jtDrSrFm4NSdoGdxEC8khRDLpzsDsUKZDQ4UWQyx4JPvWYcPFh7-HRiy_g12Q5ON861Aj8oWStncau_0ZubOl5=w1022-h480-no" alt="開始使用Developer Trial"></p>
</li>
<li><p>輸入 Bot 的帳號名稱，更換圖片以及選擇業種，再按下確定就會建立機器人專用帳號<br> <img src="https://lh3.googleusercontent.com/eKQOGxTfs3hb3rgwyQIQ9qnLWkI7pcWyHt9BOBmXEiDEOON6upYlcJMM50vahJvA03M5WKT_V5o_x-CZ68ttR8EMGh1RJSE-Hk6eMYFwpMQHlw6dCVXBBm4whOwCohEFXw4DyQ=w481-h639-no" alt="建立機器人專用帳號"></p>
</li>
<li><p>在申請完成的頁面下方點擊「前往LINE@MANAGER」<br> <img src="https://lh3.googleusercontent.com/YH-sM08j0AJpFLwzbU00WMYXlnskuQBaiq7qhwXZ0LT5qFeBx6re1L8CXsMT1pLUj3K3dxb0SHEMJXbMe5h--YlYOBe0-P2G5oL94srLxVCl-KRz4GUnE5ls2hIW4F0AdHlHPw=w529-h639-no"></p>
</li>
<li><p>開始使用 API。進入 LINE@ MANAGER 後，在左邊選單 「Settings」-&gt; 點擊「Bot Settings」-&gt; 再按下「Enable API」<br> <img src="https://lh3.googleusercontent.com/g0NzW_h7LR7bAlgPEwkdbxMolf5yW-MqNg2RahHGiFvuW__r2kbsh5mn7nayUb3gGC10BFX8uwBg2o4kAoIr8ukP1ksws83y6o5kfCy4MnD6Jn_y3qMOyFHbu13nJYyMTj5o4A=w957-h639-no" alt="Enable API"></p>
</li>
</ol>
<p> <img src="https://lh3.googleusercontent.com/QSvYxtP7f-wSNrPryDskR7VjB6OtpYDU8WCA-37YuC3j_QfdXH3wrraumzypogezaX7kd6-A83kh7Kpsc1xK3l1_Jg9v90X2kdaRy-1g2J15sJrEq1X3NAu4_-8ld7JbvViZRw=w611-h393-no" alt="Enabling Confirm"><br> 註：LINE@ MANAGER 的網址會是 <code>https://admin-official.line.me/</code> 開頭</p>
<ol start="6">
<li>Bot Settings 的部份要留意 Usable APIs 是否有 <code>REPLY_MESSAGE</code> 及 <code>PUSH_MESSAGE</code>。如果沒有 <code>PUSH_MESSAGE</code> 是不能進行 Bot 主動發訊息給 Client App 的。<br> <img src="https://lh3.googleusercontent.com/hZmeGk-OPkAUxrjMuIqYgYbfmWmv1jVEWxQA8KT-FpjncQ-KD34K3Ur-IqGZlYg1Gp1c_QPqmdvbhNC55nOmC-NG2Gzz1frSfUNWASVxHO-F4tcsS2clrtU0Hmm8lMYNfTIj6A=w871-h639-no" alt="Use webhooks"><br> Request Settings 裡的 Use webhooks 請勾選 「Allow」。<br> Details 的 Allow Bot to join group chats、Auto Reply Message 及 Greeting Message 都勾選 「Don’t Allow」。</li>
</ol>
<h2 id="ngrok-讓-localhost-也可以使用-HTTPS"><a href="#ngrok-讓-localhost-也可以使用-HTTPS" class="headerlink" title="ngrok 讓 localhost 也可以使用 HTTPS"></a><a id="usingngrok"></a>ngrok 讓 localhost 也可以使用 HTTPS</h2><p>Line Bot 需要有 HTTPS 的 webhook service 才能接受及轉發訊息，這時候後端開發必備神器 - <a href="https://ngrok.com/">ngrok</a>，可以讓 localhost 使用 HTTPS 的隨機網址，達成 webhook service 測試，省去了必須上傳到 Server 後才能得到測試結果的時間花費。</p>
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>Mac 的部份可以在 <a href="https://ngrok.com/">ngrok</a> 官網下載程式，解壓縮後就可以使用了。或者是丟到 <code>/usr/local/bin</code>，方便之後使用。</p>
<p>Termial 指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ngrok http 8080</span></span><br></pre></td></tr></table></figure>

<p>代表把外界的流量導到 localhost 的 8080 port。執行後會有以下畫面：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ngrok by @inconshreveable          (Ctrl+C to quit)</span><br><span class="line"></span><br><span class="line">Session Status                online</span><br><span class="line">Account                       YOUR_ACCOUNT (Plan: Free)</span><br><span class="line">Version                       2.2.4</span><br><span class="line">Region                        United States (us)</span><br><span class="line">Web Interface                 http://127.0.0.1:4040</span><br><span class="line">Forwarding                    http://85ceccf9.ngrok.io -&gt; localhost:8080</span><br><span class="line"></span><br><span class="line">Connections                   ttl     opn     rt1     rt5     p50     p90</span><br><span class="line">                              0       0       0.00    0.00    0.00    0.00</span><br></pre></td></tr></table></figure>

<p>按下 <code>Ctrl + C</code> 跳出並停止運作。</p>
<h3 id="申請-HTTPS-protocol"><a href="#申請-HTTPS-protocol" class="headerlink" title="申請 HTTPS protocol"></a>申請 HTTPS protocol</h3><p>到 <a href="https://ngrok.com/">ngrok</a> 官網註冊，可以使用 Github 或 Google 登入。<br>登入的畫面如下：<br><img src="https://lh3.googleusercontent.com/ZRyTQA8tuz-QiC3bJh3MjzC6U2_AliofTUUfHdnieoQJ4vO3rYt80AqR7yNyXA2KBERCuS0KXIcaTbX0ay3G2-Msz9oEj6TylLSQOqY-uYOOMKm-1M1IC4as3lP6kMkRuGdWhQ=w742-h639-no" alt="ngrok Dashborad"></p>
<p>在 Terminal 下執行指令，這樣就可以使用 https 的網址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ngrok authtoken &#123;token&#125;</span><br><span class="line">$ ngrok http 8080</span><br><span class="line"></span><br><span class="line">ngrok by @inconshreveable           (Ctrl+C to quit)</span><br><span class="line"></span><br><span class="line">Session Status                online</span><br><span class="line">Account                       YOUR_ACCOUNT (Plan: Free)</span><br><span class="line">Version                       2.2.4</span><br><span class="line">Region                        United States (us)</span><br><span class="line">Web Interface                 http://127.0.0.1:4040</span><br><span class="line">Forwarding                    http://ec041dbf.ngrok.io -&gt; localhost:8080</span><br><span class="line">Forwarding                    https://ec041dbf.ngrok.io -&gt; localhost:8080</span><br><span class="line"></span><br><span class="line">Connections                   ttl     opn     rt1     rt5     p50     p90</span><br><span class="line">                              0       0       0.00    0.00    0.00    0.00</span><br></pre></td></tr></table></figure>

<p>其他指令參考</p>
<ul>
<li>HTTP Auth</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ngrok http -auth <span class="string">&quot;user:passwd&quot;</span> 80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>轉址到 local domain（修改 &#x2F;etc&#x2F;hosts）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ngrok http -host-header=myweb.dev myweb.dev:80</span></span><br></pre></td></tr></table></figure>

<p>以上 ngrok 的基本使用是參考 <a href="https://coder.tw/?p=7211">Ngrok – 讓本機也可以開發 webhook 免部署環境的神器</a></p>
<h2 id="使用-Nodejs-在本地端部署-webhook-service"><a href="#使用-Nodejs-在本地端部署-webhook-service" class="headerlink" title="使用 Nodejs 在本地端部署 webhook service"></a><a id="webhookservice"></a>使用 Nodejs 在本地端部署 webhook service</h2><h3 id="開始建立-Nodejs-專案"><a href="#開始建立-Nodejs-專案" class="headerlink" title="開始建立 Nodejs 專案"></a>開始建立 Nodejs 專案</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> node-line-bot</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> node-line-bot</span></span><br></pre></td></tr></table></figure>

<p>建立 <code>package.json</code> 檔案，並修改 “scripts”，增加 <code>&quot;start&quot;: &quot;node .&quot;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm init</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;node-line-bot&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node .&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;Jerry Huang&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安裝模組 <code>linebot</code> 及 <code>express</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install linebot express --save</span></span><br><span class="line"></span><br><span class="line">node-line-bot@1.0.0 /Users/jerryhuang/workspace/practice/nodejs/node-line-bot</span><br><span class="line">├─┬ express@4.15.3</span><br><span class="line">│ ├─┬ accepts@1.3.3</span><br><span class="line">│ │ ├─┬ mime-types@2.1.15</span><br><span class="line">│ │ │ └── mime-db@1.27.0</span><br><span class="line">│ │ └── negotiator@0.6.1</span><br><span class="line">│ ├── array-flatten@1.1.1</span><br><span class="line">│ ├── content-disposition@0.5.2</span><br><span class="line">│ ├── content-type@1.0.2</span><br><span class="line">│ ├── cookie@0.3.1</span><br><span class="line">│ ├── cookie-signature@1.0.6</span><br><span class="line">│ ├─┬ debug@2.6.7</span><br><span class="line">│ │ └── ms@2.0.0</span><br><span class="line">│ ├── depd@1.1.0</span><br><span class="line">│ ├── encodeurl@1.0.1</span><br><span class="line">│ ├── escape-html@1.0.3</span><br><span class="line">│ ├── etag@1.8.0</span><br><span class="line">│ ├─┬ finalhandler@1.0.3</span><br><span class="line">│ │ └── unpipe@1.0.0</span><br><span class="line">│ ├── fresh@0.5.0</span><br><span class="line">│ ├── merge-descriptors@1.0.1</span><br><span class="line">│ ├── methods@1.1.2</span><br><span class="line">│ ├─┬ on-finished@2.3.0</span><br><span class="line">│ │ └── ee-first@1.1.1</span><br><span class="line">│ ├── parseurl@1.3.1</span><br><span class="line">│ ├── path-to-regexp@0.1.7</span><br><span class="line">│ ├─┬ proxy-addr@1.1.4</span><br><span class="line">│ │ ├── forwarded@0.1.0</span><br><span class="line">│ │ └── ipaddr.js@1.3.0</span><br><span class="line">│ ├── qs@6.4.0</span><br><span class="line">│ ├── range-parser@1.2.0</span><br><span class="line">│ ├─┬ send@0.15.3</span><br><span class="line">│ │ ├── destroy@1.0.4</span><br><span class="line">│ │ ├─┬ http-errors@1.6.1</span><br><span class="line">│ │ │ └── inherits@2.0.3</span><br><span class="line">│ │ └── mime@1.3.4</span><br><span class="line">│ ├── serve-static@1.12.3</span><br><span class="line">│ ├── setprototypeof@1.0.3</span><br><span class="line">│ ├── statuses@1.3.1</span><br><span class="line">│ ├─┬ type-is@1.6.15</span><br><span class="line">│ │ └── media-typer@0.3.0</span><br><span class="line">│ ├── utils-merge@1.0.0</span><br><span class="line">│ └── vary@1.1.1</span><br><span class="line">└─┬ linebot@1.3.0</span><br><span class="line">  ├─┬ body-parser@1.17.2</span><br><span class="line">  │ ├── bytes@2.4.0</span><br><span class="line">  │ ├── iconv-lite@0.4.15</span><br><span class="line">  │ └── raw-body@2.2.0</span><br><span class="line">  └─┬ node-fetch@1.7.0</span><br><span class="line">    ├── encoding@0.1.12</span><br><span class="line">    └── is-stream@1.1.0</span><br><span class="line"></span><br><span class="line">npm WARN node-line-bot@1.0.0 No description</span><br><span class="line">npm WARN node-line-bot@1.0.0 No repository field.</span><br></pre></td></tr></table></figure>

<p>建立 <code>index.js</code> 檔案的內容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> linebot = <span class="built_in">require</span>(<span class="string">&#x27;linebot&#x27;</span>),</span><br><span class="line">    express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config.json&#x27;</span>),</span><br><span class="line">    util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bot = <span class="title function_">linebot</span>(&#123;</span><br><span class="line">    <span class="attr">channelId</span>: <span class="string">&#x27;Line Bot Channel ID&#x27;</span>,</span><br><span class="line">    <span class="attr">channelSecret</span>: <span class="string">&#x27;Line Bot Channel Secret&#x27;</span>,</span><br><span class="line">    <span class="attr">channelAccessToken</span>: <span class="string">&#x27;Line Bot Access Token&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linebotParser = bot.<span class="title function_">parser</span>(),</span><br><span class="line">    app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">bot.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 把收到訊息的 event 印出來</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/webhook&#x27;</span>, linebotParser);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 localhost 走 8080 port</span></span><br><span class="line"><span class="keyword">let</span> server = app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">8080</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> port = server.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My Line bot App running on port&quot;</span>, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="如何取得-Line-Bot-的-Channel-ID-及設定-Webhook"><a href="#如何取得-Line-Bot-的-Channel-ID-及設定-Webhook" class="headerlink" title="如何取得 Line Bot 的 Channel ID 及設定 Webhook"></a>如何取得 Line Bot 的 Channel ID 及設定 Webhook</h3><p>Channel ID、Channel Secret 及 Channel Access Token 可以從 LINE Business Center 進入後取得</p>
<h4 id="取得-Channel-ID、Channel-Secret-及-Channel-Access-Token"><a href="#取得-Channel-ID、Channel-Secret-及-Channel-Access-Token" class="headerlink" title="取得 Channel ID、Channel Secret 及 Channel Access Token"></a>取得 Channel ID、Channel Secret 及 Channel Access Token</h4><p>回到 LINE Business Center 按下 Messaging API 右邊的「LINE Developers」<br> <img src="https://lh3.googleusercontent.com/i2ZbXKUPnLO3EB-GpOH7CwbwLHB5xVFTI8J5ZSHm2GyGNmfIFmkpyjWLBoGA0Lo7J-xAS0OwC4C4jiqOG1SAKCksmeNr_LRmVB5pn0E5EZBg9C9Xx_rq0EyywNEWJZpkqDHriw=w738-h583-no" alt="前往 LINE Developers"></p>
<p>在 LINE developers 下的 “Basic information”，將 “Channel ID”、”Channel Secret”（點選 SHOW 會出現）、 “Channel Access Token” 複製貼到 index.js 裡對應的程式中<br> <img src="https://lh3.googleusercontent.com/nhK_bbRrgxY-cCb0D_79yUV-e_ARnRydKBXgj9QpUaoQh0-Lv5AdU7MsNgbK1LmB8VUuFUbOkRRfbLbX1kj8ZNNfIMJq7yo2oz8eSPlvmZOB5_Ce7LW45X8e9fuNujyJHEdaJQ=w654-h639-no" alt="取得 Channel ID"></p>
<p>點選 ISSUE 會產生 “Channel Access Token”<br> <img src="https://lh3.googleusercontent.com/HXbB5WOezmhLSsokuOp4TZEFOn1xC10jdNXsZj76RH3fI5-OvJYd4TGYR6VN6AYLGgFIeLJCfXPznvnaZadwbFI6nVnx9cVW1ybWFcu5lFDkt0dgkUA5vHGHaqlpe9j2_OK9Kw=w633-h639-no" alt="取得 Channel Access Token"></p>
<h4 id="設定-Webhook-URL"><a href="#設定-Webhook-URL" class="headerlink" title="設定 Webhook URL"></a>設定 Webhook URL</h4><p>同樣在 “Basic information” 下，按下右下角的 “EDIT”，然後將 ngrok 產生的網址以及 index.js 內監聽 post mehtod 的路徑組合 <code>https://ec041dbf.ngrok.io/webhook</code> 貼到 “Webhook URL” 中<br> <img src="https://lh3.googleusercontent.com/ptb0MmQ-AwOc4Ze5EywsFwy94QzjbOlWkXLmQtisBig5qHSCxpgVhIpNbOC2iJHk9PrwJHcBfHO9aKvB5biE95TkuQ-pqIgX4yi0b8BNrJO3qeI9OcnBCYPP2qpvw71IaiPWCg=w600-h639-no" alt="設定 Webhook URL"></p>
<p>回到 Terminal 畫面，啟動 webhook service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node index.js</span></span><br></pre></td></tr></table></figure>

<p>再回 LINE developers 的 “Basic information”，按下 Webhoo URL 右方的 “VERIFY” 以驗證是否正確。</p>
<p>Terminal 畫面會有以下資訊</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123; replyToken: &#x27;00000000000000000000000000000000&#x27;,</span><br><span class="line">  type: &#x27;message&#x27;,</span><br><span class="line">  timestamp: 1451617200000,</span><br><span class="line">  source:</span><br><span class="line">   &#123; type: &#x27;user&#x27;,</span><br><span class="line">     userId: &#x27;UdeadbeefdeadbeefdeLINEBOTUSERID&#x27;,</span><br><span class="line">     profile: [Function] &#125;,</span><br><span class="line">  message:</span><br><span class="line">   &#123; id: &#x27;100001&#x27;,</span><br><span class="line">     type: &#x27;text&#x27;,</span><br><span class="line">     text: &#x27;Hello,world&#x27;,</span><br><span class="line">     content: [Function] &#125;,</span><br><span class="line">  reply: [Function] &#125;</span><br><span class="line">&#123; replyToken: &#x27;ffffffffffffffffffffffffffffffff&#x27;,</span><br><span class="line">  type: &#x27;message&#x27;,</span><br><span class="line">  timestamp: 1451617210000,</span><br><span class="line">  source:</span><br><span class="line">   &#123; type: &#x27;user&#x27;,</span><br><span class="line">     userId: &#x27;UdeadbeefdeadbeefdeLINEBOTUSERID&#x27;,</span><br><span class="line">     profile: [Function] &#125;,</span><br><span class="line">  message:</span><br><span class="line">   &#123; id: &#x27;100002&#x27;,</span><br><span class="line">     type: &#x27;sticker&#x27;,</span><br><span class="line">     packageId: &#x27;1&#x27;,</span><br><span class="line">     stickerId: &#x27;1&#x27;,</span><br><span class="line">     content: [Function] &#125;,</span><br><span class="line">  reply: [Function] &#125;</span><br></pre></td></tr></table></figure>


<h2 id="使用-Line-App-傳訊息給-Line-Bot"><a href="#使用-Line-App-傳訊息給-Line-Bot" class="headerlink" title="使用 Line App 傳訊息給 Line Bot"></a><a id="sendlinebot"></a>使用 Line App 傳訊息給 Line Bot</h2><p>手機 Line App 掃描  LINE developers 的 “Basic information” 畫面中的 QR Code 將 Line Bot 加入，然後輸入文字，測試 Line Bot 是否有正確接收到。<br> <img src="https://lh3.googleusercontent.com/M6x09wRnbeDagDnrCe0m7rQAPocOIOnhooSD6mOnLbBG-ygU2M-VRi7UWcYVQ6jHkkQyy9htxI54rehBjWBQFwzpw_EI5QQSTzIct5UtFO3aB0sgykQllqpd3ehUjeq4gNF7wA=w317-h181-no"></p>
<p>如果有正確收到訊息，則 Terminal 畫面會顯示以下資訊</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123; type: &#x27;message&#x27;,</span><br><span class="line">  replyToken: &#x27;98eb2ca92bdb468c9REPLYTOKEN&#x27;,</span><br><span class="line">  source:</span><br><span class="line">   &#123; userId: &#x27;U08cee31d0f3a94CLIENTAPPUSERID&#x27;,</span><br><span class="line">     type: &#x27;user&#x27;,</span><br><span class="line">     profile: [Function] &#125;,</span><br><span class="line">  timestamp: 1496462418683,</span><br><span class="line">  message:</span><br><span class="line">   &#123; type: &#x27;text&#x27;,</span><br><span class="line">     id: &#x27;618217MSGID&#x27;,</span><br><span class="line">     text: &#x27;開發測試Q Q&#x27;,</span><br><span class="line">     content: [Function] &#125;,</span><br><span class="line">  reply: [Function] &#125;</span><br></pre></td></tr></table></figure>


<h3 id="將收到的訊息，回覆給-Client-App"><a href="#將收到的訊息，回覆給-Client-App" class="headerlink" title="將收到的訊息，回覆給 Client App"></a>將收到的訊息，回覆給 Client App</h3><p>修改一下 on ‘message’ 的內容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bot.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 把收到訊息的 event 印出來</span></span><br><span class="line">    <span class="comment">//console.log(event);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重複 client 輸入的內容</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">message</span>.<span class="property">type</span> = <span class="string">&#x27;text&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> msg = event.<span class="property">message</span>.<span class="property">text</span>;</span><br><span class="line">        event.<span class="title function_">reply</span>(msg).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="comment">// success</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">            <span class="comment">// error</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>記得要重啟 nodejs server 喔 :)</p>
<p> <img src="https://lh3.googleusercontent.com/hx85cXamDUf7tD3pktZZtgP1w46UyMydyGa1PcO3bdVvSBJhCJbZuDBDeQCC4VFaEpV9fhGyJVB1sdnFEMjiMqo6zCaVSmI7wQHpSXX4Fb3xx2--T-x_wnNRh_i7z-5p2X3mvw=w319-h282-no" alt="重複 client 輸入的內容"></p>
<h3 id="主動發送訊息"><a href="#主動發送訊息" class="headerlink" title="主動發送訊息"></a>主動發送訊息</h3><p>讓 server 啟動後 3 秒，發送訊息給 Client App，請在 index.js 加入以下程式，。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主動發送訊息給 Client App</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> userId = <span class="string">&#x27;Client App User ID&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> sendMsg = <span class="string">&quot;push msg to one user&quot;</span>;</span><br><span class="line">    bot.<span class="title function_">push</span>(userId, [sendMsg]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;userId: &#x27;</span> + userId);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send: &#x27;</span> + sendMsg);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p> <img src="https://lh3.googleusercontent.com/bq-9Ck0gZ8aS5gcP6TKdcSjUAsdSVBpF-EcJqSSmEWTyHxfLKDEBgxfBKCMG0P1267Apl_tcaxr24omYJiGqruOYbdpr4BxiUWQh_dOmIytlfAw3kfHdQppgwF8gd0y9JnWaZw=w320-h335-no" alt="主動發送訊息"></p>
<h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><ul>
<li><a href="http://www.oxxostudio.tw/articles/201701/line-bot.html">LINE BOT 實戰 ( 原理篇 )</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201701/line-bot-2.html">LINE BOT 實戰 ( 聊天篇 )</a></li>
<li><a href="https://goo.gl/ePtTRw">不必真的架站也能 5 分鐘實機體驗 LINE bot – 教學 ( by node.js &amp; ngrok )</a></li>
<li><a href="https://coder.tw/?p=7211">Ngrok – 讓本機也可以開發 webhook 免部署環境的神器</a></li>
<li><a href="https://ngrok.com/">ngrok.com</a></li>
</ul>
<h3 id="Line-Bot-的圖片來源"><a href="#Line-Bot-的圖片來源" class="headerlink" title="Line Bot 的圖片來源"></a>Line Bot 的圖片來源</h3><ul>
<li><a href="https://tgram.ru/bots/topics_bot">tgram.ru</a></li>
<li><a href="https://tgram.ru/wiki/bots/image/topics_bot.jpg">https://tgram.ru/wiki/bots/image/topics_bot.jpg</a></li>
</ul>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>line bot</tag>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 安裝筆記</title>
    <url>/2017/2017081801-hexo-install-notes.html</url>
    <content><![CDATA[<h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/GITPAGEUSERNAME/GITPAGEUSERNAME.github.io.git .deploy/GITPAGEUSERNAME.github.io</span><br></pre></td></tr></table></figure>


<h2 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">hexo generate</span><br><span class="line">cp -R public/* .deploy/codefuntw.github.io</span><br><span class="line">cd .deploy/codefuntw.github.io</span><br><span class="line">git add .</span><br><span class="line">git commit -m “update”</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>


<h2 id="Custom-Domain-Setting-Reference"><a href="#Custom-Domain-Setting-Reference" class="headerlink" title="Custom Domain Setting Reference"></a>Custom Domain Setting Reference</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://help.github.com/articles/setting-up-an-apex-domain/</span><br><span class="line">https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider</span><br><span class="line">https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/</span><br></pre></td></tr></table></figure>

<h3 id="Custom-Domain-對應到-GitHub-page"><a href="#Custom-Domain-對應到-GitHub-page" class="headerlink" title="Custom Domain 對應到 GitHub page"></a>Custom Domain 對應到 GitHub page</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ dig blog.codefun.tw +nostats +nocomments +nocmd</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; blog.codefun.tw +nostats +nocomments +nocmd</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;blog.codefun.tw.       IN  A</span><br><span class="line">blog.codefun.tw.    3599    IN  CNAME   GITPAGEUSERNAME.github.io.</span><br><span class="line">GITPAGEUSERNAME.github.io.  3599    IN  CNAME   github.map.fastly.net.</span><br><span class="line">github.map.fastly.net.  2865    IN  CNAME   prod.github.map.fastlylb.net.</span><br><span class="line">prod.github.map.fastlylb.net. 13 IN A   151.101.100.133</span><br></pre></td></tr></table></figure>


<h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><h3 id="常用基本指令"><a href="#常用基本指令" class="headerlink" title="常用基本指令"></a>常用基本指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo g  # 或者 hexo generate</span><br><span class="line">$ hexo s  # 或者 hexo server，可以在 http://localhost:4000/ 查看</span><br><span class="line">$ hexo deploy (hexo d)  # 部署到遠端</span><br><span class="line">$ hexo new &quot;postName&quot;  # 新建文章</span><br><span class="line">$ hexo new page &quot;pageName&quot;  # 新建頁面</span><br></pre></td></tr></table></figure>

<h3 id="常用簡寫"><a href="#常用簡寫" class="headerlink" title="常用簡寫"></a>常用簡寫</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="常用組合"><a href="#常用組合" class="headerlink" title="常用組合"></a>常用組合</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo d -g  # 生成部署</span><br><span class="line">$ hexo s -g  # 生成預覽</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed</span><br><span class="line">$ npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 Google Hangouts 進行遠端多人會議</title>
    <url>/2017/2017081802-google-hangouts-multi-person-meeting.html</url>
    <content><![CDATA[<ol>
<li>開啟 Google Chrome 瀏覽器並且登入 Google 帳號，然後在網址列搜尋 <code>Google Hangouts</code> 或直接開啟連結 <a href="https://hangouts.google.com/?hl=zh-TW">https://hangouts.google.com/?hl=zh-TW</a> 。</li>
</ol>
 <span id="more"></span>

<ol start="2">
<li><p>進入 <a href="https://hangouts.google.com/?hl=zh-TW">https://hangouts.google.com/?hl=zh-TW</a> 頁面後點擊 <code>視訊通話</code>。<br><img src="https://lh3.googleusercontent.com/AlFUgzsOF6r7JUqpzjdfq5D1af5WpFffSDOuWE94uCZQjUDvay_gIb7Ab_01fsDXcuyLeiT7IT-Iohm0bFuN5rilRxYpbxvzKEm9jCXHsb9g8Qldxfc022gsid-IXbTBpyb-Fg285g=w1015-h598-no" alt="開啟視訊通話"></p>
</li>
<li><p>同意 Google Hangouts 取用攝影機及麥克風的權限，即可正式開啟會議。<br><img src="https://lh3.googleusercontent.com/komj3VnPhw7yi-KjjhBGMzh_FWEjp_rHLrB-fuF1cD2thBBGST1xnm0K_HwKmLAzsIqCS66qkK9D6oiM-QpggSjEmR0IppLB6NqsjcnpDXMK61iOx7OQ-6ob0Cev-AFrCX-Icc-b4A=w1026-h717-no" alt="同意取用攝影機及麥克風"></p>
</li>
<li><p>邀請進入會議的方式有二，一是透過 email 邀請，二是分享連結。<br><img src="https://lh3.googleusercontent.com/7funsf3-O_S6Pn7PDDOy8ufZfE4yLcnFdYshes6aVDhyyTzwMdA-F6JHoG4agLqYxWIwVVMx_IrhZXerDaFkWGac-sPETDDnxktLK8zuRZKziQfLJLtzvlIPlejRiaehZNs2zmt--w=w1097-h802-no" alt="邀請進入會議的方式"></p>
</li>
<li><p>要分享報告的內容給其他人時，可以點擊右上角。<br><img src="https://lh3.googleusercontent.com/2dApM7z6B2B4J5OUJmLsqeV0aDH4DgVAAleQJHWxga_6LaF_Cd_gK5o_TR3cgQfPwSK0Va6eS_AS_G88Pi7AW5_9eMiGBBAhniwnv3KG8KqANnZoXa_BaxnJ_Kz0Mx1WsmRB4AMbQA=w933-h705-no" alt="開啟螢幕分享"></p>
</li>
<li><p>然後點擊 <code>分享螢幕畫面</code><br><img src="https://lh3.googleusercontent.com/aj9yUUt70f5zdQ5X-InP-J_CJTD2SDb8EkTYU9B-6jf-Io7rsxAyZp1BzmPDvMO3VIykYCJ-rUxZQ7LLltmNkVtcXDJYy-84wgdFusiNJsvNt60fVrV_zJ4INBpZseRjxRtudYPvTQ=w1097-h802-no" alt="分享螢幕畫面"></p>
</li>
<li><p>再選擇要分享螢幕（Your Entire Screen）還是應用程式（Application Window）。<br><img src="https://lh3.googleusercontent.com/4l7x9qHKu-th4PQqFmaxzIB2Ri5tqYaIJNB0s_Ku3FgrhQcC43ch7E7JlMhT2AihQ3GY4bfYmem1zi3sqZeK1n0zFtxqZjvEsRN2cIN0MRQtM1xGQbQ0z4l6npF64mfzrIm4Dos12A=w617-h523-no" alt="分享整個螢幕畫面"><br><img src="https://lh3.googleusercontent.com/9EmKhj4VscJAmj9nL3GUGgOiYqoPs8iKlpEkzCH5gPECBEuvz9TSrvUlTamRs3u5Z4zza9UqLJMT0D6mgQxwcToRTdfin2pL6d2zdxnPKonmVIBQg_pNnaiHEvzWcoC7UJEDk51-XQ=w619-h523-no" alt="分享應用程式"></p>
</li>
<li><p>再點擊 <code>Share</code>，此時你的 Google Hangouts 畫面就會是要分享的內容。</p>
</li>
<li><p>要看其他人分享的螢幕，點擊主視窗下方的其他人的小視窗就可以進行切換。<br><img src="https://lh3.googleusercontent.com/sedtAm7wrJNBXCEaVVhg5PBIinaNEtYXNzzZL4rYf39v2-p6d3hDeYFzoXZk6s5ZOpGs_5I0R9LVDkQrBkXp_e59ZF6D6cWxqQuF-Bpp9xFV7r-AJPGdhKp73NeNy58SlMdXHy52ag=w1182-h673-no" alt="切換到他人分享的螢幕"></p>
</li>
</ol>
<p>以上截圖內容是在 MAC OS 下操作的畫面，其他 OS 可能會有出入。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>IM</tag>
        <tag>Google Hangouts</tag>
      </tags>
  </entry>
  <entry>
    <title>開發廣告系統（DSP）不能不知道的關鍵字！</title>
    <url>/2017/2017081803-cpc-cpa-ad-keywords.html</url>
    <content><![CDATA[<h2 id="關鍵字"><a href="#關鍵字" class="headerlink" title="關鍵字"></a>關鍵字</h2><ul>
<li>DSP: Demand Side Platform 網路廣告中的需求方平台，可以讓廣告主進行跨媒體的自動化廣告投放。J: 買廣告版位</li>
<li>SSP: Supply Side Platform 是網路媒體中的供應方平台。SSP 平台幫助網路媒體託管其廣告位和廣告交易，與網路交易平台對接，從而將他們的流量變現。J: 賣廣告版位</li>
<li>DMP: Data-Management Platform 是專門為廣告主、媒體等開發的廣告數據管理平台，主要分析、儲存用戶行為數據，並管理相關資料，為廣告主提供精準的用戶行為分析。</li>
</ul>
<span id="more"></span>

<ul>
<li>RTB: Real Time Billing</li>
<li>CPC: Cost Per Click 每次點擊計價</li>
<li>CPM: Cost Per Mille，或者Cost Per Thousand;Cost Per Impressions，每千次展示計價</li>
<li>CPA: Cost Per Action 以實際行動效果來計算成本</li>
<li>CPS: Cost Per Sales 每次有效銷售定價</li>
<li>CPV: Cost Per View 每次觀看成本</li>
<li>AD Exchange: 網路廣告交易平台，功能就是聯繫廣告的賣方（媒體、網站主）和買方（廣告主）。Ad Exchange 平台交易的公司包括有 Yahoo、Google、The Rubicon Project、OpenX、AppNexus 等</li>
<li>AD Network: 聯播網</li>
<li>ROI: Return On Investment 每投資一塊錢所得到回饋的百分比</li>
<li>ROAS: Return On AD Spending 廣告沒投入一塊錢可獲得的營收</li>
</ul>
<hr>
<h2 id="DSP-優點"><a href="#DSP-優點" class="headerlink" title="DSP 優點"></a>DSP 優點</h2><ul>
<li>精確的受眾定向</li>
<li>簡單好用的使用者界面</li>
<li>強大的 RTB 技術</li>
<li>購買流程更快更簡單</li>
<li>整合多種服務，持續精進一站化</li>
<li>實現跨平台統一管理</li>
</ul>
<hr>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="https://goo.gl/BFs31A">關於RTB, DSP, DMP的一些小事及簡單認知</a></li>
<li><a href="https://www.bnext.com.tw/ext_rss/view/id/651447">行銷人必知！ DSP廣告平台迷思求解7大守則</a></li>
<li><a href="https://www.inside.com.tw/2016/07/01/what-is-dsp-ssp-dmp">【硬塞科技字典】什麼是 DSP 需求方平台&#x2F; SSP 供應方平台&#x2F; DMP 數據管理平台？</a></li>
<li><a href="https://www.inside.com.tw/2016/07/01/what-is-ad-exchange">【硬塞科技字典】什麼是 Ad Exchange？</a></li>
<li><a href="https://www.inside.com.tw/2014/05/30/every-local-advertiser-needs-rtb">什麼是 RTB 實時競價廣告？他將是未來趨勢！</a></li>
<li><a href="https://goo.gl/eG52L7">常見的網路廣告平台運作原理淺析</a></li>
<li><a href="https://goo.gl/FwuOx8">APP廣告、網路媒體常說到所謂的CPM、CPC、CPA、CPI到底是甚麼意思?</a></li>
</ul>
]]></content>
      <categories>
        <category>marketing</category>
      </categories>
      <tags>
        <tag>marketing</tag>
        <tag>ad keyword</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 wget 砍站</title>
    <url>/2017/2017081804-wget-download-web-pages.html</url>
    <content><![CDATA[<p>wget 是 linux 中除了 curl 外另一個檔案下載的好用工具，也可以使用它來“砍站”。<br>但是無法正確抓去使用 <code>vue-router</code> 等 js 撰寫的動態呈現網頁的內容。</p>
<span id="more"></span>

<p>用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget -m -k -E -p -F --restrict-file-names=windows -nH --header=&quot;Accept: text/html&quot; --user-agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0&quot; 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>指令說明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-m,  --mirror                相等於 -N -r -l inf --no-remove-listing 選項</span><br><span class="line">-k,  --convert-links         將原本網站內所有站內的連結全都改為 Local 連結，這樣下載網站後才可以離線使用。</span><br><span class="line">-E,  --adjust-extension      save HTML/CSS documents with proper extensions.</span><br><span class="line">-p,  --page-requisites       下載所有顯示網頁所需的檔案，例如圖片等</span><br><span class="line">-F,  --force-html            以 HTML 方式處理輸入檔</span><br><span class="line">-N,  --timestamping          除非遠端檔案比較新，否則不下載遠端檔案</span><br><span class="line">-r,  --recursive             遞迴下載</span><br><span class="line">-l,  --level=數字             最大搜尋深度 (inf 或 0 表示無限)</span><br><span class="line">--no-remove-listing          不刪除 ‘.listing’ 檔案</span><br><span class="line">--restrict-file-names=OS     只使用作業系統能夠接受的字元作為檔案字元</span><br><span class="line">-nH, --no-host-directories   不建立含有遠端主機名稱的目錄</span><br><span class="line">--header=字串                 在連線資料標頭中加入指定字串</span><br><span class="line">-U,  --user-agent=AGENT      宣稱為 AGENT 而不是 Wget/VERSION</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.gnu.org/software/wget/manual/wget.html">GNU Wget 1.18 Manual</a></li>
<li><a href="https://john24318.wordpress.com/2013/08/18/wget-%E6%8C%87%E4%BB%A4%E7%94%A8%E6%B3%95%E8%88%87%E6%95%99%E5%AD%B8/">wget 指令用法與教學</a></li>
<li><a href="https://www.lifewire.com/uses-of-command-wget-2201085">How to Use the wget Linux Command to Download Web Pages and Files</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>wget</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew 安裝 Nginx、PHP71 筆記</title>
    <url>/2017/2017082701-brew-install-nginx-php71-fpm.html</url>
    <content><![CDATA[<p>在 macOX Sierra 透過 <code>brew</code> 指令安裝 <code>php71</code>（帶有 <code>php-fpm</code>）及 <code>nginx</code>。<br>Install NGINX with PHP71 on Mac OS Sierra with Homebrew.</p>
<span id="more"></span>

<h2 id="前言-Prologue"><a href="#前言-Prologue" class="headerlink" title="前言  Prologue"></a>前言  Prologue</h2><p>臨時有需要讓 localhost 透過使用 <a href="https://ngrok.com/">ngrok</a> 的對外服務，以測試 webhook 功能，BUT nginx 就在這個時候出問題了。<br>本來以為是用了 <a href="https://laravel.com/docs/master/valet">Laravel Valet</a> 的關係，但即使是停用 Valet，修改 hosts 或重建 nginx.conf 都於事無補，只好從安裝 PHP 到 Nginx 重新做起。</p>
<h2 id="環境-Environment"><a href="#環境-Environment" class="headerlink" title="環境  Environment"></a>環境  Environment</h2><ul>
<li>macOS Sierra： 10.12.5</li>
<li>homebrew： 1.3.1</li>
</ul>
<h2 id="Install-Commandline-Tools"><a href="#Install-Commandline-Tools" class="headerlink" title="Install Commandline Tools"></a>Install Commandline Tools</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ xcode-select —install</span><br></pre></td></tr></table></figure>

<h2 id="Install-Homebrew"><a href="#Install-Homebrew" class="headerlink" title="Install Homebrew"></a>Install Homebrew</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Check-Installation"><a href="#Check-Installation" class="headerlink" title="Check Installation"></a>Check Installation</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew doctor</span><br></pre></td></tr></table></figure>

<h3 id="Update-Brew-and-Packages"><a href="#Update-Brew-and-Packages" class="headerlink" title="Update Brew and Packages"></a>Update Brew and Packages</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew update &amp;&amp; brew upgrade</span><br></pre></td></tr></table></figure>

<h3 id="Install-brew-services"><a href="#Install-brew-services" class="headerlink" title="Install brew services"></a>Install brew services</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew tap homebrew/services</span><br></pre></td></tr></table></figure>

<h2 id="安裝-DNSMasq"><a href="#安裝-DNSMasq" class="headerlink" title="安裝 DNSMasq"></a>安裝 DNSMasq</h2><p>DNSMasq is used to resolve all domains that end with .dev to 127.0.0.1.<br>DNSMasq 將 .env 結尾的網址對應到 127.0.0.1，就不需要再修改 <code>/etc/hosts</code> 檔案</p>
<h3 id="安裝-Install"><a href="#安裝-Install" class="headerlink" title="安裝  Install"></a>安裝  Install</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install dnsmasq</span><br></pre></td></tr></table></figure>

<h3 id="配置-Configure"><a href="#配置-Configure" class="headerlink" title="配置  Configure"></a>配置  Configure</h3><p>檔案 <code>/usr/local/etc/dnsmasq.conf</code> 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address=/.dev/127.0.0.1</span><br><span class="line">listen-address=127.0.0.1</span><br></pre></td></tr></table></figure>

<p>檔案 <code>/etc/resolver/dev</code> 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="start、stop、restart-DNSMasq"><a href="#start、stop、restart-DNSMasq" class="headerlink" title="start、stop、restart DNSMasq"></a><code>start</code>、<code>stop</code>、<code>restart</code> DNSMasq</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo brew services start dnsmasq</span><br><span class="line">$ sudo brew services stop dnsmasq</span><br><span class="line">$ sudo brew services restart dnsmasq</span><br></pre></td></tr></table></figure>

<h3 id="測試-Testing"><a href="#測試-Testing" class="headerlink" title="測試  Testing"></a>測試  Testing</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ dig testing.dev @127.0.0.1</span><br><span class="line">dig testing.dev @127.0.0.1</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; testing.dev @127.0.0.1</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 21966</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;testing.dev.           IN  A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">testing.dev.        0   IN  A   127.0.0.1</span><br><span class="line"></span><br><span class="line">;; Query time: 1 msec</span><br><span class="line">;; SERVER: 127.0.0.1#53(127.0.0.1)</span><br><span class="line">;; WHEN: Sun Aug 27 22:39:50 2017</span><br><span class="line">;; MSG SIZE  rcvd: 45</span><br></pre></td></tr></table></figure>



<h2 id="安裝-PHP-FPM"><a href="#安裝-PHP-FPM" class="headerlink" title="安裝 PHP-FPM"></a>安裝 PHP-FPM</h2><h3 id="Install-php71"><a href="#Install-php71" class="headerlink" title="Install php71"></a>Install php71</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew tap homebrew/dupes &amp;&amp; \</span><br><span class="line">$ brew tap homebrew/php</span><br><span class="line"></span><br><span class="line">$ brew install php71</span><br><span class="line">==&gt; Installing php71 from homebrew/php</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles-php/php71-7.1.1_12.sierra.bottle.tar.gz</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Pouring php71-7.1.1_12.sierra.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">The php.ini file can be found in:</span><br><span class="line">    /usr/local/etc/php/7.1/php.ini</span><br><span class="line"></span><br><span class="line">✩✩✩✩ Extensions ✩✩✩✩</span><br><span class="line"></span><br><span class="line">If you are having issues with custom extension compiling, ensure that</span><br><span class="line">you are using the brew version, by placing /usr/local/bin before /usr/sbin in your PATH:</span><br><span class="line"></span><br><span class="line">      PATH=&quot;/usr/local/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">PHP71 Extensions will always be compiled against this PHP. Please install them</span><br><span class="line">using --without-homebrew-php to enable compiling against system PHP.</span><br><span class="line"></span><br><span class="line">✩✩✩✩ PHP CLI ✩✩✩✩</span><br><span class="line"></span><br><span class="line">If you wish to swap the PHP you use on the command line, you should add the following to ~/.bashrc,</span><br><span class="line">~/.zshrc, ~/.profile or your shell&#x27;s equivalent configuration file:</span><br><span class="line"></span><br><span class="line">      export PATH=&quot;$(brew --prefix homebrew/php/php71)/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">✩✩✩✩ FPM ✩✩✩✩</span><br><span class="line"></span><br><span class="line">To launch php-fpm on startup:</span><br><span class="line">    mkdir -p ~/Library/LaunchAgents</span><br><span class="line">    cp /usr/local/opt/php71/homebrew.mxcl.php71.plist ~/Library/LaunchAgents/</span><br><span class="line">    launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plist</span><br><span class="line"></span><br><span class="line">The control script is located at /usr/local/opt/php71/sbin/php71-fpm</span><br><span class="line"></span><br><span class="line">OS X 10.8 and newer come with php-fpm pre-installed, to ensure you are using the brew version you need to make sure /usr/local/sbin is before /usr/sbin in your PATH:</span><br><span class="line"></span><br><span class="line">  PATH=&quot;/usr/local/sbin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">You may also need to edit the plist to use the correct &quot;UserName&quot;.</span><br><span class="line"></span><br><span class="line">Please note that the plist was called &#x27;homebrew-php.josegonzalez.php71.plist&#x27; in old versions</span><br><span class="line">of this formula.</span><br><span class="line"></span><br><span class="line">With the release of macOS Sierra the Apache module is now not built by default. If you want to build it on your system</span><br><span class="line">you have to install php with the --with-httpd24 option. See  brew options php71  for more details.</span><br><span class="line"></span><br><span class="line">To have launchd start homebrew/php/php71 now and restart at login:</span><br><span class="line">  brew services start homebrew/php/php71</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/php71/7.1.1_12: 344 files, 39.7M</span><br></pre></td></tr></table></figure>

<h3 id="配置-Configure-1"><a href="#配置-Configure-1" class="headerlink" title="配置  Configure"></a>配置  Configure</h3><p>編輯檔案 <code>/usr/local/etc/php/7.1/php-fpm.d/www.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user = YOUR_USERNAME</span><br><span class="line">group = staff</span><br></pre></td></tr></table></figure>

<h3 id="測試-Testing-1"><a href="#測試-Testing-1" class="headerlink" title="測試  Testing"></a>測試  Testing</h3><p>啟動 php-fpm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo brew services start php71</span><br></pre></td></tr></table></figure>

<p>Show running processes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -Pni4 | grep LISTEN | grep php</span><br></pre></td></tr></table></figure>


<h2 id="安裝-NGINX"><a href="#安裝-NGINX" class="headerlink" title="安裝 NGINX"></a>安裝 NGINX</h2><h3 id="Install-NGINX"><a href="#Install-NGINX" class="headerlink" title="Install NGINX"></a>Install NGINX</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew tap homebrew/nginx</span><br><span class="line"></span><br><span class="line">$ brew install nginx</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/nginx-1.12.1.sierra.bottle.tar.gz</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Pouring nginx-1.12.1.sierra.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Docroot is: /usr/local/var/www</span><br><span class="line"></span><br><span class="line">The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files in /usr/local/etc/nginx/servers/.</span><br><span class="line"></span><br><span class="line">To have launchd start nginx now and restart at login:</span><br><span class="line">  brew services start nginx</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  nginx</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/nginx/1.12.1: 23 files, 1MB</span><br></pre></td></tr></table></figure>

<h3 id="安裝測試-Testing"><a href="#安裝測試-Testing" class="headerlink" title="安裝測試  Testing"></a>安裝測試  Testing</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Start Nginx</span><br><span class="line">$ sudo brew services start nginx</span><br><span class="line"></span><br><span class="line">## Check if Nginx is running on default port</span><br><span class="line">$ curl -IL http://127.0.0.1:8080</span><br><span class="line">curl -IL http://127.0.0.1:8080</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.12.1</span><br><span class="line">Date: Sun, 27 Aug 2017 14:59:30 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 274</span><br><span class="line">Last-Modified: Sat, 26 Aug 2017 14:05:36 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59a18030-112&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>

<h3 id="Stop-Nginx"><a href="#Stop-Nginx" class="headerlink" title="Stop Nginx"></a>Stop Nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo brew services stop nginx</span><br></pre></td></tr></table></figure>

<h3 id="配置-Configure-2"><a href="#配置-Configure-2" class="headerlink" title="配置  Configure"></a>配置  Configure</h3><h4 id="建立目錄-Create-directories"><a href="#建立目錄-Create-directories" class="headerlink" title="建立目錄  Create directories"></a>建立目錄  Create directories</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /usr/local/etc/nginx/sites-available &amp;&amp; \</span><br><span class="line">$ mkdir -p /usr/local/etc/nginx/sites-enabled &amp;&amp; \</span><br><span class="line">$ mkdir -p /usr/local/etc/nginx/conf.d &amp;&amp; \</span><br><span class="line">$ mkdir -p /usr/local/etc/nginx/ssl</span><br></pre></td></tr></table></figure>

<h4 id="配置檔案-nginx-conf"><a href="#配置檔案-nginx-conf" class="headerlink" title="配置檔案 nginx.conf"></a>配置檔案 nginx.conf</h4><p>刪除預設檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm /usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>建立新檔 <code>$ vim /usr/local/etc/nginx/nginx.conf</code> 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include             mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile            on;</span><br><span class="line">    sendfile            off;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout   65;</span><br><span class="line">    keepalive_timeout   1;</span><br><span class="line"></span><br><span class="line">    index index.html index.php;</span><br><span class="line"></span><br><span class="line">    include /usr/local/etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="啟動並測試-Nginx-Start-and-Test-Nginx"><a href="#啟動並測試-Nginx-Start-and-Test-Nginx" class="headerlink" title="啟動並測試 Nginx  Start and Test Nginx"></a>啟動並測試 Nginx  Start and Test Nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Start Nginx</span><br><span class="line">$ sudo brew services start nginx</span><br><span class="line"></span><br><span class="line">## Check if Nginx is running on default port</span><br><span class="line">$ curl -IL http://localhost</span><br><span class="line">curl -IL http://localhost</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.12.1</span><br><span class="line">Date: Sun, 27 Aug 2017 15:12:35 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 274</span><br><span class="line">Last-Modified: Sat, 26 Aug 2017 14:05:36 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59a18030-112&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>



<h2 id="設定-SSL-Setup-SSL"><a href="#設定-SSL-Setup-SSL" class="headerlink" title="設定 SSL  Setup SSL"></a>設定 SSL  Setup SSL</h2><p>Generate 4096 bit RSA keys and the self-sign the certificates</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj &quot;/C=US/ST=State/L=Town/O=Office/CN=localhost&quot; -keyout /usr/local/etc/nginx/ssl/localhost.key -out /usr/local/etc/nginx/ssl/localhost.crt</span><br></pre></td></tr></table></figure>
<p>RSA keys 存放在資料夾 <code>/usr/local/etc/nginx/ssl</code></p>
<h2 id="建立-Virtual-Hosts-網站檔案"><a href="#建立-Virtual-Hosts-網站檔案" class="headerlink" title="建立 Virtual Hosts 網站檔案"></a>建立 Virtual Hosts 網站檔案</h2><p>檔案 <code>/usr/local/etc/nginx/sites-available/default</code> 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root       /YOUR/DOCUMENT/ROOT;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/default.access.log  main;</span><br><span class="line">    error_log  /var/log/nginx/default.error.log  debug;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include   /usr/local/etc/nginx/conf.d/php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /info &#123;</span><br><span class="line">        allow   127.0.0.1;</span><br><span class="line">        deny    all;</span><br><span class="line">        rewrite (.*) /.info.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404     /404.html;</span><br><span class="line">    error_page  403     /403.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>檔案 <code>/usr/local/etc/nginx/sites-available/default-ssl</code> 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root       /YOUR/DOCUMENT/ROOT;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/default-ssl.access.log  main;</span><br><span class="line">    error_log  /var/log/nginx/default-ssl.error.log  debug;</span><br><span class="line"></span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      ssl/localhost.crt;</span><br><span class="line">    ssl_certificate_key  ssl/localhost.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include   /usr/local/etc/nginx/conf.d/php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /info &#123;</span><br><span class="line">        allow   127.0.0.1;</span><br><span class="line">        deny    all;</span><br><span class="line">        rewrite (.*) /.info.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404     /404.html;</span><br><span class="line">    error_page  403     /403.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>檔案 <code>/usr/local/etc/nginx/conf.d/php-fpm</code> 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    try_files      $uri = 404;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Activate-Virtual-Hosts"><a href="#Activate-Virtual-Hosts" class="headerlink" title="Activate Virtual Hosts"></a>Activate Virtual Hosts</h3><p>在 <code>sites-enabled</code> 目錄下建立 Symbolic link。將要 enable 的 virtal host 指向 <code>sites-available</code> 目錄內的 virtal host config file。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ln -sfv /usr/local/etc/nginx/sites-available/default /usr/local/etc/nginx/sites-enabled/default</span><br><span class="line">$ ln -sfv /usr/local/etc/nginx/sites-available/default-ssl /usr/local/etc/nginx/sites-enabled/default-ssl</span><br></pre></td></tr></table></figure>

<h3 id="測試-Testing-2"><a href="#測試-Testing-2" class="headerlink" title="測試 Testing"></a>測試 Testing</h3><p>建立 <code>/YOUR/DOCUMENT/ROOT/info.php</code> 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>重新啟動 Nginx 並測試</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo brew services restart nginx</span><br><span class="line"></span><br><span class="line">$ curl -IL http://localhost/info.php</span><br><span class="line">curl -IL http://localhost/info.php</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.12.1</span><br><span class="line">Date: Sun, 27 Aug 2017 15:24:46 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/7.1.8</span><br></pre></td></tr></table></figure>


<h2 id="安裝其他-Libraries"><a href="#安裝其他-Libraries" class="headerlink" title="安裝其他 Libraries"></a>安裝其他 Libraries</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install php71-mcrypt php71-imagick</span><br></pre></td></tr></table></figure>

<p><code>brew info</code> 查看 PHP 及其相關 Libraries 的資訊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew info php71</span><br><span class="line">homebrew/php/php71: stable 7.1.8 (bottled), HEAD</span><br><span class="line">PHP Version 7.1</span><br><span class="line">https://php.net</span><br><span class="line">Conflicts with:</span><br><span class="line">  php53 (because different php versions install the same binaries.)</span><br><span class="line">  php54 (because different php versions install the same binaries.)</span><br><span class="line">  php55 (because different php versions install the same binaries.)</span><br><span class="line">  php56 (because different php versions install the same binaries.)</span><br><span class="line">  php70 (because different php versions install the same binaries.)</span><br><span class="line">  php72 (because different php versions install the same binaries.)</span><br><span class="line">/usr/local/Cellar/php71/7.1.8_20 (349 files, 39.5MB) *</span><br><span class="line">  Poured from bottle on 2017-08-26 at 16:34:27</span><br><span class="line">From: https://github.com/Homebrew/homebrew-php/blob/master/Formula/php71.rb</span><br><span class="line">==&gt; Dependencies</span><br><span class="line">Required: freetype ✔, gettext ✔, icu4c ✔, jpeg ✔, libpng ✔, libxml2 ✔, unixodbc ✔, readline ✔, openssl ✔</span><br><span class="line">Optional: enchant ✘, gmp ✘, webp ✘, homebrew/apache/httpd24 ✔, homebrew/apache/httpd22 ✘</span><br><span class="line">==&gt; Requirements</span><br><span class="line">Optional: postgresql ✘</span><br><span class="line">==&gt; Options</span><br><span class="line">--with-cgi</span><br><span class="line">	Enable building of the CGI executable (implies --without-fpm)</span><br><span class="line">--with-debug</span><br><span class="line">	Compile with debugging symbols</span><br><span class="line">--with-enchant</span><br><span class="line">	Build with enchant support</span><br><span class="line">--with-gmp</span><br><span class="line">	Build with gmp support</span><br><span class="line">--with-homebrew-curl</span><br><span class="line">	Include Curl support via Homebrew</span><br><span class="line">--with-homebrew-libressl</span><br><span class="line">	Include LibreSSL instead of OpenSSL via Homebrew</span><br><span class="line">--with-homebrew-libxml2</span><br><span class="line">	Include Libxml2 support via Homebrew</span><br><span class="line">--with-homebrew-libxslt</span><br><span class="line">	Include LibXSLT support via Homebrew</span><br><span class="line">--with-httpd22</span><br><span class="line">	Enable building of shared Apache 2.2 Handler module</span><br><span class="line">--with-httpd24</span><br><span class="line">	Enable building of shared Apache 2.4 Handler module</span><br><span class="line">--with-imap</span><br><span class="line">	Include IMAP extension</span><br><span class="line">--with-libmysql</span><br><span class="line">	Include (old-style) libmysql support instead of mysqlnd</span><br><span class="line">--with-mssql</span><br><span class="line">	Include MSSQL-DB support</span><br><span class="line">--with-pdo-oci</span><br><span class="line">	Include Oracle databases (requries ORACLE_HOME be set)</span><br><span class="line">--with-pear</span><br><span class="line">	Build with PEAR</span><br><span class="line">--with-phpdbg</span><br><span class="line">	Enable building of the phpdbg SAPI executable</span><br><span class="line">--with-postgresql</span><br><span class="line">	Build with postgresql support</span><br><span class="line">--with-thread-safety</span><br><span class="line">	Build with thread safety</span><br><span class="line">--with-webp</span><br><span class="line">	Build with webp support</span><br><span class="line">--without-bz2</span><br><span class="line">	Build without bz2 support</span><br><span class="line">--without-fpm</span><br><span class="line">	Disable building of the fpm SAPI executable</span><br><span class="line">--without-ldap</span><br><span class="line">	Build without LDAP support</span><br><span class="line">--without-legacy-mysql</span><br><span class="line">	Do not include the deprecated mysql_ functions</span><br><span class="line">--without-mysql</span><br><span class="line">	Remove MySQL/MariaDB support</span><br><span class="line">--without-pcntl</span><br><span class="line">	Build without Process Control support</span><br><span class="line">--without-unixodbc</span><br><span class="line">	Build without unixODBC support</span><br><span class="line">--HEAD</span><br><span class="line">	Install HEAD version</span><br><span class="line">==&gt; Caveats</span><br><span class="line">The php.ini file can be found in:</span><br><span class="line">    /usr/local/etc/php/7.1/php.ini</span><br><span class="line"></span><br><span class="line">✩✩✩✩ Extensions ✩✩✩✩</span><br><span class="line"></span><br><span class="line">If you are having issues with custom extension compiling, ensure that you are using the brew version, by placing /usr/local/bin before /usr/sbin in your PATH:</span><br><span class="line"></span><br><span class="line">      PATH=&quot;/usr/local/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">PHP71 Extensions will always be compiled against this PHP. Please install them using --without-homebrew-php to enable compiling against system PHP.</span><br><span class="line"></span><br><span class="line">✩✩✩✩ PHP CLI ✩✩✩✩</span><br><span class="line"></span><br><span class="line">If you wish to swap the PHP you use on the command line, you should add the following to ~/.bashrc, ~/.zshrc, ~/.profile or your shell&#x27;s equivalent configuration file:</span><br><span class="line">  export PATH=&quot;$(brew --prefix homebrew/php/php71)/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">✩✩✩✩ FPM ✩✩✩✩</span><br><span class="line"></span><br><span class="line">To launch php-fpm on startup:</span><br><span class="line">    mkdir -p ~/Library/LaunchAgents</span><br><span class="line">    cp /usr/local/opt/php71/homebrew.mxcl.php71.plist ~/Library/LaunchAgents/</span><br><span class="line">    launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plist</span><br><span class="line"></span><br><span class="line">The control script is located at /usr/local/opt/php71/sbin/php71-fpm</span><br><span class="line"></span><br><span class="line">OS X 10.8 and newer come with php-fpm pre-installed, to ensure you are using the brew version you need to make sure /usr/local/sbin is before /usr/sbin in your PATH:</span><br><span class="line"></span><br><span class="line">  PATH=&quot;/usr/local/sbin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">You may also need to edit the plist to use the correct &quot;UserName&quot;.</span><br><span class="line"></span><br><span class="line">Please note that the plist was called &#x27;homebrew-php.josegonzalez.php71.plist&#x27; in old versions of this formula.</span><br><span class="line"></span><br><span class="line">With the release of macOS Sierra the Apache module is now not built by default. If you want to build it on your system you have to install php with the --with-httpd24 option. See  brew options php71 for more details.</span><br><span class="line"></span><br><span class="line">To have launchd start homebrew/php/php71 now and restart at login:</span><br><span class="line">  brew services start homebrew/php/php71</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="後記-Epilogue"><a href="#後記-Epilogue" class="headerlink" title="後記 Epilogue"></a>後記 Epilogue</h2><p>如果 <code>$ curl -IL http://127.0.0.1:8080</code> 出現 <code>curl: (7) Failed to connect to 127.0.0.1 port 8080: Connection refused</code>，請記得檢查</p>
<ol>
<li>php-fpm 是不是啟動</li>
<li>nginx 是否有 restart</li>
<li><code>/usr/loca/etc/php/7.1/php-fpm.d/www.conf</code> 內 <code>user</code> 及 <code>group</code> 是否正確設定</li>
<li><code>/usr/local/etc/nginx/conf.d/php-fpm</code> 檔案是否建立</li>
</ol>
<hr>
<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://gist.github.com/dtomasi/ab76d14338db82ec24a1fc137caff75b">Install NGINX with PHP7-FPM on Mac OS X with Homebrew</a></li>
<li><a href="https://gist.github.com/pixeline/51c43c787f51b018d484597f30be3d2b">pixeline&#x2F;php_upgrade_to_71.sh</a></li>
</ul>
]]></content>
      <categories>
        <category>lemp</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>php71</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 EditorConfig 統一專案的 Coding Style</title>
    <url>/2017/2017082901-editorconfig-settings.html</url>
    <content><![CDATA[<p>使用 <a href="http://editorconfig.org/">EditorConfig</a> 統一專案的 Coding Style。大部分的編輯器本身或外掛都有支援 EditorConfig。</p>
<span id="more"></span>

<p>在專案根目錄下建立 <code>.editorconfig</code> 內容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">end_of_line = lf</span><br><span class="line">indent_size = 2</span><br><span class="line">indent_style = space</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line"></span><br><span class="line">[*.&#123;js,json,vue&#125;]</span><br><span class="line">indent_size = 2</span><br><span class="line">indent_style = space</span><br><span class="line"></span><br><span class="line">[*.php]</span><br><span class="line">indent_size = 4</span><br><span class="line">indent_style = space</span><br><span class="line"></span><br><span class="line">[Makefile]</span><br><span class="line">indent_size = 2</span><br><span class="line">indent_style = tab</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>coding style</tag>
        <tag>editorconfig</tag>
      </tags>
  </entry>
  <entry>
    <title>管理或分享 vs code 的 workspace extensions</title>
    <url>/2017/2017102301-vscode-workspace-recommended-extensions.html</url>
    <content><![CDATA[<p>多人開發使用 vs code 當成預設的 editor 時，透過分享 <code>Workspace Recommended Extensions</code> 的方式讓大家都使用同樣的 extension 達成開發或檢查的一致性。</p>
 <span id="more"></span>

<h2 id="列出已經安裝的-extensions"><a href="#列出已經安裝的-extensions" class="headerlink" title="列出已經安裝的 extensions"></a>列出已經安裝的 extensions</h2><p>Command line 執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ code --list-extensions</span><br></pre></td></tr></table></figure>

<p>結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2gua.rainbow-brackets</span><br><span class="line">alefragnani.project-manager</span><br><span class="line">alexdima.copy-relative-path</span><br><span class="line">apility.beautify-blade</span><br><span class="line">batisteo.vscode-django</span><br><span class="line">bmewburn.vscode-intelephense-client</span><br><span class="line">christian-kohler.npm-intellisense</span><br><span class="line">christian-kohler.path-intellisense</span><br><span class="line">cmstead.jsrefactor</span><br><span class="line">codezombiech.gitignore</span><br><span class="line">DavidAnson.vscode-markdownlint</span><br><span class="line">dbaeumer.vscode-eslint</span><br><span class="line">donjayamanne.githistory</span><br><span class="line">dracula-theme.theme-dracula</span><br><span class="line">eamodio.gitlens</span><br><span class="line">EditorConfig.EditorConfig</span><br><span class="line">eg2.vscode-npm-script</span><br><span class="line">felipecaputo.git-project-manager</span><br><span class="line">felixfbecker.php-debug</span><br><span class="line">formulahendry.auto-close-tag</span><br><span class="line">formulahendry.auto-rename-tag</span><br><span class="line">golang.Go</span><br><span class="line">henriiik.docker-linter</span><br><span class="line">HookyQR.beautify</span><br><span class="line">humao.rest-client</span><br><span class="line">janisdd.vscode-edit-csv</span><br><span class="line">JerryHong.autofilename</span><br><span class="line">joelday.docthis</span><br><span class="line">junstyle.php-cs-fixer</span><br><span class="line">magicstack.MagicPython</span><br><span class="line">marclipovsky.string-manipulation</span><br><span class="line">mikestead.dotenv</span><br><span class="line">ms-azuretools.vscode-docker</span><br><span class="line">ms-python.python</span><br><span class="line">neilbrayfield.php-docblocker</span><br><span class="line">nhoizey.gremlins</span><br><span class="line">octref.vetur</span><br><span class="line">oderwat.indent-rainbow</span><br><span class="line">odubuc.mysql-inline-decorator</span><br><span class="line">onecentlin.laravel-blade</span><br><span class="line">onecentlin.laravel5-snippets</span><br><span class="line">PKief.material-icon-theme</span><br><span class="line">quicktype.quicktype</span><br><span class="line">redhat.vscode-yaml</span><br><span class="line">richie5um2.vscode-sort-json</span><br><span class="line">robinbentley.sass-indented</span><br><span class="line">shardulm94.trailing-spaces</span><br><span class="line">shd101wyy.markdown-preview-enhanced</span><br><span class="line">SirTori.indenticator</span><br><span class="line">streetsidesoftware.code-spell-checker</span><br><span class="line">Tyriar.sort-lines</span><br><span class="line">VisualStudioExptTeam.vscodeintellicode</span><br><span class="line">vscode-icons-team.vscode-icons</span><br><span class="line">wholroyd.jinja</span><br><span class="line">wix.vscode-import-cost</span><br><span class="line">wmaurer.change-case</span><br><span class="line">wwm.better-align</span><br><span class="line">xabikos.JavaScriptSnippets</span><br><span class="line">yomed.theme-dracula-soft</span><br><span class="line">yzhang.markdown-all-in-one</span><br></pre></td></tr></table></figure>

<p>將列出的 extensions 全部複製起來，後續會用到。</p>
<h2 id="在-workspace-匯入及安裝-extensions"><a href="#在-workspace-匯入及安裝-extensions" class="headerlink" title="在 workspace 匯入及安裝 extensions"></a>在 workspace 匯入及安裝 extensions</h2><ol>
<li>打開 vs code 按下快速鍵 <code>command + shift + p</code></li>
<li>在跳出的對話框命令列後輸入或找到 <code>&gt;Extensions: Configure Recommended Extensions (Workspace Folder)</code></li>
<li>接著修改開啟的 <code>.vscode/extensions.json</code> 檔案，以 JOSN 格式編輯貼上剛才複製的 extensions<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // See http://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.</span><br><span class="line">  // Extension identifier format: $&#123;publisher&#125;.$&#123;name&#125;. Example: vscode.csharp</span><br><span class="line">  // List of extensions which should be recommended for users of this workspace.</span><br><span class="line">  &quot;recommendations&quot;: [</span><br><span class="line">    &quot;2gua.rainbow-brackets&quot;,</span><br><span class="line">    &quot;alefragnani.project-manager&quot;,</span><br><span class="line">    &quot;alexdima.copy-relative-path&quot;,</span><br><span class="line">    &quot;apility.beautify-blade&quot;,</span><br><span class="line">    &quot;batisteo.vscode-django&quot;,</span><br><span class="line">    &quot;bmewburn.vscode-intelephense-client&quot;,</span><br><span class="line">    &quot;christian-kohler.npm-intellisense&quot;,</span><br><span class="line">    &quot;christian-kohler.path-intellisense&quot;,</span><br><span class="line">    &quot;cmstead.jsrefactor&quot;,</span><br><span class="line">    &quot;codezombiech.gitignore&quot;,</span><br><span class="line">    &quot;DavidAnson.vscode-markdownlint&quot;,</span><br><span class="line">    &quot;dbaeumer.vscode-eslint&quot;,</span><br><span class="line">    &quot;donjayamanne.githistory&quot;,</span><br><span class="line">    &quot;dracula-theme.theme-dracula&quot;,</span><br><span class="line">    &quot;eamodio.gitlens&quot;,</span><br><span class="line">    &quot;EditorConfig.EditorConfig&quot;,</span><br><span class="line">    &quot;eg2.vscode-npm-script&quot;,</span><br><span class="line">    &quot;felipecaputo.git-project-manager&quot;,</span><br><span class="line">    &quot;felixfbecker.php-debug&quot;,</span><br><span class="line">    &quot;formulahendry.auto-close-tag&quot;,</span><br><span class="line">    &quot;formulahendry.auto-rename-tag&quot;,</span><br><span class="line">    &quot;golang.Go&quot;,</span><br><span class="line">    &quot;henriiik.docker-linter&quot;,</span><br><span class="line">    &quot;HookyQR.beautify&quot;,</span><br><span class="line">    &quot;humao.rest-client&quot;,</span><br><span class="line">    &quot;janisdd.vscode-edit-csv&quot;,</span><br><span class="line">    &quot;JerryHong.autofilename&quot;,</span><br><span class="line">    &quot;joelday.docthis&quot;,</span><br><span class="line">    &quot;junstyle.php-cs-fixer&quot;,</span><br><span class="line">    &quot;magicstack.MagicPython&quot;,</span><br><span class="line">    &quot;marclipovsky.string-manipulation&quot;,</span><br><span class="line">    &quot;mikestead.dotenv&quot;,</span><br><span class="line">    &quot;ms-azuretools.vscode-docker&quot;,</span><br><span class="line">    &quot;ms-python.python&quot;,</span><br><span class="line">    &quot;neilbrayfield.php-docblocker&quot;,</span><br><span class="line">    &quot;nhoizey.gremlins&quot;,</span><br><span class="line">    &quot;octref.vetur&quot;,</span><br><span class="line">    &quot;oderwat.indent-rainbow&quot;,</span><br><span class="line">    &quot;odubuc.mysql-inline-decorator&quot;,</span><br><span class="line">    &quot;onecentlin.laravel-blade&quot;,</span><br><span class="line">    &quot;onecentlin.laravel5-snippets&quot;,</span><br><span class="line">    &quot;PKief.material-icon-theme&quot;,</span><br><span class="line">    &quot;quicktype.quicktype&quot;,</span><br><span class="line">    &quot;redhat.vscode-yaml&quot;,</span><br><span class="line">    &quot;richie5um2.vscode-sort-json&quot;,</span><br><span class="line">    &quot;robinbentley.sass-indented&quot;,</span><br><span class="line">    &quot;shardulm94.trailing-spaces&quot;,</span><br><span class="line">    &quot;shd101wyy.markdown-preview-enhanced&quot;,</span><br><span class="line">    &quot;SirTori.indenticator&quot;,</span><br><span class="line">    &quot;streetsidesoftware.code-spell-checker&quot;,</span><br><span class="line">    &quot;Tyriar.sort-lines&quot;,</span><br><span class="line">    &quot;VisualStudioExptTeam.vscodeintellicode&quot;,</span><br><span class="line">    &quot;vscode-icons-team.vscode-icons&quot;,</span><br><span class="line">    &quot;wholroyd.jinja&quot;,</span><br><span class="line">    &quot;wix.vscode-import-cost&quot;,</span><br><span class="line">    &quot;wmaurer.change-case&quot;,</span><br><span class="line">    &quot;wwm.better-align&quot;,</span><br><span class="line">    &quot;xabikos.JavaScriptSnippets&quot;,</span><br><span class="line">    &quot;yomed.theme-dracula-soft&quot;,</span><br><span class="line">    &quot;yzhang.markdown-all-in-one&quot;</span><br><span class="line">  ],</span><br><span class="line">  // List of extensions recommended by VS Code that should not be recommended for users of this workspace.</span><br><span class="line">  &quot;unwantedRecommendations&quot;: [</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安裝-Recommended-Extensions"><a href="#安裝-Recommended-Extensions" class="headerlink" title="安裝 Recommended Extensions"></a>安裝 Recommended Extensions</h3><p>點擊左側 <code>EXPLOER</code> 選單 ICON 的 <code>Extensions</code>（或快速鍵 <code>shift + command + x</code>），在展開的清單視窗右上角點擊 <code>...</code> 圖示，選取 <code>Show Recommended Extensions</code>，然後挑選想要的 extension 進行安裝。也可以全部安裝後，再把不想使用的 extension disable :)</p>
<h3 id="設定-Workspace-Settings"><a href="#設定-Workspace-Settings" class="headerlink" title="設定 Workspace Settings"></a>設定 Workspace Settings</h3><ol>
<li>打開 vs code 按下快速鍵 <code>command + shift + p</code></li>
<li>在跳出的對話框命令列後輸入或找到 <code>&gt;Preferences: Open User Settings</code></li>
<li>點擊搜尋列下方的 <code>...</code> 圖示，並選取 「Open settings.json」，即可進行編輯</li>
</ol>
<h3 id="Extensions-的安裝路徑"><a href="#Extensions-的安裝路徑" class="headerlink" title="Extensions 的安裝路徑"></a>Extensions 的安裝路徑</h3><ul>
<li><strong>Windows</strong> <code>%USERPROFILE%\.vscode\extensions</code></li>
<li><strong>Mac</strong> <code>~/.vscode/extensions</code></li>
<li><strong>Linux</strong> <code>~/.vscode/extensions</code></li>
</ul>
<h2 id="設定-User-Settings"><a href="#設定-User-Settings" class="headerlink" title="設定 User Settings"></a>設定 User Settings</h2><ol>
<li>打開 vs code 按下快速鍵 <code>command + shift + p</code></li>
<li>在跳出的對話框命令列後輸入或找到 <code>&gt;Preferences: Open User Settings</code></li>
<li>點擊搜尋列下方的 <code>...</code> 圖示，並選取 「Open settings.json」，貼上下列內容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;auto-rename-tag.activationOnLanguage&quot;: [</span><br><span class="line">        &quot;html&quot;,</span><br><span class="line">        &quot;xml&quot;,</span><br><span class="line">        &quot;php&quot;,</span><br><span class="line">        &quot;javascript&quot;,</span><br><span class="line">        &quot;vue&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;editor.formatOnSave&quot;: false,</span><br><span class="line">    &quot;editor.minimap.enabled&quot;: false,</span><br><span class="line">    &quot;editor.minimap.renderCharacters&quot;: false,</span><br><span class="line">    &quot;editor.rulers&quot;: [</span><br><span class="line">        80,</span><br><span class="line">        120</span><br><span class="line">    ],</span><br><span class="line">    &quot;gitlens.advanced.messages&quot;: &#123;</span><br><span class="line">        &quot;suppressShowKeyBindingsNotice&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;prettier.singleQuote&quot;: true,</span><br><span class="line">    &quot;todo-tree.customHighlight&quot;: &#123;</span><br><span class="line">        &quot;FIXME&quot;: &#123;&#125;,</span><br><span class="line">        &quot;TODO&quot;: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;todo-tree.defaultHighlight&quot;: &#123;</span><br><span class="line">        &quot;foreground&quot;: &quot;green&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;none&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;todohighlight.include&quot;: [</span><br><span class="line">        &quot;**/*.js&quot;,</span><br><span class="line">        &quot;**/*.jsx&quot;,</span><br><span class="line">        &quot;**/*.ts&quot;,</span><br><span class="line">        &quot;**/*.tsx&quot;,</span><br><span class="line">        &quot;**/*.html&quot;,</span><br><span class="line">        &quot;**/*.php&quot;,</span><br><span class="line">        &quot;**/*.css&quot;,</span><br><span class="line">        &quot;**/*.scss&quot;,</span><br><span class="line">        &quot;**/*.cs&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;workbench.colorTheme&quot;: &quot;Dracula Soft&quot;,</span><br><span class="line">    &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://code.visualstudio.com/docs/editor/extension-gallery#_command-line-extension-management">Command line extension management</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/extension-gallery#_workspace-recommended-extensions">Workspace Recommended Extensions</a></li>
<li><a href="http://www.css88.com/archives/9507">使用顶级 VSCode 扩展来加快开发 JavaScript</a></li>
<li><a href="https://gist.github.com/doggy8088/6539a140f28924d3a1f053a8d3a9f49e">Will 保哥的 VSCode 使用者設定檔</a></li>
</ul>
]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>extensions</tag>
      </tags>
  </entry>
  <entry>
    <title>在 vs code 使用 php cs fixer 進行 coding style 的格式修正</title>
    <url>/2017/2017102302-vscode-extension-php-cs-fixer.html</url>
    <content><![CDATA[<p>在 vs code 中，使用 PSR1、PSR2 及 Symfony 的 Coding Style 進行格式修正。</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ol>
<li><p>在 command line 使用 homebrew 安裝 php cs fixer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install php-cs-fixer</span><br></pre></td></tr></table></figure>
 <span id="more"></span>
</li>
<li><p>在 vs code 安裝 extension - 由 junstyle 開發的 php cs fixer，extension_id <code>junstyle.php-cs-fixer</code></p>
</li>
<li><p>其他安裝方式可參考 <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer#installation">Install guide</a></p>
</li>
</ol>
<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><ol>
<li><p>快速鍵 <code>cmd + shift + p</code> 後輸入 <code>workspace settings</code> 貼上</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;php.suggest.basic&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php.validate.executablePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;php&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.executablePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;php-cs-fixer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.executablePathWindows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>   <span class="comment">//eg: php-cs-fixer.bat</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.onsave&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.rules&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.php_cs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.allowRisky&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.pathMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;override&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.autoFixByBracket&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.autoFixBySemicolon&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.formatHtml&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;php-cs-fixer.documentFormattingProvider&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> 說明：</p>
<ul>
<li><code>&quot;php-cs-fixer.onsave&quot;: true,</code>: true 為存檔時即執行。我個人習慣是設定成 false，在確定程式沒問題後才執行檢查，因此必須按右鍵，再從選單中點擊「Format Document」進行檢查。</li>
<li><code>&quot;php-cs-fixer.rules&quot;: &quot;&quot;,</code>: 留空字串</li>
<li><code>&quot;php-cs-fixer.config&quot;: &quot;.php_cs&quot;,</code>: 使用 project root path 下的 config file 最為 formating 基準</li>
</ul>
</li>
<li><p>在 project root 新增檔案 <code>.php_cs</code>，內容如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$header</span> = &lt;&lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">This file is part of PHP CS Fixer.</span><br><span class="line"></span><br><span class="line">(c) Fabien Potencier &lt;fabien@symfony.com&gt;</span><br><span class="line">    Dariusz Rumiński &lt;dariusz.ruminski@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">This source file is subject to the MIT license that is bundled</span><br><span class="line">with this source code in the file LICENSE.</span><br><span class="line">EOF;</span><br><span class="line"></span><br><span class="line"><span class="variable">$finder</span> = <span class="title class_">PhpCsFixer\Finder</span>::<span class="title function_ invoke__">create</span>()</span><br><span class="line">    -&gt;<span class="title function_ invoke__">exclude</span>(<span class="string">&#x27;tests/Fixtures&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">in</span>(<span class="keyword">__DIR__</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="variable">$config</span> = <span class="title class_">PhpCsFixer\Config</span>::<span class="title function_ invoke__">create</span>()</span><br><span class="line">    -&gt;<span class="title function_ invoke__">setRiskyAllowed</span>(<span class="literal">true</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">setRules</span>([</span><br><span class="line">        <span class="string">&#x27;@PHP56Migration&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@PHPUnit60Migration:risky&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@PSR1&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@PSR2&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@Symfony&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@Symfony:risky&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;align_multiline_comment&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;array_indentation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;array_syntax&#x27;</span> =&gt; [<span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;short&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;blank_line_before_statement&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;binary_operator_spaces&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;align_double_arrow&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;align_equals&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;combine_consecutive_issets&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;combine_consecutive_unsets&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;comment_to_phpdoc&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;compact_nullable_typehint&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;concat_space&#x27;</span> =&gt; [<span class="string">&#x27;spacing&#x27;</span> =&gt; <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;escape_implicit_backslashes&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;explicit_indirect_variable&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;explicit_string_variable&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;final_internal_class&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;fully_qualified_strict_types&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;function_to_constant&#x27;</span> =&gt; [<span class="string">&#x27;functions&#x27;</span> =&gt; [<span class="string">&#x27;get_class&#x27;</span>, <span class="string">&#x27;get_called_class&#x27;</span>, <span class="string">&#x27;php_sapi_name&#x27;</span>, <span class="string">&#x27;phpversion&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>]],</span><br><span class="line">        //<span class="string">&#x27;header_comment&#x27;</span> =&gt; [<span class="string">&#x27;header&#x27;</span> =&gt; <span class="variable">$header</span>],</span><br><span class="line">        <span class="string">&#x27;heredoc_to_nowdoc&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;increment_style&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;list_syntax&#x27;</span> =&gt; [<span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;short&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;logical_operators&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;method_argument_space&#x27;</span> =&gt; [<span class="string">&#x27;on_multiline&#x27;</span> =&gt; <span class="string">&#x27;ensure_fully_multiline&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;method_chaining_indentation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;multiline_comment_opening_closing&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_alternative_syntax&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_binary_string&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_extra_blank_lines&#x27;</span> =&gt; [<span class="string">&#x27;tokens&#x27;</span> =&gt; [<span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;extra&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;throw&#x27;</span>, <span class="string">&#x27;use&#x27;</span>, <span class="string">&#x27;parenthesis_brace_block&#x27;</span>, <span class="string">&#x27;square_brace_block&#x27;</span>, <span class="string">&#x27;curly_brace_block&#x27;</span>]],</span><br><span class="line">        <span class="string">&#x27;no_null_property_initialization&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_short_echo_tag&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_superfluous_elseif&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_unneeded_curly_braces&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_unneeded_final_method&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_unreachable_default_argument_value&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_unset_on_property&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_useless_else&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_useless_return&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;ordered_class_elements&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;ordered_imports&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_internal_class&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_ordered_covers&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_set_up_tear_down_visibility&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_strict&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_test_annotation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_test_case_static_method_calls&#x27;</span> =&gt; [<span class="string">&#x27;call_type&#x27;</span> =&gt; <span class="string">&#x27;this&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;php_unit_test_class_requires_covers&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;phpdoc_add_missing_param_annotation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;phpdoc_order&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;phpdoc_trim_consecutive_blank_line_separation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;phpdoc_types_order&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;return_assignment&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;semicolon_after_instruction&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;single_line_comment_style&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;strict_comparison&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;strict_param&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;string_line_ending&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;ternary_operator_spaces&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;trim_array_spaces&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;unary_operator_spaces&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;yoda_style&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;whitespace_after_comma_in_array&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    ])</span><br><span class="line">    -&gt;<span class="title function_ invoke__">setFinder</span>(<span class="variable">$finder</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// special handling of fabbot.io service if it&#x27;s using too old PHP CS Fixer version</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> !== <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FABBOT_IO&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">PhpCsFixer\FixerFactory</span>::<span class="title function_ invoke__">create</span>()</span><br><span class="line">            -&gt;<span class="title function_ invoke__">registerBuiltInFixers</span>()</span><br><span class="line">            -&gt;<span class="title function_ invoke__">registerCustomFixers</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">getCustomFixers</span>())</span><br><span class="line">            -&gt;<span class="title function_ invoke__">useRuleSet</span>(<span class="keyword">new</span> <span class="title class_">PhpCsFixer\RuleSet</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">getRules</span>()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PhpCsFixer\ConfigurationException\InvalidConfigurationException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$config</span>-&gt;<span class="title function_ invoke__">setRules</span>([]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">UnexpectedValueException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$config</span>-&gt;<span class="title function_ invoke__">setRules</span>([]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$config</span>-&gt;<span class="title function_ invoke__">setRules</span>([]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$config</span>;</span><br></pre></td></tr></table></figure>

<p> 說明：</p>
<ul>
<li>加入 <code>&#39;@PSR1&#39; =&gt; true,</code> 及 <code>&#39;@Symfony&#39; =&gt; true,</code></li>
</ul>
</li>
<li><p>重新啟動 vs code（建議使用 <code>cmd + Q</code>，再重新啟動）</p>
</li>
<li><p>編輯檔案後存檔，即自動執行 php-cs-fixer 進行 coding style 修正</p>
</li>
</ol>
]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>coding style</tag>
        <tag>extensions</tag>
        <tag>php cs fixer</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose 開發環境，如何建立 storage 的 symbolic link？</title>
    <url>/2017/2017110701-create-laravel-storage-symbolic-link-docker.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>團隊使用 <code>docker-compose</code> 建立開發環境，方便前端工程師在不安裝 PHP 及 MySQL 的情況下也可以進行基於 Laravel framework 的專案開發。<br>但問題剛好發生在使用 <a href="https://laravel.com/docs/5.5/filesystem">Laravel File Storage</a> 存放的圖片檔，無法通過 Browser 瀏覽。查到的原因是 <a href="https://laravel.com/docs/5.5/filesystem#configuration"><code>storage</code></a> 這個 symbolic link 的指向錯誤了。<br>目前找到的解法是手動進入到 docker 的 nginx container 後再建立。而<strong>不是</strong>直接使用 <code>$ php artisan storage:link</code></p>
 <span id="more"></span>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><ol>
<li><p>移除工作目錄下的 <code>public/storage</code> 這個 symbolic link</p>
</li>
<li><p>找到 docker 的 nginx 容器 CONTAINER ID</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">baba480659ee        nginx:latest                    &quot;nginx -g &#x27;daemon ...&quot;   16 minutes ago      Up 16 minutes       0.0.0.0:80-&gt;80/tcp       hpclaravelpaganinipluscom_web_1</span><br></pre></td></tr></table></figure>
</li>
<li><p>進入 docker 的 nginx 容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo docker exec -ti &#123;CONTAINER ID&#125; bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 docker 的 nginx 容器執行 symbolic link 的建立</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ln -s /code/storage/app/public /code/public/storage</span><br></pre></td></tr></table></figure>
</li>
<li><p>檢查建立的結果是否正確</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">drwxr-xr-x 13 root root  442 Nov  7 06:28 assets</span><br><span class="line">drwxr-xr-x 24 root root  816 Oct 26 04:08 css</span><br><span class="line">-rw-r--r--  1 root root 5430 Oct 26 04:08 favicon.ico</span><br><span class="line">drwxr-xr-x 13 root root  442 Nov  7 04:49 images</span><br><span class="line">-rw-r--r--  1 root root 1823 Sep 19 04:07 index.php</span><br><span class="line">drwxr-xr-x  6 root root  204 Oct 26 04:08 js</span><br><span class="line">-rw-r--r--  1 root root   24 Sep 19 04:07 robots.txt</span><br><span class="line">lrwxrwxrwx  1 root root   24 Nov  7 06:31 storage -&gt; /code/storage/app/public</span><br><span class="line">drwxr-xr-x 10 root root  340 Oct 26 04:08 vendor</span><br><span class="line">-rw-r--r--  1 root root  914 Sep 19 04:07 web.config</span><br><span class="line">drwxr-xr-x  5 root root  170 Nov  7 01:32 yaml</span><br></pre></td></tr></table></figure>
</li>
<li><p>Browser 開啟圖片網站，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/storage/4BWGjwW0p6iENjseaHZphhorGBUJTPkd888oiMNh.jpeg</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="參考資料-References"><a href="#參考資料-References" class="headerlink" title="參考資料  References"></a>參考資料  References</h2><ul>
<li><a href="https://laravel.com/docs/5.5/filesystem">Laravel File Storage</a></li>
<li><a href="https://philipzheng.gitbooks.io/docker_practice/content/container/enter.html">《Docker —— 從入門到實踐》正體中文版 - 進入容器</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/exec/#run-docker-exec-on-a-running-container">docker docs - Run docker exec on a running container</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在 VS code 設定 go linter</title>
    <url>/2022/2022090601-golang-linter-in-vscode.html</url>
    <content><![CDATA[<p>在 VS code 撰寫 <code>go</code> 程式的過程中，要檢查是否符合 coding style，以及提醒哪些變數或參數有定義卻沒使用，設定好 go linter 就沒有煩惱。</p>
<span id="more"></span>

<h2 id="1-環境-Environment"><a href="#1-環境-Environment" class="headerlink" title="1. 環境  Environment"></a>1. 環境  Environment</h2><ul>
<li>macOS 12.5.1</li>
<li>Visual Studio Code v1.71.0</li>
<li>go v1.18</li>
</ul>
<h2 id="2-開始設定-Configuration"><a href="#2-開始設定-Configuration" class="headerlink" title="2. 開始設定  Configuration"></a>2. 開始設定  Configuration</h2><h3 id="2-1-安裝-Extension"><a href="#2-1-安裝-Extension" class="headerlink" title="2.1. 安裝 Extension"></a>2.1. 安裝 Extension</h3><p>在 VS code 安裝 Extension: Go</p>
<p><img src="/uploads/2022/090501_01.extension_go.png" alt="extension go"></p>
<h3 id="2-2-安裝-Go-tools"><a href="#2-2-安裝-Go-tools" class="headerlink" title="2.2. 安裝 Go tools"></a>2.2. 安裝 Go tools</h3><p>按下 <code>cmd + shift + p</code> 開啟 Command Palette，並且輸入 <code>go install</code> 後選取 <code>Go: Install/Update Tools</code><br><img src="/uploads/2022/090501_02.go_install.png" alt="go install"></p>
<p>選取 <code>staticcheck</code> 及 <code>gopls</code> 後，按下 <code>OK</code> 即開始安裝。<br><img src="/uploads/2022/090501_03.install_tools.png" alt="install tools"></p>
<h3 id="2-3-設定參數"><a href="#2-3-設定參數" class="headerlink" title="2.3. 設定參數"></a>2.3. 設定參數</h3><blockquote>
<p>注意：完成下列的設定，一定要關閉 VS code 再重新開啟，才不會有怪怪的問題出現。</p>
</blockquote>
<p>按下 <code>cmd + shift + p</code> 開啟 Command Palette，並且輸入 <code>user</code> 後選取 <code>Preferences: Open User Settings (JSON)</code><br><img src="/uploads/2022/090501_04.user_settings.png" alt="open user settings"></p>
<p>在 <code>settings.json</code> 檔案內貼上</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;go.lintFlags&quot;: [&quot;-checks&quot;, &quot;all&quot;],</span></span><br><span class="line"><span class="attr">&quot;gopls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyses&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ST1003&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ST1016&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ST1020&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ST1021&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ST1022&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unusedparams&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;formatting.gofumpt&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;staticcheck&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;ui.diagnostic.analyses&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//   &quot;unusedparams&quot;: true</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">&quot;ui.semanticTokens&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ui.completion.usePlaceholders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>只要開啟 <code>.go</code> 檔案，就會連相同 package 的檔案一同檢查，可以看到 warning 如下圖，<br><img src="/uploads/2022/090501_05.warnings.png" alt="check results"></p>
<p>如果不想這麼自動的檢查，可以在 <code>settings.json</code> 改貼上，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;go.lintFlags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-checks&quot;</span><span class="punctuation">,</span> <span class="string">&quot;all&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gopls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// &quot;analyses&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//   &quot;ST1003&quot;: true,</span></span><br><span class="line">  <span class="comment">//   &quot;ST1016&quot;: true,</span></span><br><span class="line">  <span class="comment">//   &quot;ST1020&quot;: true,</span></span><br><span class="line">  <span class="comment">//   &quot;ST1021&quot;: true,</span></span><br><span class="line">  <span class="comment">//   &quot;ST1022&quot;: true,</span></span><br><span class="line">  <span class="comment">//   &quot;unusedparams&quot;: true</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">&quot;formatting.gofumpt&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;staticcheck&quot;: true,</span></span><br><span class="line">  <span class="attr">&quot;ui.diagnostic.analyses&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;unusedparams&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ui.semanticTokens&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ui.completion.usePlaceholders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>此時要檢查 <code>User Settings</code> 的 <code>Go: Lint Tool</code> 及 <code>Go: Lint Flags</code> 是否設定正確。<br><img src="/uploads/2022/090501_06.lint_tool_settings.png" alt="lint tool - staticcheck"></p>
<p>按下 <code>cmd + shift + p</code> 開啟 Command Palette，並且輸入 <code>lint</code> 後選取 <code>Go: Lint Current Package</code> （也可以選擇 <code>Go: Lint Workspace</code>）就可以看檢查的結果了<br><img src="/uploads/2022/090501_07.execute_lint.png" alt="lint tool - staticcheck"></p>
<p>真心推薦 <a href="https://www.jetbrains.com/go/">Goland</a>，不要做任何設定 ( ^.＜ )</p>
<h2 id="3-參考資料-References"><a href="#3-參考資料-References" class="headerlink" title="3. 參考資料  References"></a>3. 參考資料  References</h2><ul>
<li><a href="https://code.visualstudio.com/docs/languages/go">Go in Visual Studio Code</a></li>
<li><a href="https://qiita.com/yagi_eng/items/1c34f9691128c51846e7">【Go】デファクトなlinter staticcheckの設定方法</a></li>
<li><a href="https://scrapbox.io/kidaaam-92022284/go_staticcheck_%E3%81%AE%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E7%84%A1%E5%8A%B9%E3%81%AA%E9%A0%85%E7%9B%AE%E3%82%92%E4%B8%80%E9%83%A8%E6%9C%89%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B">go staticcheck のデフォルト無効な項目を一部有効化する</a></li>
<li><a href="https://stackoverflow.com/questions/58018729/go-linter-in-vs-code-not-working-for-packages-across-multiple-files">Go linter in VS code not working for packages across multiple files?</a></li>
<li><a href="https://github.com/golang/vscode-go/discussions/1493">How to enable a check for staticcheck? #1493</a></li>
<li><a href="https://staticcheck.io/docs/checks#ST1020">STATICCHECK - Explanations for all checks in Staticcheck</a></li>
</ul>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>coding style</tag>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
