<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在 vs code 使用 php cs fixer 進行 coding style formating]]></title>
    <url>%2F2017%2F10%2F23%2F2017102302-vscode-extension-php-cs-fixer%2F</url>
    <content type="text"><![CDATA[安裝 在 command line 使用 homebrew 安裝 php cs fixer 1$ brew install php-cs-fixer 在 vs code 安裝 extension - 由 junstyle 開發的 php cs fixerInstall guide 設定 快速鍵 cmd + shift + p 後輸入 workspace settings 貼上 12345678910111213&#123; &quot;php.executablePath&quot;: &quot;/usr/local/bin/php&quot;, &quot;php-cs-fixer.executablePath&quot;: &quot;php-cs-fixer&quot;, &quot;php-cs-fixer.executablePathWindows&quot;: &quot;&quot;, //eg: php-cs-fixer.bat &quot;php-cs-fixer.onsave&quot;: true, &quot;php-cs-fixer.rules&quot;: &quot;&quot;, &quot;php-cs-fixer.config&quot;: &quot;.php_cs&quot;, &quot;php-cs-fixer.autoFixByBracket&quot;: true, &quot;php-cs-fixer.autoFixBySemicolon&quot;: false, &quot;php-cs-fixer.formatHtml&quot;: false, &quot;php-cs-fixer.documentFormattingProvider&quot;: true, &quot;php-cs-fixer.allowRisky&quot;: false&#125; 說明： &quot;php-cs-fixer.onsave&quot;: true,: 存檔時即執行 &quot;php-cs-fixer.rules&quot;: &quot;&quot;,: 留空字串 &quot;php-cs-fixer.config&quot;: &quot;.php_cs&quot;,: 使用 project root path 下的 config file 最為 formating 基準 在 project root 新增檔案 .php_cs，內容如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;?phpreturn PhpCsFixer\Config::create() -&gt;setRules(array( &apos;@PSR1&apos; =&gt; true, &apos;@PSR2&apos; =&gt; true, &apos;@Symfony&apos; =&gt; true, &apos;array_syntax&apos; =&gt; array(&apos;syntax&apos; =&gt; &apos;short&apos;), &apos;combine_consecutive_unsets&apos; =&gt; true, &apos;method_separation&apos; =&gt; true, &apos;no_multiline_whitespace_before_semicolons&apos; =&gt; true, &apos;single_quote&apos; =&gt; true, &apos;binary_operator_spaces&apos; =&gt; array( &apos;align_double_arrow&apos; =&gt; false, &apos;align_equals&apos; =&gt; false, ), // &apos;blank_line_after_opening_tag&apos; =&gt; true, // &apos;blank_line_before_return&apos; =&gt; true, &apos;braces&apos; =&gt; array( &apos;allow_single_line_closure&apos; =&gt; true, ), // &apos;cast_spaces&apos; =&gt; true, // &apos;class_definition&apos; =&gt; array(&apos;singleLine&apos; =&gt; true), &apos;concat_space&apos; =&gt; array(&apos;spacing&apos; =&gt; &apos;one&apos;), &apos;declare_equal_normalize&apos; =&gt; true, &apos;function_typehint_space&apos; =&gt; true, &apos;hash_to_slash_comment&apos; =&gt; true, &apos;include&apos; =&gt; true, &apos;lowercase_cast&apos; =&gt; true, // &apos;native_function_casing&apos; =&gt; true, // &apos;new_with_braces&apos; =&gt; true, // &apos;no_blank_lines_after_class_opening&apos; =&gt; true, // &apos;no_blank_lines_after_phpdoc&apos; =&gt; true, // &apos;no_empty_comment&apos; =&gt; true, // &apos;no_empty_phpdoc&apos; =&gt; true, // &apos;no_empty_statement&apos; =&gt; true, &apos;no_extra_consecutive_blank_lines&apos; =&gt; array( &apos;curly_brace_block&apos;, &apos;extra&apos;, &apos;parenthesis_brace_block&apos;, &apos;square_brace_block&apos;, &apos;throw&apos;, &apos;use&apos;, ), // &apos;no_leading_import_slash&apos; =&gt; true, // &apos;no_leading_namespace_whitespace&apos; =&gt; true, // &apos;no_mixed_echo_print&apos; =&gt; array(&apos;use&apos; =&gt; &apos;echo&apos;), &apos;no_multiline_whitespace_around_double_arrow&apos; =&gt; true, // &apos;no_short_bool_cast&apos; =&gt; true, // &apos;no_singleline_whitespace_before_semicolons&apos; =&gt; true, &apos;no_spaces_around_offset&apos; =&gt; true, // &apos;no_trailing_comma_in_list_call&apos; =&gt; true, // &apos;no_trailing_comma_in_singleline_array&apos; =&gt; true, // &apos;no_unneeded_control_parentheses&apos; =&gt; true, // &apos;no_unused_imports&apos; =&gt; true, &apos;no_whitespace_before_comma_in_array&apos; =&gt; true, &apos;no_whitespace_in_blank_line&apos; =&gt; true, // &apos;normalize_index_brace&apos; =&gt; true, &apos;object_operator_without_whitespace&apos; =&gt; true, // &apos;php_unit_fqcn_annotation&apos; =&gt; true, // &apos;phpdoc_align&apos; =&gt; true, // &apos;phpdoc_annotation_without_dot&apos; =&gt; true, // &apos;phpdoc_indent&apos; =&gt; true, // &apos;phpdoc_inline_tag&apos; =&gt; true, // &apos;phpdoc_no_access&apos; =&gt; true, // &apos;phpdoc_no_alias_tag&apos; =&gt; true, // &apos;phpdoc_no_empty_return&apos; =&gt; true, // &apos;phpdoc_no_package&apos; =&gt; true, // &apos;phpdoc_no_useless_inheritdoc&apos; =&gt; true, // &apos;phpdoc_return_self_reference&apos; =&gt; true, // &apos;phpdoc_scalar&apos; =&gt; true, // &apos;phpdoc_separation&apos; =&gt; true, // &apos;phpdoc_single_line_var_spacing&apos; =&gt; true, // &apos;phpdoc_summary&apos; =&gt; true, // &apos;phpdoc_to_comment&apos; =&gt; true, // &apos;phpdoc_trim&apos; =&gt; true, // &apos;phpdoc_types&apos; =&gt; true, // &apos;phpdoc_var_without_name&apos; =&gt; true, // &apos;pre_increment&apos; =&gt; true, // &apos;return_type_declaration&apos; =&gt; true, // &apos;self_accessor&apos; =&gt; true, // &apos;short_scalar_cast&apos; =&gt; true, &apos;single_blank_line_before_namespace&apos; =&gt; true, // &apos;single_class_element_per_statement&apos; =&gt; true, // &apos;space_after_semicolon&apos; =&gt; true, // &apos;standardize_not_equals&apos; =&gt; true, &apos;ternary_operator_spaces&apos; =&gt; true, // &apos;trailing_comma_in_multiline_array&apos; =&gt; true, &apos;trim_array_spaces&apos; =&gt; true, &apos;unary_operator_spaces&apos; =&gt; true, &apos;whitespace_after_comma_in_array&apos; =&gt; true, )) //-&gt;setIndent(&quot;\t&quot;) -&gt;setLineEnding(&quot;\n&quot;); 說明： 加入 &#39;@PSR1&#39; =&gt; true, 及 &#39;@Symfony&#39; =&gt; true, 重新啟動 vs code（建議使用 cmd + Q，再重新啟動） 編輯檔案後存檔，即自動執行 php-cs-fixer 進行 coding style 修正]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>coding style</tag>
        <tag>vscode</tag>
        <tag>extensions</tag>
        <tag>php cs fixer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理或分享 vs code 的 workspace extensions]]></title>
    <url>%2F2017%2F10%2F23%2F2017102301-vscode-workspace-recommended-extensions%2F</url>
    <content type="text"><![CDATA[多人開發使用 vs code 當成預設的 editor 時，透過分享 Workspace Recommended Extensions 的方式讓大家都使用同樣的 extension 達成開發或檢查的一致性。 列出已經安裝的 extensionsCommand line 執行1$ code --list-extensions 結果 12345678910111213141516171819202122232425262728293031323334353637383940414243444546DavidAnson.vscode-markdownlintEditorConfig.EditorConfigHookyQR.beautifyHvyIndustries.craneJerryHong.autofilenamePeterJausovec.vscode-dockerTyriar.sort-linesalefragnani.Bookmarksalefragnani.project-manageralexdima.copy-relative-pathbmewburn.vscode-intelephense-clientchristian-kohler.npm-intellisensechristian-kohler.path-intellisensecmstead.jsrefactorcodezombiech.gitignoredbaeumer.vscode-eslintdonjayamanne.githistoryeamodio.gitlenseg2.vscode-npm-scriptesbenp.prettier-vscodefelipecaputo.git-project-managerfelixfbecker.php-debugformulahendry.auto-close-tagformulahendry.auto-rename-taghenriiik.docker-linterikappas.phpcsjasonnutter.search-node-modulesjoelday.docthisjunstyle.php-cs-fixerms-vscode.azure-accountmsjsdiag.debugger-for-chromeneilbrayfield.php-docblockeroctref.veturodubuc.mysql-inline-decoratoronecentlin.laravel-bladeonecentlin.laravel5-snippetsrichie5um2.vscode-sort-jsonsamverschueren.final-newlineshardulm94.trailing-spacessozercan.slackstreetsidesoftware.code-spell-checkerwaderyan.gitblamewaderyan.nodejs-extension-packwmaurer.change-casewwm.better-alignxabikos.JavaScriptSnippets 將列出的 extensions 全部複製起來，後續會用到。 在 workspace 匯入及安裝 extensions 打開 vs code 按下快速鍵 command + shift + p 在跳出的對話框命令列後輸入或找到 &gt; Configure Recommended Extensions (Workspace) 接著修改開啟的 .vscode/extensions.json 檔案，以 JOSN 格式編輯貼上剛才複製的 extensions 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#123; // See http://go.microsoft.com/fwlink/?LinkId=827846 // for the documentation about the extensions.json format &quot;recommendations&quot;: [ // Extension identifier format: $&#123;publisher&#125;.$&#123;name&#125;. Example: vscode.csharp &quot;DavidAnson.vscode-markdownlint&quot;, &quot;EditorConfig.EditorConfig&quot;, &quot;HookyQR.beautify&quot;, &quot;HvyIndustries.crane&quot;, &quot;JerryHong.autofilename&quot;, &quot;PeterJausovec.vscode-docker&quot;, &quot;Tyriar.sort-lines&quot;, &quot;alefragnani.Bookmarks&quot;, &quot;alefragnani.project-manager&quot;, &quot;alexdima.copy-relative-path&quot;, &quot;bmewburn.vscode-intelephense-client&quot;, &quot;christian-kohler.npm-intellisense&quot;, &quot;christian-kohler.path-intellisense&quot;, &quot;cmstead.jsrefactor&quot;, &quot;codezombiech.gitignore&quot;, &quot;dbaeumer.vscode-eslint&quot;, &quot;donjayamanne.githistory&quot;, &quot;eamodio.gitlens&quot;, &quot;eg2.vscode-npm-script&quot;, &quot;esbenp.prettier-vscode&quot;, &quot;felipecaputo.git-project-manager&quot;, &quot;felixfbecker.php-debug&quot;, &quot;formulahendry.auto-close-tag&quot;, &quot;formulahendry.auto-rename-tag&quot;, &quot;henriiik.docker-linter&quot;, &quot;ikappas.phpcs&quot;, &quot;jasonnutter.search-node-modules&quot;, &quot;joelday.docthis&quot;, &quot;junstyle.php-cs-fixer&quot;, &quot;ms-vscode.azure-account&quot;, &quot;msjsdiag.debugger-for-chrome&quot;, &quot;neilbrayfield.php-docblocker&quot;, &quot;octref.vetur&quot;, &quot;odubuc.mysql-inline-decorator&quot;, &quot;onecentlin.laravel-blade&quot;, &quot;onecentlin.laravel5-snippets&quot;, &quot;richie5um2.vscode-sort-json&quot;, &quot;samverschueren.final-newline&quot;, &quot;shardulm94.trailing-spaces&quot;, &quot;sozercan.slack&quot;, &quot;streetsidesoftware.code-spell-checker&quot;, &quot;waderyan.gitblame&quot;, &quot;waderyan.nodejs-extension-pack&quot;, &quot;wmaurer.change-case&quot;, &quot;wwm.better-align&quot;, &quot;xabikos.JavaScriptSnippets&quot; ]&#125; 點擊左側 EXPLOER 選單 ICON 的 Extensions（或快速鍵 shift + command + x），在展開的清單視窗右上角點擊 ... 圖示，選取 Show Workspace Recommended Extensions，然後挑選想要的 extension 進行安裝。也可以全部安裝後，再把不想使用的 extension disable :) Extensions 的安裝路徑 Windows %USERPROFILE%\.vscode\extensions Mac ~/.vscode/extensions Linux ~/.vscode/extensions 參考資料 References Command line extension management Workspace Recommended Extensions]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>extensions</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 EditorConfig 統一專案的 Coding Style]]></title>
    <url>%2F2017%2F08%2F29%2F2017082901-editorconfig-settings%2F</url>
    <content type="text"><![CDATA[使用 EditorConfig 統一專案的 Coding Style。大部分的編輯器本身或外掛都有支援 EditorConfig。 在專案根目錄下建立 .editorconfig 內容如下 123456789101112131415161718root = true[*]charset = utf-8end_of_line = lfinsert_final_newline = truetrim_trailing_whitespace = true[*.&#123;js,json,vue&#125;]indent_style = spaceindent_size = 2[*.php]indent_style = spaceindent_size = 4[*.md]trim_trailing_whitespace = false]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>coding style</tag>
        <tag>editorconfig</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homebrew 安裝 Nginx、PHP71 筆記]]></title>
    <url>%2F2017%2F08%2F27%2F2017082701-brew-install-nginx-php71-fpm%2F</url>
    <content type="text"><![CDATA[在 macOX Sierra 透過 brew 指令安裝 php71（帶有 php-fpm）及 nginx。Install NGINX with PHP71 on Mac OS Sierra with Homebrew. 前言 Prologue臨時有需要讓 localhost 透過使用 ngrok 的對外服務，以測試 webhook 功能，BUT nginx 就在這個時候出問題了。本來以為是用了 Laravel Valet 的關係，但即使是停用 Valet，修改 hosts 或重建 nginx.conf 都於事無補，只好從安裝 PHP 到 Nginx 重新做起。 環境 Environment macOS Sierra： 10.12.5 homebrew： 1.3.1 Install Commandline Tools1$ xcode-select —install Install Homebrew1$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; Check Installation1$ brew doctor Update Brew and Packages1$ brew update &amp;&amp; brew upgrade Install brew services1$ brew tap homebrew/services 安裝 DNSMasqDNSMasq is used to resolve all domains that end with .dev to 127.0.0.1.DNSMasq 將 .env 結尾的網址對應到 127.0.0.1，就不需要再修改 /etc/hosts 檔案 安裝 Install1$ brew install dnsmasq 配置 Configure檔案 /usr/local/etc/dnsmasq.conf 內容12address=/.dev/127.0.0.1listen-address=127.0.0.1 檔案 /etc/resolver/dev 內容1nameserver 127.0.0.1 start、stop、restart DNSMasq123$ sudo brew services start dnsmasq$ sudo brew services stop dnsmasq$ sudo brew services restart dnsmasq 測試 Testing12345678910111213141516171819$ dig testing.dev @127.0.0.1dig testing.dev @127.0.0.1; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; testing.dev @127.0.0.1;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 21966;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0;; QUESTION SECTION:;testing.dev. IN A;; ANSWER SECTION:testing.dev. 0 IN A 127.0.0.1;; Query time: 1 msec;; SERVER: 127.0.0.1#53(127.0.0.1);; WHEN: Sun Aug 27 22:39:50 2017;; MSG SIZE rcvd: 45 安裝 PHP-FPMInstall php71123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354$ brew tap homebrew/dupes &amp;&amp; \$ brew tap homebrew/php$ brew install php71==&gt; Installing php71 from homebrew/php==&gt; Downloading https://homebrew.bintray.com/bottles-php/php71-7.1.1_12.sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring php71-7.1.1_12.sierra.bottle.tar.gz==&gt; CaveatsThe php.ini file can be found in: /usr/local/etc/php/7.1/php.ini✩✩✩✩ Extensions ✩✩✩✩If you are having issues with custom extension compiling, ensure thatyou are using the brew version, by placing /usr/local/bin before /usr/sbin in your PATH: PATH=&quot;/usr/local/bin:$PATH&quot;PHP71 Extensions will always be compiled against this PHP. Please install themusing --without-homebrew-php to enable compiling against system PHP.✩✩✩✩ PHP CLI ✩✩✩✩If you wish to swap the PHP you use on the command line, you should add the following to ~/.bashrc,~/.zshrc, ~/.profile or your shell&apos;s equivalent configuration file: export PATH=&quot;$(brew --prefix homebrew/php/php71)/bin:$PATH&quot;✩✩✩✩ FPM ✩✩✩✩To launch php-fpm on startup: mkdir -p ~/Library/LaunchAgents cp /usr/local/opt/php71/homebrew.mxcl.php71.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plistThe control script is located at /usr/local/opt/php71/sbin/php71-fpmOS X 10.8 and newer come with php-fpm pre-installed, to ensure you are using the brew version you need to make sure /usr/local/sbin is before /usr/sbin in your PATH: PATH=&quot;/usr/local/sbin:$PATH&quot;You may also need to edit the plist to use the correct &quot;UserName&quot;.Please note that the plist was called &apos;homebrew-php.josegonzalez.php71.plist&apos; in old versionsof this formula.With the release of macOS Sierra the Apache module is now not built by default. If you want to build it on your systemyou have to install php with the --with-httpd24 option. See brew options php71 for more details.To have launchd start homebrew/php/php71 now and restart at login: brew services start homebrew/php/php71==&gt; Summary🍺 /usr/local/Cellar/php71/7.1.1_12: 344 files, 39.7M 配置 Configure編輯檔案 /usr/local/etc/php/7.1/php-fpm.d/www.conf12user = YOUR_USERNAMEgroup = staff 測試 Testing啟動 php-fpm1$ sudo brew services start php71 Show running processes1lsof -Pni4 | grep LISTEN | grep php 安裝 NGINXInstall NGINX1234567891011121314151617181920$ brew tap homebrew/nginx$ brew install nginx==&gt; Downloading https://homebrew.bintray.com/bottles/nginx-1.12.1.sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring nginx-1.12.1.sierra.bottle.tar.gz==&gt; CaveatsDocroot is: /usr/local/var/wwwThe default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so thatnginx can run without sudo.nginx will load all files in /usr/local/etc/nginx/servers/.To have launchd start nginx now and restart at login: brew services start nginxOr, if you don&apos;t want/need a background service you can just run: nginx==&gt; Summary🍺 /usr/local/Cellar/nginx/1.12.1: 23 files, 1MB 安裝測試 Testing123456789101112131415## Start Nginx$ sudo brew services start nginx## Check if Nginx is running on default port$ curl -IL http://127.0.0.1:8080curl -IL http://127.0.0.1:8080HTTP/1.1 200 OKServer: nginx/1.12.1Date: Sun, 27 Aug 2017 14:59:30 GMTContent-Type: text/htmlContent-Length: 274Last-Modified: Sat, 26 Aug 2017 14:05:36 GMTConnection: keep-aliveETag: &quot;59a18030-112&quot;Accept-Ranges: bytes Stop Nginx1$ sudo brew services stop nginx 配置 Configure建立目錄 Create directories1234$ mkdir -p /usr/local/etc/nginx/sites-available &amp;&amp; \$ mkdir -p /usr/local/etc/nginx/sites-enabled &amp;&amp; \$ mkdir -p /usr/local/etc/nginx/conf.d &amp;&amp; \$ mkdir -p /usr/local/etc/nginx/ssl 配置檔案 nginx.conf刪除預設檔案1$ rm /usr/local/etc/nginx/nginx.conf 建立新檔 $ vim /usr/local/etc/nginx/nginx.conf 內容12345678910111213141516171819202122232425262728worker_processes 1;error_log /var/log/nginx/error.log;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; #sendfile on; sendfile off; #keepalive_timeout 65; keepalive_timeout 1; index index.html index.php; include /usr/local/etc/nginx/sites-enabled/*;&#125; 啟動並測試 Nginx Start and Test Nginx123456789101112131415## Start Nginx$ sudo brew services start nginx## Check if Nginx is running on default port$ curl -IL http://localhostcurl -IL http://localhostHTTP/1.1 200 OKServer: nginx/1.12.1Date: Sun, 27 Aug 2017 15:12:35 GMTContent-Type: text/htmlContent-Length: 274Last-Modified: Sat, 26 Aug 2017 14:05:36 GMTConnection: keep-aliveETag: &quot;59a18030-112&quot;Accept-Ranges: bytes 設定 SSL Setup SSLGenerate 4096 bit RSA keys and the self-sign the certificates1$ openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj &quot;/C=US/ST=State/L=Town/O=Office/CN=localhost&quot; -keyout /usr/local/etc/nginx/ssl/localhost.key -out /usr/local/etc/nginx/ssl/localhost.crt RSA keys 存放在資料夾 /usr/local/etc/nginx/ssl 建立 Virtual Hosts 網站檔案檔案 /usr/local/etc/nginx/sites-available/default 內容123456789101112131415161718192021server &#123; listen 80; server_name localhost; root /YOUR/DOCUMENT/ROOT; access_log /var/log/default.access.log main; error_log /var/log/nginx/default.error.log debug; location / &#123; include /usr/local/etc/nginx/conf.d/php-fpm; &#125; location = /info &#123; allow 127.0.0.1; deny all; rewrite (.*) /.info.php; &#125; error_page 404 /404.html; error_page 403 /403.html;&#125; 檔案 /usr/local/etc/nginx/sites-available/default-ssl 內容12345678910111213141516171819202122232425262728293031server &#123; listen 443; server_name localhost; root /YOUR/DOCUMENT/ROOT; access_log /var/log/nginx/default-ssl.access.log main; error_log /var/log/nginx/default-ssl.error.log debug; ssl on; ssl_certificate ssl/localhost.crt; ssl_certificate_key ssl/localhost.key; ssl_session_timeout 5m; ssl_protocols SSLv2 SSLv3 TLSv1; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; include /usr/local/etc/nginx/conf.d/php-fpm; &#125; location = /info &#123; allow 127.0.0.1; deny all; rewrite (.*) /.info.php; &#125; error_page 404 /404.html; error_page 403 /403.html;&#125; 檔案 /usr/local/etc/nginx/conf.d/php-fpm 內容1234567location ~ \.php$ &#123; try_files $uri = 404; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params;&#125; Activate Virtual Hosts在 sites-enabled 目錄下建立 Symbolic link。將要 enable 的 virtal host 指向 sites-available 目錄內的 virtal host config file。12$ ln -sfv /usr/local/etc/nginx/sites-available/default /usr/local/etc/nginx/sites-enabled/default$ ln -sfv /usr/local/etc/nginx/sites-available/default-ssl /usr/local/etc/nginx/sites-enabled/default-ssl 測試 Testing建立 /YOUR/DOCUMENT/ROOT/info.php 內容123&lt;?phpphpinfo();?&gt; 重新啟動 Nginx 並測試12345678910$ sudo brew services restart nginx$ curl -IL http://localhost/info.phpcurl -IL http://localhost/info.phpHTTP/1.1 200 OKServer: nginx/1.12.1Date: Sun, 27 Aug 2017 15:24:46 GMTContent-Type: text/html; charset=UTF-8Connection: keep-aliveX-Powered-By: PHP/7.1.8 安裝其他 Libraries1$ brew install php71-mcrypt php71-imagick brew info 查看 PHP 及其相關 Libraries 的資訊123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112$ brew info php71homebrew/php/php71: stable 7.1.8 (bottled), HEADPHP Version 7.1https://php.netConflicts with: php53 (because different php versions install the same binaries.) php54 (because different php versions install the same binaries.) php55 (because different php versions install the same binaries.) php56 (because different php versions install the same binaries.) php70 (because different php versions install the same binaries.) php72 (because different php versions install the same binaries.)/usr/local/Cellar/php71/7.1.8_20 (349 files, 39.5MB) * Poured from bottle on 2017-08-26 at 16:34:27From: https://github.com/Homebrew/homebrew-php/blob/master/Formula/php71.rb==&gt; DependenciesRequired: freetype ✔, gettext ✔, icu4c ✔, jpeg ✔, libpng ✔, libxml2 ✔, unixodbc ✔, readline ✔, openssl ✔Optional: enchant ✘, gmp ✘, webp ✘, homebrew/apache/httpd24 ✔, homebrew/apache/httpd22 ✘==&gt; RequirementsOptional: postgresql ✘==&gt; Options--with-cgi Enable building of the CGI executable (implies --without-fpm)--with-debug Compile with debugging symbols--with-enchant Build with enchant support--with-gmp Build with gmp support--with-homebrew-curl Include Curl support via Homebrew--with-homebrew-libressl Include LibreSSL instead of OpenSSL via Homebrew--with-homebrew-libxml2 Include Libxml2 support via Homebrew--with-homebrew-libxslt Include LibXSLT support via Homebrew--with-httpd22 Enable building of shared Apache 2.2 Handler module--with-httpd24 Enable building of shared Apache 2.4 Handler module--with-imap Include IMAP extension--with-libmysql Include (old-style) libmysql support instead of mysqlnd--with-mssql Include MSSQL-DB support--with-pdo-oci Include Oracle databases (requries ORACLE_HOME be set)--with-pear Build with PEAR--with-phpdbg Enable building of the phpdbg SAPI executable--with-postgresql Build with postgresql support--with-thread-safety Build with thread safety--with-webp Build with webp support--without-bz2 Build without bz2 support--without-fpm Disable building of the fpm SAPI executable--without-ldap Build without LDAP support--without-legacy-mysql Do not include the deprecated mysql_ functions--without-mysql Remove MySQL/MariaDB support--without-pcntl Build without Process Control support--without-unixodbc Build without unixODBC support--HEAD Install HEAD version==&gt; CaveatsThe php.ini file can be found in: /usr/local/etc/php/7.1/php.ini✩✩✩✩ Extensions ✩✩✩✩If you are having issues with custom extension compiling, ensure that you are using the brew version, by placing /usr/local/bin before /usr/sbin in your PATH: PATH=&quot;/usr/local/bin:$PATH&quot;PHP71 Extensions will always be compiled against this PHP. Please install them using --without-homebrew-php to enable compiling against system PHP.✩✩✩✩ PHP CLI ✩✩✩✩If you wish to swap the PHP you use on the command line, you should add the following to ~/.bashrc, ~/.zshrc, ~/.profile or your shell&apos;s equivalent configuration file: export PATH=&quot;$(brew --prefix homebrew/php/php71)/bin:$PATH&quot;✩✩✩✩ FPM ✩✩✩✩To launch php-fpm on startup: mkdir -p ~/Library/LaunchAgents cp /usr/local/opt/php71/homebrew.mxcl.php71.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plistThe control script is located at /usr/local/opt/php71/sbin/php71-fpmOS X 10.8 and newer come with php-fpm pre-installed, to ensure you are using the brew version you need to make sure /usr/local/sbin is before /usr/sbin in your PATH: PATH=&quot;/usr/local/sbin:$PATH&quot;You may also need to edit the plist to use the correct &quot;UserName&quot;.Please note that the plist was called &apos;homebrew-php.josegonzalez.php71.plist&apos; in old versions of this formula.With the release of macOS Sierra the Apache module is now not built by default. If you want to build it on your system you have to install php with the --with-httpd24 option. See brew options php71 for more details.To have launchd start homebrew/php/php71 now and restart at login: brew services start homebrew/php/php71 後記 Epilogue如果 $ curl -IL http://127.0.0.1:8080 出現 curl: (7) Failed to connect to 127.0.0.1 port 8080: Connection refused，請記得檢查 php-fpm 是不是啟動 nginx 是否有 restart /usr/loca/etc/php/7.1/php-fpm.d/www.conf 內 user 及 group 是否正確設定 /usr/local/etc/nginx/conf.d/php-fpm 檔案是否建立 參考資料 References Install NGINX with PHP7-FPM on Mac OS X with Homebrew pixeline/php_upgrade_to_71.sh]]></content>
      <categories>
        <category>lemp</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>php71</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 wget 砍站]]></title>
    <url>%2F2017%2F08%2F18%2F2017081804-wget-download-web-pages%2F</url>
    <content type="text"><![CDATA[wget 是 linux 中除了 curl 外另一個檔案下載的好用工具，也可以使用它來“砍站”。但是無法正確抓去使用 vue-router 等 js 撰寫的動態呈現網頁的內容。 用法 1$ wget -m -k -E -p -F --restrict-file-names=windows -nH --header=&quot;Accept: text/html&quot; --user-agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0&quot; 127.0.0.1 指令說明 12345678910111213-m, --mirror 相等於 -N -r -l inf --no-remove-listing 選項-k, --convert-links 將原本網站內所有站內的連結全都改為 Local 連結，這樣下載網站後才可以離線使用。-E, --adjust-extension save HTML/CSS documents with proper extensions.-p, --page-requisites 下載所有顯示網頁所需的檔案，例如圖片等-F, --force-html 以 HTML 方式處理輸入檔-N, --timestamping 除非遠端檔案比較新，否則不下載遠端檔案-r, --recursive 遞迴下載-l, --level=數字 最大搜尋深度 (inf 或 0 表示無限)--no-remove-listing 不刪除 ‘.listing’ 檔案--restrict-file-names=OS 只使用作業系統能夠接受的字元作為檔案字元-nH, --no-host-directories 不建立含有遠端主機名稱的目錄--header=字串 在連線資料標頭中加入指定字串-U, --user-agent=AGENT 宣稱為 AGENT 而不是 Wget/VERSION 參考資料 GNU Wget 1.18 Manual wget 指令用法與教學 How to Use the wget Linux Command to Download Web Pages and Files]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>wget</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[開發廣告系統（DSP）不能不知道的關鍵字！]]></title>
    <url>%2F2017%2F08%2F18%2F2017081803-cpc-cpa-ad-keywords%2F</url>
    <content type="text"><![CDATA[關鍵字 DSP: Demand Side Platform 網路廣告中的需求方平台，可以讓廣告主進行跨媒體的自動化廣告投放。J: 買廣告版位 SSP: Supply Side Platform 是網路媒體中的供應方平台。SSP 平台幫助網路媒體託管其廣告位和廣告交易，與網路交易平台對接，從而將他們的流量變現。J: 賣廣告版位 DMP: Data-Management Platform 是專門為廣告主、媒體等開發的廣告數據管理平台，主要分析、儲存用戶行為數據，並管理相關資料，為廣告主提供精準的用戶行為分析。 RTB: Real Time Billing CPC: Cost Per Click 每次點擊計價 CPM: Cost Per Mille，或者Cost Per Thousand;Cost Per Impressions，每千次展示計價 CPA: Cost Per Action 以實際行動效果來計算成本 CPS: Cost Per Sales 每次有效銷售定價 CPV: Cost Per View 每次觀看成本 AD Exchange: 網路廣告交易平台，功能就是聯繫廣告的賣方（媒體、網站主）和買方（廣告主）。Ad Exchange 平台交易的公司包括有 Yahoo、Google、The Rubicon Project、OpenX、AppNexus 等 AD Network: 聯播網 ROI: Return On Investment 每投資一塊錢所得到回饋的百分比 ROAS: Return On AD Spending 廣告沒投入一塊錢可獲得的營收 DSP 優點 精確的受眾定向 簡單好用的使用者界面 強大的 RTB 技術 購買流程更快更簡單 整合多種服務，持續精進一站化 實現跨平台統一管理 參考文章 關於RTB, DSP, DMP的一些小事及簡單認知 行銷人必知！ DSP廣告平台迷思求解7大守則 【硬塞科技字典】什麼是 DSP 需求方平台/ SSP 供應方平台/ DMP 數據管理平台？ 【硬塞科技字典】什麼是 Ad Exchange？ 什麼是 RTB 實時競價廣告？他將是未來趨勢！ 常見的網路廣告平台運作原理淺析 APP廣告、網路媒體常說到所謂的CPM、CPC、CPA、CPI到底是甚麼意思?]]></content>
      <categories>
        <category>marketing</category>
      </categories>
      <tags>
        <tag>marketing</tag>
        <tag>ad keyword</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用 Google Hangouts 進行遠端多人會議]]></title>
    <url>%2F2017%2F08%2F18%2F2017081802-google-hangouts-multi-person-meeting%2F</url>
    <content type="text"><![CDATA[開啟 Google Chrome 瀏覽器並且登入 Google 帳號，然後在網址列搜尋 Google Hangouts 或直接開啟連結 https://hangouts.google.com/?hl=zh-TW 。 進入 https://hangouts.google.com/?hl=zh-TW 頁面後點擊 視訊通話。 同意 Google Hangouts 取用攝影機及麥克風的權限，即可正式開啟會議。 邀請進入會議的方式有二，一是透過 email 邀請，二是分享連結。 要分享報告的內容給其他人時，可以點擊右上角。 然後點擊 分享螢幕畫面 再選擇要分享螢幕（Your Entire Screen）還是應用程式（Application Window）。 再點擊 Share，此時你的 Google Hangouts 畫面就會是要分享的內容。 要看其他人分享的螢幕，點擊主視窗下方的其他人的小視窗就可以進行切換。 以上截圖內容是在 MAC OS 下操作的畫面，其他 OS 可能會有出入。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>IM</tag>
        <tag>Google Hangouts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 安裝筆記]]></title>
    <url>%2F2017%2F08%2F18%2F2017081801-hexo-install-notes%2F</url>
    <content type="text"><![CDATA[Install Hexo1$ npm install -g hexo-cli Repository1git clone https://github.com/GITPAGEUSERNAME/GITPAGEUSERNAME.github.io.git .deploy/GITPAGEUSERNAME.github.io Shell Script1234567#!/bin/bashhexo generatecp -R public/* .deploy/codefuntw.github.iocd .deploy/codefuntw.github.iogit add .git commit -m “update”git push origin master Custom Domain Setting Reference123https://help.github.com/articles/setting-up-an-apex-domain/https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-providerhttps://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/ Custom Domain 對應到 GitHub page123456789$ dig blog.codefun.tw +nostats +nocomments +nocmd; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; blog.codefun.tw +nostats +nocomments +nocmd;; global options: +cmd;blog.codefun.tw. IN Ablog.codefun.tw. 3599 IN CNAME GITPAGEUSERNAME.github.io.GITPAGEUSERNAME.github.io. 3599 IN CNAME github.map.fastly.net.github.map.fastly.net. 2865 IN CNAME prod.github.map.fastlylb.net.prod.github.map.fastlylb.net. 13 IN A 151.101.100.133 Command常用基本指令12345$ hexo g # 或者 hexo generate$ hexo s # 或者 hexo server，可以在 http://localhost:4000/ 查看$ hexo deploy (hexo d) # 部署到遠端$ hexo new &quot;postName&quot; # 新建文章$ hexo new page &quot;pageName&quot; # 新建頁面 常用簡寫1234$ hexo n == hexo new$ hexo g == hexo generate$ hexo s == hexo server$ hexo d == hexo deploy 常用組合12$ hexo d -g # 生成部署$ hexo s -g # 生成預覽 Plugins12$ npm install hexo-generator-feed$ npm install hexo-generator-sitemap]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在本地端使用 Nodejs & Ngrok 進行 Line Bot 開發測試]]></title>
    <url>%2F2017%2F06%2F02%2F20170602-nodejs-line-bot-p1%2F</url>
    <content type="text"><![CDATA[Chat Bot 正夯，剛好公司的專案有 Line Bot 的應用，所以參考了 不必真的架站也能 5 分鐘實機體驗 LINE bot – 教學 ( by node.js &amp; ngrok )、LINE BOT 實戰 ( 原理篇 )、LINE BOT 實戰 ( 聊天篇 ) 等文章來進行 Nodejs 的 Line bot 開發實作練習。 開發環境 macOS Sierra： 10.12.5 Nodejs： 7.10.0 Packages： express linebot Github： https://github.com/jerry771230/node-line-bot-practice 本次實作有以下階段： 申請 Line Bot 帳號 ngrok 讓 localhost 也可以使用 HTTPS 使用 Nodejs 在本地端部署 webhook service 使用 Line App 傳訊息給 Line Bot 申請 Line Bot 帳號 到 LINE Business Center 申請商用帳號。點擊「帳號清單」，再點擊「建立商用帳號」 找到 Messageing API，點擊「開始使用Developer Trial」 輸入 Bot 的帳號名稱，更換圖片以及選擇業種，再按下確定就會建立機器人專用帳號 在申請完成的頁面下方點擊「前往LINE@MANAGER」 開始使用 API。進入 LINE@ MANAGER 後，在左邊選單 「Settings」-&gt; 點擊「Bot Settings」-&gt; 再按下「Enable API」 註：LINE@ MANAGER 的網址會是 https://admin-official.line.me/ 開頭 Bot Settings 的部份要留意 Usable APIs 是否有 REPLY_MESSAGE 及 PUSH_MESSAGE。如果沒有 PUSH_MESSAGE 是不能進行 Bot 主動發訊息給 Client App 的。Request Settings 裡的 Use webhooks 請勾選 「Allow」。Details 的 Allow Bot to join group chats、Auto Reply Message 及 Greeting Message 都勾選 「Don’t Allow」。 ngrok 讓 localhost 也可以使用 HTTPSLine Bot 需要有 HTTPS 的 webhook service 才能接受及轉發訊息，這時候後端開發必備神器 - ngrok，可以讓 localhost 使用 HTTPS 的隨機網址，達成 webhook service 測試，省去了必須上傳到 Server 後才能得到測試結果的時間花費。 安裝Mac 的部份可以在 ngrok 官網下載程式，解壓縮後就可以使用了。或者是丟到 /usr/local/bin，方便之後使用。 Termial 指令 1$ ngrok http 8080 代表把外界的流量導到 localhost 的 8080 port。執行後會有以下畫面： 1234567891011ngrok by @inconshreveable (Ctrl+C to quit)Session Status onlineAccount YOUR_ACCOUNT (Plan: Free)Version 2.2.4Region United States (us)Web Interface http://127.0.0.1:4040Forwarding http://85ceccf9.ngrok.io -&gt; localhost:8080Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 按下 Ctrl + C 跳出並停止運作。 申請 HTTPS protocol到 ngrok 官網註冊，可以使用 Github 或 Google 登入。登入的畫面如下： 在 Terminal 下執行指令，這樣就可以使用 https 的網址 123456789101112131415$ ngrok authtoken &#123;token&#125;$ ngrok http 8080ngrok by @inconshreveable (Ctrl+C to quit)Session Status onlineAccount YOUR_ACCOUNT (Plan: Free)Version 2.2.4Region United States (us)Web Interface http://127.0.0.1:4040Forwarding http://ec041dbf.ngrok.io -&gt; localhost:8080Forwarding https://ec041dbf.ngrok.io -&gt; localhost:8080Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 其他指令參考 HTTP Auth 1$ ngrok http -auth "user:passwd" 80 轉址到 local domain（修改 /etc/hosts） 1$ ngrok http -host-header=myweb.dev myweb.dev:80 以上 ngrok 的基本使用是參考 Ngrok – 讓本機也可以開發 webhook 免部署環境的神器 使用 Nodejs 在本地端部署 webhook service開始建立 Nodejs 專案12$ mkdir node-line-bot$ cd node-line-bot 建立 package.json 檔案，並修改 “scripts”，增加 &quot;start&quot;: &quot;node .&quot; 12345678910111213$ npm init&#123; "name": "node-line-bot", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123; "start": "node ." &#125;, "author": "Jerry Huang", "license": "MIT"&#125; 安裝模組 linebot 及 express 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556$ npm install linebot express --savenode-line-bot@1.0.0 /Users/jerryhuang/workspace/practice/nodejs/node-line-bot├─┬ express@4.15.3│ ├─┬ accepts@1.3.3│ │ ├─┬ mime-types@2.1.15│ │ │ └── mime-db@1.27.0│ │ └── negotiator@0.6.1│ ├── array-flatten@1.1.1│ ├── content-disposition@0.5.2│ ├── content-type@1.0.2│ ├── cookie@0.3.1│ ├── cookie-signature@1.0.6│ ├─┬ debug@2.6.7│ │ └── ms@2.0.0│ ├── depd@1.1.0│ ├── encodeurl@1.0.1│ ├── escape-html@1.0.3│ ├── etag@1.8.0│ ├─┬ finalhandler@1.0.3│ │ └── unpipe@1.0.0│ ├── fresh@0.5.0│ ├── merge-descriptors@1.0.1│ ├── methods@1.1.2│ ├─┬ on-finished@2.3.0│ │ └── ee-first@1.1.1│ ├── parseurl@1.3.1│ ├── path-to-regexp@0.1.7│ ├─┬ proxy-addr@1.1.4│ │ ├── forwarded@0.1.0│ │ └── ipaddr.js@1.3.0│ ├── qs@6.4.0│ ├── range-parser@1.2.0│ ├─┬ send@0.15.3│ │ ├── destroy@1.0.4│ │ ├─┬ http-errors@1.6.1│ │ │ └── inherits@2.0.3│ │ └── mime@1.3.4│ ├── serve-static@1.12.3│ ├── setprototypeof@1.0.3│ ├── statuses@1.3.1│ ├─┬ type-is@1.6.15│ │ └── media-typer@0.3.0│ ├── utils-merge@1.0.0│ └── vary@1.1.1└─┬ linebot@1.3.0 ├─┬ body-parser@1.17.2 │ ├── bytes@2.4.0 │ ├── iconv-lite@0.4.15 │ └── raw-body@2.2.0 └─┬ node-fetch@1.7.0 ├── encoding@0.1.12 └── is-stream@1.1.0npm WARN node-line-bot@1.0.0 No descriptionnpm WARN node-line-bot@1.0.0 No repository field. 建立 index.js 檔案的內容如下 123456789101112131415161718192021222324252627let linebot = require('linebot'), express = require('express');const config = require('./config.json'), util = require('util');let bot = linebot(&#123; channelId: 'Line Bot Channel ID', channelSecret: 'Line Bot Channel Secret', channelAccessToken: 'Line Bot Access Token'&#125;);const linebotParser = bot.parser(), app = express();bot.on('message', function(event) &#123; // 把收到訊息的 event 印出來 console.log(event);&#125;);app.post('/webhook', linebotParser);// 在 localhost 走 8080 portlet server = app.listen(process.env.PORT || 8080, function() &#123; let port = server.address().port; console.log("My Line bot App running on port", port);&#125;); 如何取得 Line Bot 的 Channel ID 及設定 WebhookChannel ID、Channel Secret 及 Channel Access Token 可以從 LINE Business Center 進入後取得 取得 Channel ID、Channel Secret 及 Channel Access Token回到 LINE Business Center 按下 Messaging API 右邊的「LINE Developers」 在 LINE developers 下的 “Basic information”，將 “Channel ID”、”Channel Secret”（點選 SHOW 會出現）、 “Channel Access Token” 複製貼到 index.js 裡對應的程式中 點選 ISSUE 會產生 “Channel Access Token” 設定 Webhook URL同樣在 “Basic information” 下，按下右下角的 “EDIT”，然後將 ngrok 產生的網址以及 index.js 內監聽 post mehtod 的路徑組合 https://ec041dbf.ngrok.io/webhook 貼到 “Webhook URL” 中 回到 Terminal 畫面，啟動 webhook service 1$ node index.js 再回 LINE developers 的 “Basic information”，按下 Webhoo URL 右方的 “VERIFY” 以驗證是否正確。 Terminal 畫面會有以下資訊 123456789101112131415161718192021222324252627&#123; replyToken: '00000000000000000000000000000000', type: 'message', timestamp: 1451617200000, source: &#123; type: 'user', userId: 'UdeadbeefdeadbeefdeLINEBOTUSERID', profile: [Function] &#125;, message: &#123; id: '100001', type: 'text', text: 'Hello,world', content: [Function] &#125;, reply: [Function] &#125;&#123; replyToken: 'ffffffffffffffffffffffffffffffff', type: 'message', timestamp: 1451617210000, source: &#123; type: 'user', userId: 'UdeadbeefdeadbeefdeLINEBOTUSERID', profile: [Function] &#125;, message: &#123; id: '100002', type: 'sticker', packageId: '1', stickerId: '1', content: [Function] &#125;, reply: [Function] &#125; 使用 Line App 傳訊息給 Line Bot手機 Line App 掃描 LINE developers 的 “Basic information” 畫面中的 QR Code 將 Line Bot 加入，然後輸入文字，測試 Line Bot 是否有正確接收到。 如果有正確收到訊息，則 Terminal 畫面會顯示以下資訊 12345678910111213&#123; type: 'message', replyToken: '98eb2ca92bdb468c9REPLYTOKEN', source: &#123; userId: 'U08cee31d0f3a94CLIENTAPPUSERID', type: 'user', profile: [Function] &#125;, timestamp: 1496462418683, message: &#123; type: 'text', id: '618217MSGID', text: '開發測試Q Q', content: [Function] &#125;, reply: [Function] &#125; 將收到的訊息，回覆給 Client App修改一下 on ‘message’ 的內容 12345678910111213141516bot.on('message', function(event) &#123; // 把收到訊息的 event 印出來 //console.log(event); // 重複 client 輸入的內容 if (event.message.type = 'text') &#123; var msg = event.message.text; event.reply(msg).then(function(data) &#123; // success console.log(msg); &#125;).catch(function(error) &#123; // error console.log('error'); &#125;); &#125;&#125;); 記得要重啟 nodejs server 喔 :) 主動發送訊息讓 server 啟動後 3 秒，發送訊息給 Client App，請在 index.js 加入以下程式，。 12345678// 主動發送訊息給 Client AppsetTimeout(function() &#123; var userId = 'Client App User ID'; var sendMsg = "push msg to one user"; bot.push(userId, [sendMsg]); console.log('userId: ' + userId); console.log('send: ' + sendMsg);&#125;, 3000); 參考資料： LINE BOT 實戰 ( 原理篇 ) LINE BOT 實戰 ( 聊天篇 ) 不必真的架站也能 5 分鐘實機體驗 LINE bot – 教學 ( by node.js &amp; ngrok ) Ngrok – 讓本機也可以開發 webhook 免部署環境的神器 ngrok.com Line Bot 的圖片來源 tgram.ru https://tgram.ru/wiki/bots/image/topics_bot.jpg]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>line bot</tag>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSX 執行 gvm pkgset use 發生錯誤]]></title>
    <url>%2F2017%2F04%2F26%2F20170426-osx-gvm-pkgset-use-error%2F</url>
    <content type="text"><![CDATA[第一次安裝 gvm 就踩到奇怪的雷gvm 是 golang 的版本管理工具（跟 nvm 很像），但是竟然在 OSX 下踩到奇怪的雷，在 ~/.bash_profile 內的 export GREP_OPTIONS=&#39;--color=always&#39; 會造成 gvm use 或 gvm pkgset use 無法正常運作。 解決方式：12$ vim $HOME/.gvm/scripts/env/pkgset-use$ vim $HOME/.gvm/scripts/env/use 在 $GREP_PATH 後面加上 --color=never，也就是修改成 $GREP_PATH --color=never]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F10%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
