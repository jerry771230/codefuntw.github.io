<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何使用 Google Hangouts 進行遠端多人會議]]></title>
    <url>%2F2017%2F08%2F18%2F2017081802-google-hangouts-multi-person-meeting%2F</url>
    <content type="text"><![CDATA[開啟 Google Chrome 瀏覽器並且登入 Google 帳號，然後在網址列搜尋 Google Hangouts 或直接開啟連結 https://hangouts.google.com/?hl=zh-TW 。 進入 https://hangouts.google.com/?hl=zh-TW 頁面後點擊 視訊通話。 同意 Google Hangouts 取用攝影機及麥克風的權限，即可正式開啟會議。 邀請進入會議的方式有二，一是透過 email 邀請，二是分享連結。 要分享報告的內容給其他人時，可以點擊右上角。 然後點擊 分享螢幕畫面 再選擇要分享螢幕（Your Entire Screen）還是應用程式（Application Window）。 再點擊 Share，此時你的 Google Hangouts 畫面就會是要分享的內容。 要看其他人分享的螢幕，點擊主視窗下方的其他人的小視窗就可以進行切換。 以上截圖內容是在 MAC OS 下操作的畫面，其他 OS 可能會有出入。]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo 安裝筆記]]></title>
    <url>%2F2017%2F08%2F18%2F2017081801-hexo-install-notes%2F</url>
    <content type="text"><![CDATA[Install Hexo1$ npm install -g hexo-cli Repository1git clone https://github.com/GITPAGEUSERNAME/GITPAGEUSERNAME.github.io.git .deploy/GITPAGEUSERNAME.github.io Shell Script1234567#!/bin/bashhexo generatecp -R public/* .deploy/codefuntw.github.iocd .deploy/codefuntw.github.iogit add .git commit -m “update”git push origin master Custom Domain Setting Reference123https://help.github.com/articles/setting-up-an-apex-domain/https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-providerhttps://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/ Custom Domain 對應到 GitHub page123456789$ dig blog.codefun.tw +nostats +nocomments +nocmd; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; blog.codefun.tw +nostats +nocomments +nocmd;; global options: +cmd;blog.codefun.tw. IN Ablog.codefun.tw. 3599 IN CNAME GITPAGEUSERNAME.github.io.GITPAGEUSERNAME.github.io. 3599 IN CNAME github.map.fastly.net.github.map.fastly.net. 2865 IN CNAME prod.github.map.fastlylb.net.prod.github.map.fastlylb.net. 13 IN A 151.101.100.133 Command常用基本指令12345$ hexo g # 或者 hexo generate$ hexo s # 或者 hexo server，可以在 http://localhost:4000/ 查看$ hexo deploy (hexo d) # 部署到遠端$ hexo new &quot;postName&quot; # 新建文章$ hexo new page &quot;pageName&quot; # 新建頁面 常用簡寫1234$ hexo n == hexo new$ hexo g == hexo generate$ hexo s == hexo server$ hexo d == hexo deploy 常用組合12$ hexo d -g # 生成部署$ hexo s -g # 生成預覽 Plugins12$ npm install hexo-generator-feed$ npm install hexo-generator-sitemap]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[在本地端使用 Nodejs & Ngrok 進行 Line Bot 開發測試]]></title>
    <url>%2F2017%2F06%2F02%2F20170602-nodejs-line-bot-p1%2F</url>
    <content type="text"><![CDATA[Chat Bot 正夯，剛好公司的專案有 Line Bot 的應用，所以參考了 不必真的架站也能 5 分鐘實機體驗 LINE bot – 教學 ( by node.js &amp; ngrok )、LINE BOT 實戰 ( 原理篇 )、LINE BOT 實戰 ( 聊天篇 ) 等文章來進行 Nodejs 的 Line bot 開發實作練習。 開發環境 macOS Sierra： 10.12.5 Nodejs： 7.10.0 Packages： express linebot Github： https://github.com/jerry771230/node-line-bot-practice 本次實作有以下階段： 申請 Line Bot 帳號 ngrok 讓 localhost 也可以使用 HTTPS 使用 Nodejs 在本地端部署 webhook service 使用 Line App 傳訊息給 Line Bot 申請 Line Bot 帳號 到 LINE Business Center 申請商用帳號。點擊「帳號清單」，再點擊「建立商用帳號」 找到 Messageing API，點擊「開始使用Developer Trial」 輸入 Bot 的帳號名稱，更換圖片以及選擇業種，再按下確定就會建立機器人專用帳號 在申請完成的頁面下方點擊「前往LINE@MANAGER」 開始使用 API。進入 LINE@ MANAGER 後，在左邊選單 「Settings」-&gt; 點擊「Bot Settings」-&gt; 再按下「Enable API」 註：LINE@ MANAGER 的網址會是 https://admin-official.line.me/ 開頭 Bot Settings 的部份要留意 Usable APIs 是否有 REPLY_MESSAGE 及 PUSH_MESSAGE。如果沒有 PUSH_MESSAGE 是不能進行 Bot 主動發訊息給 Client App 的。Request Settings 裡的 Use webhooks 請勾選 「Allow」。Details 的 Allow Bot to join group chats、Auto Reply Message 及 Greeting Message 都勾選 「Don’t Allow」。 ngrok 讓 localhost 也可以使用 HTTPSLine Bot 需要有 HTTPS 的 webhook service 才能接受及轉發訊息，這時候後端開發必備神器 - ngrok，可以讓 localhost 使用 HTTPS 的隨機網址，達成 webhook service 測試，省去了必須上傳到 Server 後才能得到測試結果的時間花費。 安裝Mac 的部份可以在 ngrok 官網下載程式，解壓縮後就可以使用了。或者是丟到 /usr/local/bin，方便之後使用。 Termial 指令 1$ ngrok http 8080 代表把外界的流量導到 localhost 的 8080 port。執行後會有以下畫面： 1234567891011ngrok by @inconshreveable (Ctrl+C to quit)Session Status onlineAccount YOUR_ACCOUNT (Plan: Free)Version 2.2.4Region United States (us)Web Interface http://127.0.0.1:4040Forwarding http://85ceccf9.ngrok.io -&gt; localhost:8080Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 按下 Ctrl + C 跳出並停止運作。 申請 HTTPS protocol到 ngrok 官網註冊，可以使用 Github 或 Google 登入。登入的畫面如下： 在 Terminal 下執行指令，這樣就可以使用 https 的網址 123456789101112131415$ ngrok authtoken &#123;token&#125;$ ngrok http 8080ngrok by @inconshreveable (Ctrl+C to quit)Session Status onlineAccount YOUR_ACCOUNT (Plan: Free)Version 2.2.4Region United States (us)Web Interface http://127.0.0.1:4040Forwarding http://ec041dbf.ngrok.io -&gt; localhost:8080Forwarding https://ec041dbf.ngrok.io -&gt; localhost:8080Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 其他指令參考 HTTP Auth 1$ ngrok http -auth "user:passwd" 80 轉址到 local domain（修改 /etc/hosts） 1$ ngrok http -host-header=myweb.dev myweb.dev:80 以上 ngrok 的基本使用是參考 Ngrok – 讓本機也可以開發 webhook 免部署環境的神器 使用 Nodejs 在本地端部署 webhook service開始建立 Nodejs 專案12$ mkdir node-line-bot$ cd node-line-bot 建立 package.json 檔案，並修改 “scripts”，增加 &quot;start&quot;: &quot;node .&quot; 12345678910111213$ npm init&#123; "name": "node-line-bot", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123; "start": "node ." &#125;, "author": "Jerry Huang", "license": "MIT"&#125; 安裝模組 linebot 及 express 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556$ npm install linebot express --savenode-line-bot@1.0.0 /Users/jerryhuang/workspace/practice/nodejs/node-line-bot├─┬ express@4.15.3│ ├─┬ accepts@1.3.3│ │ ├─┬ mime-types@2.1.15│ │ │ └── mime-db@1.27.0│ │ └── negotiator@0.6.1│ ├── array-flatten@1.1.1│ ├── content-disposition@0.5.2│ ├── content-type@1.0.2│ ├── cookie@0.3.1│ ├── cookie-signature@1.0.6│ ├─┬ debug@2.6.7│ │ └── ms@2.0.0│ ├── depd@1.1.0│ ├── encodeurl@1.0.1│ ├── escape-html@1.0.3│ ├── etag@1.8.0│ ├─┬ finalhandler@1.0.3│ │ └── unpipe@1.0.0│ ├── fresh@0.5.0│ ├── merge-descriptors@1.0.1│ ├── methods@1.1.2│ ├─┬ on-finished@2.3.0│ │ └── ee-first@1.1.1│ ├── parseurl@1.3.1│ ├── path-to-regexp@0.1.7│ ├─┬ proxy-addr@1.1.4│ │ ├── forwarded@0.1.0│ │ └── ipaddr.js@1.3.0│ ├── qs@6.4.0│ ├── range-parser@1.2.0│ ├─┬ send@0.15.3│ │ ├── destroy@1.0.4│ │ ├─┬ http-errors@1.6.1│ │ │ └── inherits@2.0.3│ │ └── mime@1.3.4│ ├── serve-static@1.12.3│ ├── setprototypeof@1.0.3│ ├── statuses@1.3.1│ ├─┬ type-is@1.6.15│ │ └── media-typer@0.3.0│ ├── utils-merge@1.0.0│ └── vary@1.1.1└─┬ linebot@1.3.0 ├─┬ body-parser@1.17.2 │ ├── bytes@2.4.0 │ ├── iconv-lite@0.4.15 │ └── raw-body@2.2.0 └─┬ node-fetch@1.7.0 ├── encoding@0.1.12 └── is-stream@1.1.0npm WARN node-line-bot@1.0.0 No descriptionnpm WARN node-line-bot@1.0.0 No repository field. 建立 index.js 檔案的內容如下 123456789101112131415161718192021222324252627let linebot = require('linebot'), express = require('express');const config = require('./config.json'), util = require('util');let bot = linebot(&#123; channelId: 'Line Bot Channel ID', channelSecret: 'Line Bot Channel Secret', channelAccessToken: 'Line Bot Access Token'&#125;);const linebotParser = bot.parser(), app = express();bot.on('message', function(event) &#123; // 把收到訊息的 event 印出來 console.log(event);&#125;);app.post('/webhook', linebotParser);// 在 localhost 走 8080 portlet server = app.listen(process.env.PORT || 8080, function() &#123; let port = server.address().port; console.log("My Line bot App running on port", port);&#125;); 如何取得 Line Bot 的 Channel ID 及設定 WebhookChannel ID、Channel Secret 及 Channel Access Token 可以從 LINE Business Center 進入後取得 取得 Channel ID、Channel Secret 及 Channel Access Token回到 LINE Business Center 按下 Messaging API 右邊的「LINE Developers」 在 LINE developers 下的 “Basic information”，將 “Channel ID”、”Channel Secret”（點選 SHOW 會出現）、 “Channel Access Token” 複製貼到 index.js 裡對應的程式中 點選 ISSUE 會產生 “Channel Access Token” 設定 Webhook URL同樣在 “Basic information” 下，按下右下角的 “EDIT”，然後將 ngrok 產生的網址以及 index.js 內監聽 post mehtod 的路徑組合 https://ec041dbf.ngrok.io/webhook 貼到 “Webhook URL” 中 回到 Terminal 畫面，啟動 webhook service 1$ node index.js 再回 LINE developers 的 “Basic information”，按下 Webhoo URL 右方的 “VERIFY” 以驗證是否正確。 Terminal 畫面會有以下資訊 123456789101112131415161718192021222324252627&#123; replyToken: '00000000000000000000000000000000', type: 'message', timestamp: 1451617200000, source: &#123; type: 'user', userId: 'UdeadbeefdeadbeefdeLINEBOTUSERID', profile: [Function] &#125;, message: &#123; id: '100001', type: 'text', text: 'Hello,world', content: [Function] &#125;, reply: [Function] &#125;&#123; replyToken: 'ffffffffffffffffffffffffffffffff', type: 'message', timestamp: 1451617210000, source: &#123; type: 'user', userId: 'UdeadbeefdeadbeefdeLINEBOTUSERID', profile: [Function] &#125;, message: &#123; id: '100002', type: 'sticker', packageId: '1', stickerId: '1', content: [Function] &#125;, reply: [Function] &#125; 使用 Line App 傳訊息給 Line Bot手機 Line App 掃描 LINE developers 的 “Basic information” 畫面中的 QR Code 將 Line Bot 加入，然後輸入文字，測試 Line Bot 是否有正確接收到。 如果有正確收到訊息，則 Terminal 畫面會顯示以下資訊 12345678910111213&#123; type: 'message', replyToken: '98eb2ca92bdb468c9REPLYTOKEN', source: &#123; userId: 'U08cee31d0f3a94CLIENTAPPUSERID', type: 'user', profile: [Function] &#125;, timestamp: 1496462418683, message: &#123; type: 'text', id: '618217MSGID', text: '開發測試Q Q', content: [Function] &#125;, reply: [Function] &#125; 將收到的訊息，回覆給 Client App修改一下 on ‘message’ 的內容 12345678910111213141516bot.on('message', function(event) &#123; // 把收到訊息的 event 印出來 //console.log(event); // 重複 client 輸入的內容 if (event.message.type = 'text') &#123; var msg = event.message.text; event.reply(msg).then(function(data) &#123; // success console.log(msg); &#125;).catch(function(error) &#123; // error console.log('error'); &#125;); &#125;&#125;); 記得要重啟 nodejs server 喔 :) 主動發送訊息讓 server 啟動後 3 秒，發送訊息給 Client App，請在 index.js 加入以下程式，。 12345678// 主動發送訊息給 Client AppsetTimeout(function() &#123; var userId = 'Client App User ID'; var sendMsg = "push msg to one user"; bot.push(userId, [sendMsg]); console.log('userId: ' + userId); console.log('send: ' + sendMsg);&#125;, 3000); 參考資料： LINE BOT 實戰 ( 原理篇 ) LINE BOT 實戰 ( 聊天篇 ) 不必真的架站也能 5 分鐘實機體驗 LINE bot – 教學 ( by node.js &amp; ngrok ) Ngrok – 讓本機也可以開發 webhook 免部署環境的神器 ngrok.com Line Bot 的圖片來源 tgram.ru https://tgram.ru/wiki/bots/image/topics_bot.jpg]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>line bot</tag>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSX 執行 gvm pkgset use 發生錯誤]]></title>
    <url>%2F2017%2F04%2F26%2F20170426-osx-gvm-pkgset-use-error%2F</url>
    <content type="text"><![CDATA[第一次安裝 gvm 就踩到奇怪的雷gvm 是 golang 的版本管理工具（跟 nvm 很像），但是竟然在 OSX 下踩到奇怪的雷，在 ~/.bash_profile 內的 export GREP_OPTIONS=&#39;--color=always&#39; 會造成 gvm use 或 gvm pkgset use 無法正常運作。 解決方式：12$ vim $HOME/.gvm/scripts/env/pkgset-use$ vim $HOME/.gvm/scripts/env/use 在 $GREP_PATH 後面加上 --color=never，也就是修改成 $GREP_PATH --color=never]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F10%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>